<div><blockquote>
  <h1>Angle Brackets, Rifle Scopes</h1>
  <div><p><strong>Angular.js</strong> presents a remarkable number of interesting design choices in its code-base. Two particularly interesting cases are the way in which scopes work, and how &#x2026;</p></div>
</blockquote></div>

<div><p><strong>Angular.js</strong> presents a remarkable number of interesting design choices in its code-base. Two particularly interesting cases are the way in which scopes work, and how directives behave.</p></div>

<div></div>

<div><p>The first thing anyone is taught when approaching Angular for the first time is that directives are meant to interact with the DOM, or whatever does DOM manipulation for you, such as jQuery <a href="http://localhost:3000/2013/07/09/getting-over-jquery"><em>(Get over it!)</em></a>. What immediately becomes <strong>(and stays)</strong> confusing for most, though, is the interaction between scopes, directives, and controllers. Particularly when we focus on scopes, and start factoring in the advanced concepts: <strong>the digest cycle, isolate scopes, transclusion, and the different linking functions in directives.</strong></p> <p>This <a href="http://localhost:3000/2014/02/19/angle-brackets-synergistic-directives" aria-label="Angle Brackets, Synergistic Directives"><em>(two-part)</em> article</a> aims to navigate the salt marsh that are Angular scopes and directives, while providing an amusingly informative, in-depth read. In the first part, this one, I&#x2019;ll focus on scopes, and the life-cycle of an Angular application. The second part is focused on directives</p> <blockquote> <p>The bar is high, but scopes are <em>sufficiently hard</em> to explain. If I&#x2019;m going to fail miserably at it, at least I&#x2019;ll throw in a few more promises I can&#x2019;t keep!</p> </blockquote> <p>If the following figure <a href="https://github.com/angular/angular.js/wiki/Understanding-Scopes" target="_blank" aria-label="Understanding Scopes - Angular wiki on GitHub"><em>(source)</em></a> looks unreasonably mind bending, then this article might be for you.</p> <p><a href="https://github.com/angular/angular.js/wiki/Understanding-Scopes" target="_blank" aria-label="Understanding Scopes - Angular wiki on GitHub"><img src="https://i.stack.imgur.com/O1iSG.png" alt="mindbender.png"></a></p> <p><em>Disclaimer: article based on <a href="https://github.com/angular/angular.js/tree/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d" target="_blank">Angular v1.2.10 tree @ <code class="md-code md-code-inline">caed2dfe4f</code></a>.</em></p></div>

<div><p><a href="http://angularjs.org/" target="_blank" aria-label="Angular.js"><img alt="angularjs.png" class="" src="https://i.imgur.com/LSVpcm1.png"></a></p> <p>Angular uses scopes to abstract communication between directives and the DOM. Scopes also exist in the controller level. Scopes are plain old JavaScript objects <em>(POJO)</em>, which is fancy talk explaining that Angular does not heavily manipulate scopes, other than adding a bunch of properties, prefixed with one or two <code class="md-code md-code-inline">$</code> symbols. The ones prefixed with <code class="md-code md-code-inline">$$</code> aren&#x2019;t necessary as frequently, and using them is often a code smell, which can be avoided by having <em>a deeper understanding of the digest cycle</em>.</p> <h1 id="what-kind-of-scopes-are-we-talking-about">What kind of scopes are we talking about?</h1> <p>In Angular slang, a <em>&#x201C;scope&#x201D;</em> is not what you might be used to, when thinking about JavaScript code, or even programming in general. Usually, scopes are used to refer to the bag in a piece of code which holds the <em>context</em>, variables, and so on.</p> <blockquote> <p>In most languages variables are held in imaginary bags, which are defined by curly braces <code class="md-code md-code-inline">{}</code>, or code blocks. This is known as <a href="http://en.wikipedia.org/wiki/Scope_(computer_science)#Block_scope" target="_blank" aria-label="Block scoping in Computer Science - Wikipedia"><em>block scoping</em></a>. JavaScript, in contrast, deals in <a href="http://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping" target="_blank" aria-label="Lexical scoping - Wikipedia"><em>lexical scoping</em></a>, which pretty much means the bags are defined by functions, or the global object, rather than code blocks.</p> <p>Bags can contain any number of smaller bags. Each bag can access the candy <em>(sweet, sweet variables)</em> inside its parent bag (and its parent&#x2019;s parent, and so on), but they can&#x2019;t poke holes in smaller, or child bags.</p> </blockquote> <p>As a quick and dirty example, let&#x2019;s examine the function below.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">eat</span> <span class="md-code-params">(thing)</span> </span>{
  <span class="md-code-built_in">console</span>.log(<span class="md-code-string">&apos;Eating a &apos;</span> + thing);
}

<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">nuts</span> <span class="md-code-params">(peanut)</span> </span>{
  <span class="md-code-keyword">var</span> hazelnut = <span class="md-code-string">&apos;hazelnut&apos;</span>;

  <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">seeds</span> <span class="md-code-params">()</span> </span>{
    <span class="md-code-keyword">var</span> almond = <span class="md-code-string">&apos;almond&apos;</span>;
    eat(hazelnut); <span class="md-code-comment">// I can reach into the nuts bag!</span>
  }

  <span class="md-code-comment">// Inaccessible almond is inaccessible.</span>
  <span class="md-code-comment">// Almonds are not nuts.</span>
}
</code></pre> <p>I won&#x2019;t dwell on <a href="http://localhost:3000/2013/12/04/where-does-this-keyword-come-from" aria-label="Where does this keyword come from?"><code class="md-code md-code-inline">this</code> matter</a> any longer, as these are not the scopes people refer to, when talking about Angular.</p> <h2 id="scope-inheritance-in-angularjs">Scope inheritance in Angular.js</h2> <p>Scopes in Angular are also context, but <em>on Angular terms</em>. In Angular, a scope is associated to an element, while an element is not necessarily <em>directly associated</em> with a scope. Elements are assigned a scope is one of the following ways.</p> <p>A scope is created on an element by a controller, or a directive (directives don&#x2019;t always introduce new scopes).</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">nav</span> <span class="md-code-attribute">ng-controller</span>=<span class="md-code-value">&apos;menuCtrl&apos;</span>&gt;</span>
</code></pre> <p>If a scope isn&#x2019;t present on the element, then it&#x2019;s inherited from its parent.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">nav</span> <span class="md-code-attribute">ng-controller</span>=<span class="md-code-value">&apos;menuCtrl&apos;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">a</span> <span class="md-code-attribute">ng-click</span>=<span class="md-code-value">&apos;navigate()&apos;</span>&gt;</span>Click Me!<span class="md-code-tag">&lt;/<span class="md-code-title">a</span>&gt;</span> <span class="md-code-comment">&lt;!-- also &lt;nav&gt;&apos;s scope --&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">nav</span>&gt;</span>
</code></pre> <p>If the element isn&#x2019;t part of an <code class="md-code md-code-inline">ng-app</code>, then <strong>it doesn&#x2019;t belong to an scope at all</strong>.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">head</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">h1</span>&gt;</span>Pony Deli App<span class="md-code-tag">&lt;/<span class="md-code-title">h1</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">head</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">main</span> <span class="md-code-attribute">ng-app</span>=<span class="md-code-value">&apos;PonyDeli&apos;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">nav</span> <span class="md-code-attribute">ng-controller</span>=<span class="md-code-value">&apos;menuCtrl&apos;</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">a</span> <span class="md-code-attribute">ng-click</span>=<span class="md-code-value">&apos;navigate()&apos;</span>&gt;</span>Click Me!<span class="md-code-tag">&lt;/<span class="md-code-title">a</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">nav</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">main</span>&gt;</span>
</code></pre> <p>To figure out an element&#x2019;s scope, try to think of elements <strong>recursively inside-out</strong> following the three rules I&#x2019;ve just outlined. Does it create a new scope? That&#x2019;s its scope. Does it have a parent? Check the parent, then. Is it not part of an <code class="md-code md-code-inline">ng-app</code>? Tough luck, no scope.</p> <p>You can <strong>(and most definitely should)</strong> use developer tools magic to easily figure out the scope for an element.</p> <h2 id="examination-of-a-telescopic-sight">Examination of a telescopic sight</h2> <p>I&#x2019;ll walk through a few properties in a typical scope as a way to introduce concepts, before moving on to explaining how digests work and behave internally. I&#x2019;ll also let you in on how I&#x2019;m getting to these properties. First, I&#x2019;ll open Chrome and navigate to the application I&#x2019;m working on, which is written in Angular. Then I&#x2019;ll inspect on an element, and open the developer tools.</p> <blockquote> <p>Did you know that <a href="https://developers.google.com/chrome-developer-tools/docs/commandline-api#0_-_4" target="_blank" aria-label="Chrome Developer Tools CLI API Reference"><code class="md-code md-code-inline">$0</code> gives you <em>access to the last selected element</em></a> in the Elements pane? <code class="md-code md-code-inline">$1</code> gives you access to the previously selected element, and so on.</p> <p>I prognosticate <strong>you&#x2019;ll use <code class="md-code md-code-inline">$0</code> the most</strong>, particularly when working with Angular.</p> </blockquote> <p>For any given DOM element, <code class="md-code md-code-inline">angular.element</code> wraps that in either <a href="http://jquery.com/" target="_blank" aria-label="jQuery - write less, do more.">jQuery</a> or <em>jqLite</em>, their <a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/jqLite.js" target="_blank" aria-label="jqLite - Angular on GitHub">little own mini-jQuery</a>. Once wrapped, you get access to a <code class="md-code md-code-inline">scope()</code> function which returns, you guessed it, the Angular scope associated with that element. Combining that with <code class="md-code md-code-inline">$0</code>, I find myself using the following command quite often.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">angular.element($<span class="md-code-number">0</span>).scope()
</code></pre> <p><em>Of course, if you just know you&#x2019;re using jQuery, <code class="md-code md-code-inline">$($0).scope()</code> will work just the same. <code class="md-code md-code-inline">angular.element</code> works every time, <strong>regardless of jQuery</strong>.</em></p> <p>Then I&#x2019;m able to inspect the scope, assert that it&#x2019;s the scope I expected, and whether the property values match what I was expecting, as well. Super useful. Let&#x2019;s see what special properties are available on a typical scope.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">for</span>(o <span class="md-code-keyword">in</span> $($<span class="md-code-number">0</span>).scope())o[<span class="md-code-number">0</span>]==<span class="md-code-string">&apos;$&apos;</span>&amp;&amp;<span class="md-code-built_in">console</span>.log(o)
</code></pre> <p>That&#x2019;s good enough, I&#x2019;ll go over each property, clustering them by functionality, and going over each portion of Angular&#x2019;s scoping philosophy.</p> <h1 id="don-t-buy-a-rifle-scope-without-reading-this">Don&#x2019;t buy a rifle scope without reading this</h1> <p>Here I&#x2019;ve listed the properies yielded by that command, grouped by area of functionality. Let&#x2019;s start with the basic ones, which merely provide scope navigation.</p> <blockquote> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L127" target="_blank" aria-label="Assigning a unique identifier to a scope - Angular on GitHub"><code class="md-code md-code-inline">$id</code></a> Uniquely identifies the scope</li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L131" target="_blank" aria-label="Setting scope.$root - Angular on GitHub"><code class="md-code md-code-inline">$root</code></a> Root scope</li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L197" target="_blank" aria-label="Setting scope.$parent - Angular on GitHub"><code class="md-code md-code-inline">$parent</code></a> Parent scope, or <code class="md-code md-code-inline">null</code> if <code class="md-code md-code-inline">scope == scope.$root</code></li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#204" target="_blank" aria-label="Setting scope.$childHead - Angular on GitHub"><code class="md-code md-code-inline">$$childHead</code></a> First child scope, if any; or <code class="md-code md-code-inline">null</code></li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#202" target="_blank" aria-label="Setting scope.$childTail - Angular on GitHub"><code class="md-code md-code-inline">$$childTail</code></a> Last child scope, if any; or <code class="md-code md-code-inline">null</code></li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L199" target="_blank" aria-label="Setting scope.$prevSibling - Angular on GitHub"><code class="md-code md-code-inline">$$prevSibling</code></a> Previous sibling scope, if any; or <code class="md-code md-code-inline">null</code></li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L201" target="_blank" aria-label="Setting scope.$nextSibling - Angular on GitHub"><code class="md-code md-code-inline">$$nextSibling</code></a> Next sibling scope, if any; or <code class="md-code md-code-inline">null</code></li> </ol> </blockquote> <p>No surprises there. Navigating scopes like this would be utter non-sense. Sometimes accessing the <code class="md-code md-code-inline">$parent</code> scope might seem appropriate, but there are always better, <em>less coupled</em>, ways to deal with parental communication than <strong>tightly binding people-scopes together</strong>. One such way is using event listeners, our next batch of scope properties!</p> <h2 id="events-and-partying-spreading-the-word">Events and partying: spreading the word</h2> <p>The properties described below let us publish events and subscribe to them. This is a pattern known as <a href="http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern" target="_blank" aria-label="Publish &#x2013; Subscribe pattern on Wikipedia">PubSub</a>, or just events.</p> <blockquote> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L889" target="_blank" aria-label="Adding event $listeners - Angular on GitHub"><code class="md-code md-code-inline">$$listeners</code></a> Event listeners registered on the scope</li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L886-L906" target="_blank" aria-label="Listening $on events - Angular on GitHub"><code class="md-code md-code-inline">$on(evt, fn)</code></a> Attaches an event listener <code class="md-code md-code-inline">fn</code> named <code class="md-code md-code-inline">evt</code></li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L932-L975" target="_blank" aria-label="Spreading events upward with $emit - Angular on GitHub"><code class="md-code md-code-inline">$emit(evt, args)</code></a> Fires event <code class="md-code md-code-inline">evt</code>, roaring upward on the scope chain, triggering on the current scope and all <code class="md-code md-code-inline">$parent</code>s, including the <code class="md-code md-code-inline">$rootScope</code></li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L1000-L1048" target="_blank" aria-label="Spreading events downward with $broadcast - Angular on GitHub"><code class="md-code md-code-inline">$broadcast(evt, args)</code></a> Fires event <code class="md-code md-code-inline">evt</code>, triggering on the current scope and all its children</li> </ol> </blockquote> <p>When triggered, event listeners are passed an <code class="md-code md-code-inline">event</code> object, and any arguments passed to the <code class="md-code md-code-inline">$emit</code> or <code class="md-code md-code-inline">$broadcast</code> function. There are many ways in which scope events can provide value.</p> <p>A directive might use events to announce something important happened. Check out this sample directive, where a button can be clicked to announce you feel like eating food of some type.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">angular.module(<span class="md-code-string">&apos;PonyDeli&apos;</span>).directive(<span class="md-code-string">&apos;food&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> {
    scope: { <span class="md-code-comment">// I&apos;ll come back to directive scopes later</span>
      type: <span class="md-code-string">&apos;=type&apos;</span>
    },
    template: <span class="md-code-string">&apos;&lt;button ng-click=&quot;eat()&quot;&gt;I want to eat some {{type}}!&lt;/button&gt;&apos;</span>,
    link: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, element, attrs)</span> </span>{
      scope.eat = <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
        letThemHaveIt();
        scope.$emit(<span class="md-code-string">&apos;food.click&apos;</span>, scope.type, element);
      };

      <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">letThemHaveIt</span> <span class="md-code-params">()</span> </span>{
        <span class="md-code-comment">// do some fancy UI things</span>
      }
    }
  };
});
</code></pre> <p>I like namespacing my events, and so should you. It avoids name collisions, and it&#x2019;s clear where events originate from, or what event you&#x2019;re subscribing to. Imagine you have an interest in analytics, and want to track clicks on <code class="md-code md-code-inline">food</code> elements using <a href="https://mixpanel.com/" target="_blank" aria-label="Mixpanel Analytics Platform">Mixpanel</a>. That would actually be a reasonable need, and there&#x2019;s no reason why that should be polluting your directive, or your controller. You could put together a directive which does <em>the food-clicking analytics-tracking</em> for you, in a nicely self-contained manner.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">angular.module(<span class="md-code-string">&apos;PonyDeli&apos;</span>).directive(<span class="md-code-string">&apos;foodTracker&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(mixpanelService)</span> </span>{
  <span class="md-code-keyword">return</span> {
    link: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, element, attrs)</span> </span>{
      scope.$on(<span class="md-code-string">&apos;food.click&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(e, type)</span> </span>{
        mixpanelService.track(<span class="md-code-string">&apos;food-eater&apos;</span>, type);
      });
    }
  };
});
</code></pre> <p>The service implementation is not relevant here, as it would merely wrap Mixpanel&#x2019;s client-side API. The HTML would look like below, and I threw in a controller, to hold all of the food types I want to serve in my deli. The <a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/Angular.js#L1144" target="_blank" aria-label="The ng-app directive - Angular on GitHub"><code class="md-code md-code-inline">ng-app</code></a> directive helps Angular to auto-bootstrap my application, as well. Rounding the example up, I added an <code class="md-code md-code-inline">ng-repeat</code> directive so I can render all of my food without repeating myself, it&#x2019;ll just loop through <code class="md-code md-code-inline">foodTypes</code>, available on <code class="md-code md-code-inline">foodCtrl</code>&apos;s scope.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">ul</span> <span class="md-code-attribute">ng-app</span>=<span class="md-code-value">&apos;PonyDeli&apos;</span> <span class="md-code-attribute">ng-controller</span>=<span class="md-code-value">&apos;foodCtrl&apos;</span> <span class="md-code-attribute">food-tracker</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">li</span> <span class="md-code-attribute">food</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;type&apos;</span> <span class="md-code-attribute">ng-repeat</span>=<span class="md-code-value">&apos;type in foodTypes&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">li</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">ul</span>&gt;</span>
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-javascript">angular.module(<span class="md-code-string">&apos;PonyDeli&apos;</span>).controller(<span class="md-code-string">&apos;foodCtrl&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">($scope)</span> </span>{
  $scope.foodTypes = [<span class="md-code-string">&apos;onion&apos;</span>, <span class="md-code-string">&apos;cucumber&apos;</span>, <span class="md-code-string">&apos;hazelnut&apos;</span>];
});
</code></pre> <p>The fully working example is <a href="http://codepen.io/bevacqua/pen/qmBGd" target="_blank" aria-label="Separation of concerns using scope events">hosted on CodePen</a>.</p> <p>That&#x2019;s a good example on paper, but you need to think about whether you need an event anyone can subscribe to. Maybe a service will do? In this case, it could go either way. You could argue that you need events because you don&#x2019;t know who else is going to subscribe to <code class="md-code md-code-inline">food.click</code>, and that means it&#x2019;d be more <em>&#x201C;future-proof&#x201D;</em> to use events. You could also say that the <code class="md-code md-code-inline">food-tracker</code> directive doesn&#x2019;t have a reason to be, as it doesn&#x2019;t interact with the DOM or even the scope at all, other than to listen to an event which you could replace with a service.</p> <p>Both thoughts would be correct, in the given context. As more components need to be <code class="md-code md-code-inline">food.click</code>-aware, it may feel clearer that <em>events are the way to go</em>. In reality, though, events are most useful when you actually need to bridge the gap between two scopes (or more), and other factors aren&#x2019;t as important.</p> <p>As we&#x2019;ll see when we inspect directives more closely in the upcoming second part of this article, events aren&#x2019;t even necessary for scopes to communicate. A child scope may read from its parent by binding to it, and it can also update those values.</p> <blockquote> <p>There&#x2019;s rarely a good reason to host events to help children communicate better with their parent.</p> </blockquote> <p>Siblings often have a harder time communicating with each other, and they often do so through a parent they have in common. That generally translates into broadcasting from <code class="md-code md-code-inline">$rootScope</code>, and listening on the interested siblings, like below.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">angular.module(<span class="md-code-string">&apos;PonyDeli&apos;</span>).controller(<span class="md-code-string">&apos;foodCtrl&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">($rootScope)</span> </span>{
  $scope.foodTypes = [<span class="md-code-string">&apos;onion&apos;</span>, <span class="md-code-string">&apos;cucumber&apos;</span>, <span class="md-code-string">&apos;hazelnut&apos;</span>];
  $scope.deliver = <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(req)</span> </span>{
    $rootScope.$broadcast(<span class="md-code-string">&apos;delivery.request&apos;</span>, req);
  };
});

angular.module(<span class="md-code-string">&apos;PonyDeli&apos;</span>).controller(<span class="md-code-string">&apos;deliveryCtrl&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">($scope)</span> </span>{
  $scope.$on(<span class="md-code-string">&apos;delivery.request&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(e, req)</span> </span>{
    $scope.received = <span class="md-code-literal">true</span>; <span class="md-code-comment">// deal with the request</span>
  });
});
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">body</span> <span class="md-code-attribute">ng-app</span>=<span class="md-code-value">&apos;PonyDeli&apos;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">ng-controller</span>=<span class="md-code-value">&apos;foodCtrl&apos;</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">ul</span> <span class="md-code-attribute">food-tracker</span>&gt;</span>
      <span class="md-code-tag">&lt;<span class="md-code-title">li</span> <span class="md-code-attribute">food</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;type&apos;</span> <span class="md-code-attribute">ng-repeat</span>=<span class="md-code-value">&apos;type in foodTypes&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">li</span>&gt;</span>
    <span class="md-code-tag">&lt;/<span class="md-code-title">ul</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">button</span> <span class="md-code-attribute">ng-click</span>=<span class="md-code-value">&apos;deliver()&apos;</span>&gt;</span>I want to eat that!<span class="md-code-tag">&lt;/<span class="md-code-title">button</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">ng-controller</span>=<span class="md-code-value">&apos;deliveryCtrl&apos;</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">span</span> <span class="md-code-attribute">ng-show</span>=<span class="md-code-value">&apos;received&apos;</span>&gt;</span>
      A monkey has been dispatched. You shall eat soon.
    <span class="md-code-tag">&lt;/<span class="md-code-title">span</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
</code></pre> <p>This one is <a href="http://codepen.io/bevacqua/pen/CzGla" target="_blank" aria-label="Siblings talking to each other">also on CodePen</a>.</p> <p>Over time you&#x2019;ll learn to lean towards events or services accordingly. I could say that you should use events when you expect view models to change in response to <code class="md-code md-code-inline">event</code>, and you ought to use services otherwise, when you don&#x2019;t expect view model changes. Sometimes the response is a mixture of both, where an action triggers an event which calls a service, or a service which broadcasts an event on <code class="md-code md-code-inline">$rootScope</code>. It depends on each situation, and you should analyze it as such, rather than attempting to nail down the <strong>elusive one-size-fits-all solution</strong>.</p> <p>If you have two components which communicate through <code class="md-code md-code-inline">$rootScope</code>, you might prefer to use <strong><code class="md-code md-code-inline">$rootScope.$emit</code></strong> <em>(rather than <code class="md-code md-code-inline">$broadcast</code>)</em> and <code class="md-code md-code-inline">$rootScope.$on</code>. That way, the event will only spread among <code class="md-code md-code-inline">$rootScope.$$listeners</code>, and it won&#x2019;t waste time looping through every children of <code class="md-code md-code-inline">$rootScope</code>, which <em>you just know</em> won&#x2019;t have any listeners for that event. Here&#x2019;s an example service using <code class="md-code md-code-inline">$rootScope</code> to provide events without limiting itself to a particular scope. It provides a subscribe method which allows consumers to register event listeners, and it might do things internally, which trigger that event.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">angular.module(<span class="md-code-string">&apos;PonyDeli&apos;</span>).factory(<span class="md-code-string">&quot;notificationService&quot;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">($rootScope)</span> </span>{
  <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">notify</span> <span class="md-code-params">(data)</span> </span>{
    $rootScope.$emit(<span class="md-code-string">&quot;notificationService.update&quot;</span>, data);
  }

  <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">listen</span> <span class="md-code-params">(fn)</span> </span>{
    $rootScope.$on(<span class="md-code-string">&quot;notificationService.update&quot;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(e, data)</span> </span>{
      fn(data);
    });
  }

  <span class="md-code-comment">// anything that might have a reason</span>
  <span class="md-code-comment">// to emit events at later points in time</span>
  <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">load</span> <span class="md-code-params">()</span> </span>{
    setInterval(notify.bind(<span class="md-code-literal">null</span>, <span class="md-code-string">&apos;Something happened!&apos;</span>), <span class="md-code-number">1000</span>);
  }

  <span class="md-code-keyword">return</span> {
    subscribe: listen,
    load: load
  };
});
</code></pre> <p>You guessed right! This one is <a href="http://codepen.io/bevacqua/pen/HsBCa" target="_blank" aria-label="Service events, using $rootScope">also on CodePen</a>.</p> <p>Enough events versus services banter, shall we move on to some other properties?</p> <h2 id="digesting-change-sets">Digesting change-sets</h2> <blockquote> <p><strong>Understanding this intimidating process is the cornerstone to understanding Angular.</strong></p> </blockquote> <p>Angular bases its data-binding features in <a href="http://stackoverflow.com/a/9693933/389745" target="_blank" aria-label="Data binding in Angular.js, Misko on StackOverflow">a dirty-checking loop which tracks changes</a>, and fires events when these change. This is simpler than it sounds. No, really. It is! Let me quickly go over each of the core components of the <code class="md-code md-code-inline">$digest</code> cycle. Firstly, there&#x2019;s the <code class="md-code md-code-inline">scope.$digest</code> method. This method recursively digests changes in a scope and its children.</p> <blockquote> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L549" target="_blank" aria-label="scope.$digest method - Angular on GitHub"><code class="md-code md-code-inline">$digest()</code></a> Executes the digest dirty-checking loop</li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L1056" target="_blank" aria-label="Digest phases - Angular on GitHub"><code class="md-code md-code-inline">$$phase</code></a> Current phase in the digest cycle. One of <code class="md-code md-code-inline">[null, &apos;$apply&apos;, &apos;$digest&apos;]</code></li> </ol> </blockquote> <p>It should be noted that you need to be careful about triggering digests, because attempting to do so when you&#x2019;re already in a digest phase will cause Angular to blow up in a mysterious haze of unexplainable phenomena. In other words, it&#x2019;ll be pretty hard to pinpoint the root cause of the issue.</p> <p>Let&#x2019;s take a look at what <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$digest" target="_blank" aria-label="$digest on Angular.js documentation">the documentation</a> has to say, regarding <code class="md-code md-code-inline">$digest</code>.</p> <blockquote> <h4 id="digest"><code class="md-code md-code-inline">$digest()</code></h4> <p>Processes all of the <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$watch" target="_blank" aria-label="$watch on Angular.js documentation">watchers</a> of the current scope and its children. Because a <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$watch" target="_blank" aria-label="$watch on Angular.js documentation">watcher</a>&#x2019;s listener can change the model, the <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$digest" target="_blank" aria-label="$digest on Angular.js documentation">$digest()</a> keeps calling the <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$watch" target="_blank" aria-label="$watch on Angular.js documentation">watchers</a> until no more listeners are firing. This means that it is possible to get into an infinite loop. This function will throw <code class="md-code md-code-inline">&apos;Maximum iteration limit exceeded.&apos;</code> if the number of iterations exceeds 10.</p> <p>Usually, you don&#x2019;t call <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$digest" target="_blank" aria-label="$digest on Angular.js documentation">$digest()</a> directly in <a href="http://docs.angularjs.org/api/ng.directive:ngController" target="_blank" aria-label="ng-controller on Angular.js documentation">controllers</a> or in <a href="http://docs.angularjs.org/api/ng.$compileProvider#methods_directive" target="_blank" aria-label="Directives on Angular.js documentation">directives</a>. Instead, you should call <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$apply" target="_blank" aria-label="$apply on Angular.js documentation">$apply()</a> (typically from within a <a href="http://docs.angularjs.org/api/ng.$compileProvider#methods_directive" target="_blank" aria-label="Directives on Angular.js documentation">directives</a>), which will force a <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$digest" target="_blank" aria-label="$digest on Angular.js documentation">$digest()</a>.</p> </blockquote> <p>So, a <code class="md-code md-code-inline">$digest</code> processes all watchers, and then the watchers those watchers trigger, until nothing else triggers a watch. There&#x2019;s two questions left to understand this loop.</p> <ul> <li>What the hell is <em>a watcher</em>?</li> <li>Who triggers a <code class="md-code md-code-inline">$digest</code>!?</li> </ul> <p>Answering both of these questions can be made out to be <strong>as simple or as complicated</strong> as the person explaining them to you feels like. I&#x2019;ll begin talking about watchers, and I&#x2019;ll let you draw <em>your own conclusions</em>.</p> <p>If you&#x2019;ve read this far, you probably <em>already know</em> what a watcher is. You&#x2019;ve probably used <a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L319" target="_blank" aria-label="scope.$watch method - Angular on GitHub"><code class="md-code md-code-inline">scope.$watch</code></a>, and maybe even used <a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L415" target="_blank" aria-label="scope.$watchCollection method - Angular on GitHub"><code class="md-code md-code-inline">scope.$watchCollection</code></a>. The <code class="md-code md-code-inline">$$watchers</code> property has all the watchers on a scope.</p> <blockquote> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L319" target="_blank" aria-label="scope.$watch method - Angular on GitHub"><code class="md-code md-code-inline">$watch(watchExp, listener, objectEquality)</code></a> Adds a watch listener to the scope</li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L415" target="_blank" aria-label="scope.$watchCollection method - Angular on GitHub"><code class="md-code md-code-inline">$watchCollection</code></a> Watches array items or object map properties</li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L352" target="_blank" aria-label="scope.$watchers collection - Angular on GitHub"><code class="md-code md-code-inline">$$watchers</code></a> Contains all the watches associated with the scope</li> </ol> </blockquote> <p>Watchers are the single most important aspect of an Angular application&#x2019;s data-binding capabilities, but Angular needs our help in order to trigger those watchers, because otherwise it can&#x2019;t effectively update data-bound variables appropriately. Consider the following example.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">angular.module(<span class="md-code-string">&apos;PonyDeli&apos;</span>).controller(<span class="md-code-string">&apos;foodCtrl&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">($scope)</span> </span>{
  $scope.prop = <span class="md-code-string">&apos;initial value&apos;</span>;
  $scope.dependency = <span class="md-code-string">&apos;nothing yet!&apos;</span>;

  $scope.$watch(<span class="md-code-string">&apos;prop&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(value)</span> </span>{
    $scope.dependency = <span class="md-code-string">&apos;prop is &quot;&apos;</span> + value + <span class="md-code-string">&apos;&quot;! such amaze&apos;</span>;
  });

  setTimeout(<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
    $scope.prop = <span class="md-code-string">&apos;something else&apos;</span>;
  }, <span class="md-code-number">1000</span>);
});
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">body</span> <span class="md-code-attribute">ng-app</span>=<span class="md-code-value">&apos;PonyDeli&apos;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">ul</span> <span class="md-code-attribute">ng-controller</span>=<span class="md-code-value">&apos;foodCtrl&apos;</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">li</span> <span class="md-code-attribute">ng-bind</span>=<span class="md-code-value">&apos;prop&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">li</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">li</span> <span class="md-code-attribute">ng-bind</span>=<span class="md-code-value">&apos;dependency&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">li</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">ul</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
</code></pre> <p>So you have <code class="md-code md-code-inline">&apos;initial value&apos;</code>, and expect the second HTML line to change to <code class="md-code md-code-inline">&apos;prop is &quot;something else&quot;! such amaze&apos;</code> after a second. Right? Even more interesting, you&#x2019;d at the very least expect the first line to change to <code class="md-code md-code-inline">&apos;something else&apos;</code>! Why doesn&#x2019;t it? That&#x2019;s not a watcher&#x2026; or is it?</p> <p>Actually, a lot of what you do in the HTML markup ends up <em>creating a watcher</em>. In this case, <a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/directive/ngBind.js#L54-L62" target="_blank" aria-label="ng-bind directive creating a watch - Angular on GitHub">each <code class="md-code md-code-inline">ng-bind</code> directive created a watcher</a> on the property. It will update the HTML of the <code class="md-code md-code-inline">&lt;li&gt;</code>, whenever <code class="md-code md-code-inline">prop</code> and <code class="md-code md-code-inline">dependency</code> change, similarly to how our watch will change the property itself.</p> <p>That way, you can now think of your code as having three watches, one for each <code class="md-code md-code-inline">ng-bind</code> directive, and the one in the controller. How is Angular supposed to know the property is updated, after the timeout? You could tell it, just by adding a manual digest to the timeout callback.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">setTimeout(<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  $scope.prop = <span class="md-code-string">&apos;something else&apos;</span>;
  $scope.$digest();
}, <span class="md-code-number">1000</span>);
</code></pre> <p>Here&#x2019;s a CodePen <a href="http://codepen.io/bevacqua/pen/lLbtI" target="_blank" aria-label="No digest means no watchers will fire">without the <code class="md-code md-code-inline">$digest</code></a>, and one that <a href="http://codepen.io/bevacqua/pen/vwDoz" target="_blank" aria-label="Using scope.$digest fixes the issue">does <code class="md-code md-code-inline">$digest</code></a>, after the timeout. The more <a href="http://localhost:3000/2013/08/27/the-angular-way" aria-label="The Angular Way">Angular way</a> to do it, however, would be using the <a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/timeout.js#L36" target="_blank" aria-label="$timeout service - Angular on GitHub"><code class="md-code md-code-inline">$timeout</code> service</a> instead of <code class="md-code md-code-inline">setTimeout</code>. It provides some error handling, and executes <code class="md-code md-code-inline">$apply()</code>.</p> <blockquote> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L842-L857" target="_blank" aria-label="scope.$apply method - Angular on GitHub"><code class="md-code md-code-inline">$apply(expr)</code></a> Parses and evaluates an expression, then executes the digest loop <strong>on <code class="md-code md-code-inline">$rootScope</code></strong></li> </ol> </blockquote> <p>In addition to executing the digest on every scope, <code class="md-code md-code-inline">$apply</code> provides error handling functionality, as well. If you&#x2019;re trying to tune your performance, then using <code class="md-code md-code-inline">$digest</code> may be warranted, but I&#x2019;d stay away from it until you feel really comfortable with how Angular works internally.</p> <p>We&#x2019;re back to the second question, now.</p> <blockquote> <ul> <li>Who triggers a <code class="md-code md-code-inline">$digest</code>!?</li> </ul> </blockquote> <p>Digests are triggered internally in strategic places all over the Angular code-base. They are triggered either directly or by calls to <code class="md-code md-code-inline">$apply()</code>, like we&#x2019;ve observed in the <code class="md-code md-code-inline">$timeout</code> service. Most directives, both those found in Angular core and those out in the wild, trigger digests. Digests fire your watchers, and watchers update your UI. That&#x2019;s the basic idea, anyways.</p> <p>There&#x2019;s a pretty good resource with best practices in the Angular Wiki, which you can find linked at the bottom of this article.</p> <blockquote> <h4 id="a-word-of-advice-regarding-advice">A word of advice, regarding advice</h4> <p>Ever since I&#x2019;ve come aboard the Angular boat, I&#x2019;ve read lots of advice on how to structure your code, what to do; and what not to do, when working with Angular. The truth is that you need to take advice regarding Angular with a pinch of salt. There&#x2019;s lots of bad advice clinging to the web, from back when Angular wasn&#x2019;t the mature framework that it is today, or written by people who don&#x2019;t have a clue what they&#x2019;re talking about.</p> <p>Even <a href="http://www.benlesh.com/2013/08/angularjs-watch-digest-and-apply-oh-my.html" target="_blank" aria-label="AngularJS: $watch, $digest and $apply">the good advice</a> is <strong>one guy&#x2019;s opinion</strong>, and you shouldn&#x2019;t stick to whatever worked for someone else, just because they&#x2019;ve blogged about them. I do believe that you should read about what other people believe to be best practices, and embrace them, if you feel they&#x2019;re adequate. But don&#x2019;t turn them into your unbreakable mantra, because they&#x2019;ll break you.</p> </blockquote> <p>I&#x2019;ve explained how watches and the digest loop interact with each other. Below, I listed properties related to the digest loop, which you can find on a scope. These help you parse text expressions through Angular&#x2019;s compiler, or execute pieces of code at different points of the digest cycle.</p> <blockquote> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L744" target="_blank" aria-label="scope.$eval method - Angular on GitHub"><code class="md-code md-code-inline">$eval(expression, locals)</code></a> Parse and evaluate an scope expression immediately</li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L778" target="_blank" aria-label="scope.$evalAsync method - Angular on GitHub"><code class="md-code md-code-inline">$evalAsync(expression)</code></a> Parse and evaluate an expression at a later point in time</li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L568-L577" target="_blank" aria-label="Digest async queue - Angular on GitHub"><code class="md-code md-code-inline">$$asyncQueue</code></a> Async task queue, consumed on every digest</li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L792" target="_blank" aria-label="$postDigest method - Angular on GitHub"><code class="md-code md-code-inline">$$postDigest(fn)</code></a> Executes <code class="md-code md-code-inline">fn</code> after the next digest cycle</li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L793" target="_blank" aria-label="The $postDigest queue - Angular on GitHub"><code class="md-code md-code-inline">$$postDigestQueue</code></a> Methods registered with <code class="md-code md-code-inline">$$postDigest(fn)</code></li> </ol> </blockquote> <p>Phew, that&#x2019;s it. It wasn&#x2019;t that bad, was it?</p> <h2 id="the-scope-is-dead-long-live-the-scope">The <code class="md-code md-code-inline">Scope</code> is dead, long live the <code class="md-code md-code-inline">Scope</code>!</h2> <p>These are the last few, rather dull-looking, properties in a scope. They deal with the scope life cycle, and are mostly used for internal purposes, although there are cases where you may want to <code class="md-code md-code-inline">$new</code> scopes by yourself.</p> <blockquote> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1412" target="_blank" aria-label="Assigning isolate bindings - Angular on GitHub">$$isolateBindings</a> Isolate scope bindings, e.g <code class="md-code md-code-inline">{ options: &apos;@megaOptions&apos; }</code>. Very internal</li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L176" target="_blank" aria-label="scope.$new method - Angular on GitHub">$new(isolate)</a> Creates a child scope, or an isolate scope, which won&#x2019;t inherit from its parent</li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L693" target="_blank" aria-label="scope.$destroy method - Angular on GitHub">$destroy</a> Removes the scope from the scope chain. Scope and children won&#x2019;t receive events, and watches won&#x2019;t fire anymore</li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/rootScope.js#L699" target="_blank" aria-label="scope.$destroyed - Angular on GitHub">$$destroyed</a> Has the scope been destroyed?</li> </ol> </blockquote> <p>Isolate scopes? What is this madness? The <a href="http://localhost:3000/2014/02/19/angle-brackets-synergistic-directives" aria-label="Angle Brackets, Synergistic Directives">second part of this article</a> is dedicated to directives, and it covers <strong>isolate scopes, transclusion, linking functions, compilers, directive controllers, and more</strong>.</p> <h2 id="further-reading">Further Reading</h2> <p>Here&#x2019;s some additional resources you can read to further extend your comprehension of Angular.</p> <ul> <li><a href="http://localhost:3000/2013/08/27/the-angular-way" aria-label="The Angular Way">The Angular Way</a></li> <li><a href="https://github.com/angular/angular.js/wiki/Anti-Patterns" target="_blank" aria-label="Angular.js Anti Patterns">Anti Patterns</a></li> <li><a href="https://github.com/angular/angular.js/wiki/Best-Practices" target="_blank" aria-label="Angular.js Best Practices">Best Practices</a></li> <li><a href="http://todomvc.com/architecture-examples/angularjs" target="_blank" aria-label="TodoMVC Angular Example">TodoMVC Angular.js Example</a></li> <li><a href="https://egghead.io/" target="_blank" aria-label="Training Videos on egghead.io">Training Videos from John Lindquist</a></li> <li><a href="http://www.ng-newsletter.com/" target="_blank" aria-label="The free, weekly newsletter of the best AngularJS links created by the AngularJS community">ng-newsletter</a></li> <li><a href="http://stackoverflow.com/a/15113029/389745" target="_blank" aria-label="Using scope.$watch and scope.$apply, StackOverflow">Using scope.$watch and scope.$apply</a></li> <li><a href="http://localhost:3000/2014/02/19/angle-brackets-synergistic-directives" aria-label="Angle Brackets, Synergistic Directives">Part 2: Angle Brackets, Synergistic Directives</a></li> </ul> <p>Please comment on any issues regarding this article, so <em>everyone can benefit</em> from your feedback. Also, you should <a href="https://twitter.com/nzgb" target="_blank" aria-label="@nzgb on Twitter">follow me on Twitter</a>!</p></div>
