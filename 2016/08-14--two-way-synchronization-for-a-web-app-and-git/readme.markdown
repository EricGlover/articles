<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/two-way-synchronization-for-a-web-app-and-git">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/two-way-synchronization-for-a-web-app-and-git"><div><img src="https://i.imgur.com/P426mA0.jpg" alt="Two-way Synchronization for a Web App and Git"></div></a>

<h1>Two-way Synchronization for a Web App and Git</h1>

<p><kbd>git</kbd> <kbd>webhooks</kbd></p>

<blockquote><p>This article explains the challenges I went through and how I ended up implementing a two-way synchronization between the web application and a git repository for the articles.</p>
</blockquote>

<div><p>For a long while I wanted to implement a feature where people reading an article on Pony Foo could click on an <em>&#x201C;Improve this article&#x201D;</em> button whenever they spotted an error, submit a PR, and help us promptly fix the article. These features are usually grounded on git, but the issue was that Pony Foo had no understanding of git whatsoever.</p> <p>This article explains the challenges I went through and how I ended up implementing a two-way synchronization between the web application and a git repository for the articles.</p></div>

<blockquote></blockquote>

<div><p>There were several challenges that had to be sorted out before the implementation, which didn&#x2019;t take that long once I settled for an idea on how I wanted to approach it.</p> <ol> <li> <p>A script that converted any database article into its file system representation was necessary so that I could use that representation when talking to git.</p> </li> <li> <p>The files need to be straightforward.</p> <ul> <li>A huge JSON file doesn&#x2019;t make a lot of sense for Markdown articles, and a single Markdown file might prove confusing due to the amount of fields present on a Pony Foo article.</li> <li>The ability to see the rendered article on GitHub is pretty important, but the problem is that the Markdown in Pony Foo has diverged quite a bit from GitHub&#x2019;s Markdown. At the same time, articles rely pretty heavily on domain-relative links <em>(such as <a href="https://ponyfoo.com/subscribe" aria-label="Subscribe to Pony Foo articles!"><code class="md-code md-code-inline">/subscribe</code></a>)</em> and expecting the git user to enjoy an article by looking at half a dozen different files didn&#x2019;t seem reasonable.</li> <li>Not every field needs to be on git. The git representation can act as a mirror of the database, which is the single source of truth. Which fields should be on git?</li> </ul> </li> <li> <p>The repository needs to be provisioned with all pre-existing articles. I needed a script that went through every published article and converted it to files in a git repository.</p> </li> <li> <p>Drafts need to be excluded from the repository. They haven&#x2019;t been published on the site yet, and as such providing them in the open in an unpolished form isn&#x2019;t the best idea. Since drafts aren&#x2019;t available on git, we don&#x2019;t need to concern ourselves with publishing or handling new articles being created directly through git.</p> </li> <li> <p>Whenever an article is updated on the website, we need to update its files and push to git.</p> </li> <li> <p>Whenever an article is updated on git, we need to update the web version.</p> </li> </ol> <p>Let&#x2019;s follow the logical progression. We&#x2019;ll start with provisioning the repository, and then look at how we can keep it up to date whenever an article is updated on the site. Once the repository is kept up to date with changes to the website, we can look at reacting to updates made against git.</p> <p>Shall we?</p></div>

<div><h1 id="provisioning-the-repository">Provisioning the Repository</h1> <p>The first order of business was to figure out the file structure. I settled for a pattern where I&#x2019;d have a standalone <a href="https://github.com/ponyfoo/articles" target="_blank" aria-label="ponyfoo/articles on GitHub"><code class="md-code md-code-inline">articles</code></a> repository. It would include licensing and contributing information at the top level, along with some dotfiles and other commonplace open-source files. I didn&#x2019;t want a deep folder structure for the articles so I decided on one folder per year, and a folder per article during that year.</p> <p>Here is the folder structure for the first five articles this year. I used a <code class="md-code md-code-inline">${ month }-${ day }--${ article.slug }</code> pattern so that they would be properly sorted but also have a meaningful description.</p> <pre class="md-code-block"><code class="md-code">2016/01-11--asynchronous-i-o-with-generators-and-promises/
2016/01-21--controversial-state-of-javascript-tooling/
2016/01-30--es2016-features-and-ecmascript-as-a-living-standard/
2016/02-02--understanding-javascript-async-await/
2016/02-09--ecmascript-string-padding/
</code></pre> <p>The <code class="md-code md-code-inline">metadata.json</code> file looks like the piece of JSON seen below. The <code class="md-code md-code-inline">id</code> and <code class="md-code md-code-inline">author</code> fields are used to uniquely identify the article, but they won&#x2019;t be updated should they change in git. The article&#x2019;s title, slug, tags, and hero image, can be updated on GitHub.</p> <pre class="md-code-block"><code class="md-code md-lang-json">{
  &quot;<span class="md-code-attribute">id</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;57783d1df2a76b840314377d&quot;</span></span>,
  &quot;<span class="md-code-attribute">author</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;543d222f4683586910034197&quot;</span></span>,
  &quot;<span class="md-code-attribute">title</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;&lt;div&gt;How Pony Foo is ridiculously over-engineered&lt;/div&gt;&lt;div&gt;&lt;em&gt;&#x2014; and why that is awesome&lt;/em&gt;&lt;/div&gt;&quot;</span></span>,
  &quot;<span class="md-code-attribute">slug</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;most-over-engineered-blog-ever&quot;</span></span>,
  &quot;<span class="md-code-attribute">tags</span>&quot;: <span class="md-code-value">[
    <span class="md-code-string">&quot;side-projects&quot;</span>,
    <span class="md-code-string">&quot;ponyfoo&quot;</span>
  ]</span>,
  &quot;<span class="md-code-attribute">heroImage</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;https://i.imgur.com/IF2aFsB.jpg&quot;</span>
</span>}
</code></pre> <p>There&#x2019;s a single file for each different piece of Markdown:</p> <ul> <li>One file for the teaser below the title</li> <li>One file for the introduction to the article, used when sending out an email about a new article</li> <li>One file for the body of the article, containing everything else in the article</li> <li>One file for the article summary and another for the notes from the editor, both of which are optional</li> </ul> <p>Lastly, we also have a rendered <code class="md-code md-code-inline">readme.markdown</code> preview, which is the product of compiling all Markdown fields into HTML with a header that includes the title, tags, summary, and a warning about the readme file being autogenerated <em>(and thus read-only)</em>. We say the <code class="md-code md-code-inline">readme</code> is in <code class="md-code md-code-inline">.markdown</code> format even though it&#x2019;s spewed as raw HTML, so that GitHub renders the previews when humans visit one of the folders on the repository.</p> <p>These files are written to disk for an article, via a single <code class="md-code md-code-inline">updateSyncRoot(article, done)</code> function. The same function is called for every published article on the site, and we have our provisioning set up.</p> <p>So far we have a directory tree with a bunch of folders, Markdown and JSON files. For local development, I cloned the git repository and then called <code class="md-code md-code-inline">updateSyncRoot</code> for every article, provisioning the repository.</p> <p>An important note was to use a branch other than <code class="md-code md-code-inline">master</code>, for SEO purposes, as GitHub indexes <code class="md-code md-code-inline">master</code> by default, but I&#x2019;d rather not have search engines crawl GitHub for entire copies of every article on the website. I use a <code class="md-code md-code-inline">noindex</code> branch name to communicate that intent clearly, and made that the default branch on GitHub.</p> <p>At this point, I manually commit and push to GitHub every single article, in file format. The rendered preview of an article on GitHub is shown below.</p> <figure><a href="https://github.com/ponyfoo/articles/tree/noindex/2016/07-02--most-over-engineered-blog-ever" target="_blank"><img alt="An article on GitHub" class="" src="https://i.imgur.com/0yANQiP.png"></a></figure> <p>Next up, we need to push updates to the repository.</p> <h1 id="keeping-the-repository-up-to-date">Keeping the Repository Up To Date</h1> <p>This step is a bit more challenging, as it involves several automated <code class="md-code md-code-inline">git</code> commands. I used a <code class="md-code md-code-inline">mongoose</code> post-save hook so that whenever an article is saved <em>, for both inserts and updates,</em> a function gets called. We use that hook to call a <code class="md-code md-code-inline">pushToGit({ article, oldSlug }, done)</code> function, passing in the article and the slug it had before the article was saved.</p> <p>In <code class="md-code md-code-inline">pushToGit</code> we start by running <code class="md-code md-code-inline">git pull</code> on the repository. I used the <code class="md-code md-code-inline">simple-git</code> package to run <code class="md-code md-code-inline">git</code> commands from node. After pulling, we use the <code class="md-code md-code-inline">updateSyncRoot(article, done)</code> function to update the file representation of our article. Then, if the <code class="md-code md-code-inline">oldSlug</code> is different than the new one, we remove the files at the old slug&#x2019;s directory structure. Finally, we run <code class="md-code md-code-inline">git add</code>, <code class="md-code md-code-inline">git commit</code>, and <code class="md-code md-code-inline">git push</code> on the changed files.</p> <p>Whenever an article is deleted, in a similar fashion to our update hook, we remove its files from the repository. We do this by pulling first, then running <code class="md-code md-code-inline">git rm</code> for the related files, committing, and pushing.</p> <p>These two actions ensure that any updates to the articles are mirrored on the git repository. The last piece of the equation is to handle <code class="md-code md-code-inline">git push</code> events.</p> <h1 id="handling-updates-pushed-to-git">Handling Updates Pushed To Git</h1> <p>We can register a Git hook on GitHub so that whenever new commits are pushed onto our repository, our web app gets a notification. I chose the <code class="md-code md-code-inline">/api/git-hooks/articles</code> endpoint and a secret code. GitHub uses the secret to encode payloads sent to <code class="md-code md-code-inline">/api/git-hooks/articles</code>, so that when we receive a request for that endpoint, we know it came from GitHub.</p> <p>On the web app, I use <a href="https://github.com/rvagg/github-webhook-handler" target="_blank" aria-label="rvagg/github-webhook-handler on GitHub"><code class="md-code md-code-inline">github-webhook-handler</code></a> to receive the event. The <code class="md-code md-code-inline">articleGit</code> service is where I have the git-related functions I mentioned earlier, and the <code class="md-code md-code-inline">env</code> module contains all secrets used by the application. I made a small <code class="md-code md-code-inline">configure</code> helper function which takes care of creating the webhook handler middleware for an Express <code class="md-code md-code-inline">app</code>, using a <code class="md-code md-code-inline">key</code> as part of the endpoint, and any number of <code class="md-code md-code-inline">...events</code> the application accepts and knows how to process.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> winston = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;winston&apos;</span>);
<span class="md-code-keyword">const</span> createHandler = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;github-webhook-handler&apos;</span>);
<span class="md-code-keyword">const</span> env = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;./env&apos;</span>);
<span class="md-code-keyword">const</span> articleGitService = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;../services/articleGit&apos;</span>);
<span class="md-code-keyword">const</span> secret = env(<span class="md-code-string">&apos;X_HUB_SECRET&apos;</span>);

<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">configure</span> <span class="md-code-params">(app, key, ...events)</span> </span>{
  <span class="md-code-keyword">const</span> path = `/api/git-hooks/${key}`;
  <span class="md-code-keyword">const</span> handler = createHandler({ path, secret, events });
  app.use(handler);
  handler.on(<span class="md-code-string">&apos;error&apos;</span>, err =&gt; {
    winston.warn(<span class="md-code-string">&apos;Error in GitHub hook handler&apos;</span>, err.stack || err);
  });
  <span class="md-code-keyword">return</span> handler;
}
</code></pre> <p>When we receive a push event from the <code class="md-code md-code-inline">articles</code> webhook on GitHub, we&#x2019;ll invoke <code class="md-code md-code-inline">articleGitService.pullFromGit</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">webhooks</span> <span class="md-code-params">(app)</span> </span>{
  configure(app, <span class="md-code-string">&apos;articles&apos;</span>, <span class="md-code-string">&apos;push&apos;</span>).on(<span class="md-code-string">&apos;push&apos;</span>, event =&gt; {
    articleGitService.pullFromGit(event);
  });
}

<span class="md-code-built_in">module</span>.exports = webhooks;
</code></pre> <p>The service receives an <code class="md-code md-code-inline">event.payload</code> such as the following. We&#x2019;ll only leverage the highlighted fields.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">{
  <span class="md-code-string">&quot;ref&quot;</span>: <span class="md-code-string">&quot;refs/heads/changes&quot;</span>,
  <span class="md-code-string">&quot;before&quot;</span>: <span class="md-code-string">&quot;9049f1265b7d61be4a8904a9a27120d2064dab3b&quot;</span>,
  <span class="md-code-string">&quot;after&quot;</span>: <span class="md-code-string">&quot;0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c&quot;</span>,
  <span class="md-code-string">&quot;created&quot;</span>: <span class="md-code-literal">false</span>,
  <span class="md-code-string">&quot;deleted&quot;</span>: <span class="md-code-literal">false</span>,
  <span class="md-code-string">&quot;forced&quot;</span>: <span class="md-code-literal">false</span>,
  <span class="md-code-string">&quot;base_ref&quot;</span>: <span class="md-code-literal">null</span>,
  <span class="md-code-string">&quot;compare&quot;</span>: <span class="md-code-string">&quot;https://github.com/baxterthehacker/public-repo/compare/9049f1265b7d...0d1a26e67d8f&quot;</span>,
  <mark class="md-mark md-code-mark"><span class="md-code-string">&quot;commits&quot;</span></mark>: [
    {
      <span class="md-code-string">&quot;id&quot;</span>: <span class="md-code-string">&quot;0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c&quot;</span>,
      <span class="md-code-string">&quot;tree_id&quot;</span>: <span class="md-code-string">&quot;f9d2a07e9488b91af2641b26b9407fe22a451433&quot;</span>,
      <span class="md-code-string">&quot;distinct&quot;</span>: <span class="md-code-literal">true</span>,
      <span class="md-code-string">&quot;message&quot;</span>: <span class="md-code-string">&quot;Update README.md&quot;</span>,
      <span class="md-code-string">&quot;timestamp&quot;</span>: <span class="md-code-string">&quot;2015-05-05T19:40:15-04:00&quot;</span>,
      <span class="md-code-string">&quot;url&quot;</span>: <span class="md-code-string">&quot;https://github.com/baxterthehacker/public-repo/commit/0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c&quot;</span>,
      <span class="md-code-string">&quot;author&quot;</span>: {
        <span class="md-code-string">&quot;name&quot;</span>: <span class="md-code-string">&quot;baxterthehacker&quot;</span>,
        <span class="md-code-string">&quot;email&quot;</span>: <span class="md-code-string">&quot;baxterthehacker@users.noreply.github.com&quot;</span>,
        <span class="md-code-string">&quot;username&quot;</span>: <span class="md-code-string">&quot;baxterthehacker&quot;</span>
      },
      <span class="md-code-string">&quot;committer&quot;</span>: {
        <span class="md-code-string">&quot;name&quot;</span>: <span class="md-code-string">&quot;baxterthehacker&quot;</span>,
        <span class="md-code-string">&quot;email&quot;</span>: <span class="md-code-string">&quot;baxterthehacker@users.noreply.github.com&quot;</span>,
        <span class="md-code-string">&quot;username&quot;</span>: <span class="md-code-string">&quot;baxterthehacker&quot;</span>
      },
      <span class="md-code-string">&quot;added&quot;</span>: [

      ],
      <mark class="md-mark md-code-mark"><span class="md-code-string">&quot;removed&quot;</span></mark>: [

      ],
      <mark class="md-mark md-code-mark"><span class="md-code-string">&quot;modified&quot;</span></mark>: [
        <span class="md-code-string">&quot;README.md&quot;</span>
      ]
    }
  ],
  <span class="md-code-string">&quot;head_commit&quot;</span>: {
    <span class="md-code-comment">// ...</span>
  },
  <span class="md-code-string">&quot;repository&quot;</span>: {
    <span class="md-code-comment">// ...</span>
  },
  <span class="md-code-string">&quot;pusher&quot;</span>: {
    <span class="md-code-comment">// ...</span>
  }
  <span class="md-code-string">&quot;sender&quot;</span>: {
    <span class="md-code-comment">// ...</span>
  }
}
</code></pre> <blockquote> <p><sub><em>Example extracted from GitHub Help pages</em></sub></p> </blockquote> <p>There are quite a few things that could have happened due to <code class="md-code md-code-inline">git push</code>. Let&#x2019;s look at those.</p> <ul> <li>Changes could be completely unrelated to any articles, such as when we update the <code class="md-code md-code-inline">license</code> for the repository</li> <li>Changes could have updated a piece or pieces of information for an article</li> <li>Changes could have removed an article entirely</li> </ul> <p>I decided to go for a na&#xEF;ve but realistic implementation, where we&#x2019;ll look at the <code class="md-code md-code-inline">commits</code> collection. We <code class="md-code md-code-inline">.reduce</code> the commits once for <code class="md-code md-code-inline">removed</code> files and again for <code class="md-code md-code-inline">modified</code> files. We&#x2019;ll interpret deleted <code class="md-code md-code-inline">metadata.json</code> files as the article for that <code class="md-code md-code-inline">metadata.json</code> having been deleted. We&#x2019;ll interpret any modified files as the article having changed.</p> <p>Next up we&#x2019;ll remove any articles that were deleted from the database. This would trigger the &#x201C;remove from git&#x201D; hook, but the article was already removed from git and , <em>since deletion is idempotent,</em> all is well.</p> <p>After that, we <code class="md-code md-code-inline">git pull</code> the changes in the repository into our local clone, read all the files related to a modified article, and update its database representation being careful not to erase any important information. When the article gets saved, the <code class="md-code md-code-inline">updateSyncRoot</code> hook gets triggered, which would result in an attempt to push to git. However, given that the file system representation is equivalent to the article <em>(after saving it)</em>, there is nothing to commit.</p> <p>Certainly this is all a tad brittle, but it has worked quite well thus far without many surprises. A nice aspect of having this setup, is that we get versioning for free. We&#x2019;re now able to look at an article on GitHub and see any changes applied to them, when they were applied, and how the article looked before and after the change was made.</p> <p>How would you improve a two-way synchronization mechanism between a database and a git repository?</p></div>
