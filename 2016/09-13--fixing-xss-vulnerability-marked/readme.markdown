<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/fixing-xss-vulnerability-marked">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/fixing-xss-vulnerability-marked"><div><img src="https://i.imgur.com/zuz2xYx.jpg" alt="Fixing an XSS vulnerability in marked"></div></a>

<h1>Fixing an XSS vulnerability in <code class="md-code md-code-inline">marked</code></h1>

<p><kbd>xss</kbd> <kbd>security</kbd></p>

<blockquote><p>Earlier this year my team at Snyk added an interesting <a href="https://snyk.io/vuln/npm:marked:20150520" target="_blank" aria-label="Content &amp; Code Injection (XSS)">Cross-Site Scripting (XSS) vulnerability</a> to our <a href="https://snyk.io/vuln" target="_blank" aria-label="Snyk Vulnerability Repository">database</a>, in the popular <a href="https://www.npmjs.com/package/marked" target="_blank" aria-label="marked on npmjs"><em>marked</em> package</a>. The vulnerability is &#x2026;</p></blockquote>

<div><p>Earlier this year my team at Snyk added an interesting <a href="https://snyk.io/vuln/npm:marked:20150520" target="_blank" aria-label="Content &amp; Code Injection (XSS)">Cross-Site Scripting (XSS) vulnerability</a> to our <a href="https://snyk.io/vuln" target="_blank" aria-label="Snyk Vulnerability Repository">database</a>, in the popular <a href="https://www.npmjs.com/package/marked" target="_blank" aria-label="marked on npmjs"><em>marked</em> package</a>. The vulnerability is interesting both due to <code class="md-code md-code-inline">marked</code>&#x2019;s popularity (2M downloads/month), and how long it remained unfixed. This post explains the vulnerability, shows how to exploit it on a sample app, and explains how to <a href="https://ponyfoo.com/#how-to-remediate">fix the issue</a> in your applications.</p></div>

<blockquote><p>A while back I approached Guy from Snyk <em>&#x2013; a Node.js vulnerability detection and security firm &#x2013;</em> and asked him to write about an interesting vulnerability his team identified and fixed. This blog post shows an example vulnerability and how easily things can go wrong <em>&#x2013; even when a package has been tested by several other users beforehand.</em></p> <p>Take it away, Guy!</p><p align="right"><sub><em>&#x2014; Editor&#x2019;s note.</em></sub></p></blockquote>

<div><p>The <code class="md-code md-code-inline">marked</code> package parses <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank">Markdown</a> and converts it into HTML, making it easy to turn rendered user input - user comments, product reviews, support calls - into rich(ish) text, supporting links, bold, italic and more. Since Markdown doesn&#x2019;t support JavaScript, it&#x2019;s often considered immune to Cross-Site Scripting, and thus safe to use for rendering user input.</p> <p>However, in reality Markdown only reduces <strong>&#x2013; but doesn&#x2019;t completely eliminate &#x2013;</strong> the risk of XSS. The following, easily exploited, XSS vulnerability in <code class="md-code md-code-inline">marked</code> is a sobering example of the distinction.</p></div>

<div><h2 id="marked-s-protection-mechanisms">Marked&#x2019;s protection mechanisms</h2> <p>While Markdown doesn&#x2019;t support scripts, <code class="md-code md-code-inline">marked</code> <em>(like other Markdown clients)</em> does support inline HTML. Inline HTML can include <code class="md-code md-code-inline">&lt;script&gt;</code> tags, which can be used by attackers to inject malicious scripts. Since <code class="md-code md-code-inline">marked</code> is often used to render user input back to the page, its authors added a security option to overcome this case. The package supports a <code class="md-code md-code-inline">sanitize</code> option, which detects HTML and dangerous input and encodes or removes it.</p> <p>The <code class="md-code md-code-inline">sanitize</code> option is (unfortunately) turned off by default, but you can turn it on in your app. The following example shows the <code class="md-code md-code-inline">sanitize</code> option in action:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> marked = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;marked&apos;</span>);
<span class="md-code-built_in">console</span>.log(marked(<span class="md-code-string">&apos;&lt;script&gt;alert(1)&lt;/script&gt;&apos;</span>));
<span class="md-code-comment">// Outputs: &lt;script&gt;alert(1)&lt;/script&gt;</span>

marked.setOptions({ sanitize: <span class="md-code-literal">true</span> });
<span class="md-code-built_in">console</span>.log(marked(<span class="md-code-string">&apos;&lt;script&gt;alert(1)&lt;/script&gt;&apos;</span>));
<span class="md-code-comment">// Outputs: &lt;p&gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/p&gt;</span>
</code></pre> <p>Catching HTML is important, but sanitization doesn&#x2019;t end there. While Markdown doesn&#x2019;t support scripts, it does support links, which creates the potential for javascript links <em>(e.g. <code class="md-code md-code-inline">javascript:alert(1)</code>)</em>, which can cause damage when a user clicks them. The <code class="md-code md-code-inline">sanitize</code> functionality is aware of this, and removes links starting with the <code class="md-code md-code-inline">javascript:</code> protocol. It even removes links using the HTML entity for colons &#x2014; e.g. <code class="md-code md-code-inline">javascript&amp;58;alert(1)</code>. Unfortunately, even with this awareness, they missed one vulnerability vector.</p> <h2 id="the-vulnerability">The Vulnerability</h2> <p>HTML is a very loose format, and browsers are very tolerant when processing it. An example of this tolerance is that, when processing HTML entities, browsers do not enforce the trailing colon, accepting both <code class="md-code md-code-inline">&amp;#58</code> and <code class="md-code md-code-inline">:</code>. The <code class="md-code md-code-inline">sanitization</code> in marked, on the other hand, requires the colon, and treats the text as simple text if it doesn&#x2019;t find it. This means <code class="md-code md-code-inline">:</code> will be removed, but <code class="md-code md-code-inline">&amp;58this;</code> will simply be passed along to the output. An attacker can use this technique to evade <code class="md-code md-code-inline">marked</code>&apos;s sanitizer while browsers still execute a script.</p> <p>Here&#x2019;s a code illustration of where <code class="md-code md-code-inline">sanitize</code> does and doesn&#x2019;t work:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> marked = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;marked&apos;</span>);
marked.setOptions({sanitize: <span class="md-code-literal">true</span>});

<span class="md-code-comment">// Naive attempt - fails.</span>
<span class="md-code-built_in">console</span>.log(marked(<span class="md-code-string">&apos;[Gotcha](javascript:alert(1))&apos;</span>));
<span class="md-code-comment">// Outputs: &lt;p&gt;)&lt;/p&gt;</span>

<span class="md-code-comment">// Evasion attempt using &apos;&amp;#58;&apos; instead of &apos;:&apos; - fails.</span>
<span class="md-code-built_in">console</span>.log(marked(<span class="md-code-string">&apos;[Gotcha](javascript&amp;#58;alert(1&amp;#41;)&apos;</span>));
<span class="md-code-comment">// Outputs: &lt;p&gt;&lt;/p&gt;</span>

<span class="md-code-comment">// Evasion attempt using &apos;&amp;#58this;&apos; (note the &apos;this&apos;) instead of &apos;:&apos; - SUCCEEDS</span>
<span class="md-code-built_in">console</span>.log(marked(<span class="md-code-string">&apos;[Gotcha](javascript&amp;#58this;alert(1&amp;#41;)&apos;</span>));
<span class="md-code-comment">// Outputs: &lt;p&gt;&lt;a href=&quot;javascript&amp;#58this;alert(1&amp;#41;&quot;&gt;Gotcha&lt;/a&gt;&lt;/p&gt;</span>
<span class="md-code-comment">// Same as: &lt;p&gt;&lt;a href=&quot;javascript:this;alert(1);&quot;&gt;Gotcha&lt;/a&gt;&lt;/p&gt;</span>
</code></pre> <p>The browser will interpret <code class="md-code md-code-inline">&amp;#58</code> the same as <code class="md-code md-code-inline">:</code>, thus invoking the script on click. Of course, the script we included is quite pointless, but an attacker could inject a much more sophisticated payload, breaking the browser&#x2019;s <a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" aria-label="Same-origin Policy on Wikipedia">Same-Origin Policy</a> and triggering the full damage <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" aria-label="Cross-site Scripting on Wikipedia">XSS</a> can cause.</p> <h2 id="live-exploit-on-a-sample-nodejs-application">Live Exploit on a Sample Node.js application</h2> <p>Nothing helps one appreciate a vulnerability better than exploiting it on real code. Therefore, I added this vulnerability to Snyk&#x2019;s vulnerable demo application, <a href="https://github.com/snyk/goof" target="_blank" aria-label="snyk/goof on GitHub">Goof</a>. You can clone Goof and get it running through the instructions <a href="https://github.com/snyk/goof" target="_blank" aria-label="snyk/goof on GitHub">on GitHub</a>.</p> <p>Goof is a TODO application, and uses marked to support Markdown in its notes. Goof is a best-in-class TODO app, and such an app simply MUST support links, bold and italics!</p> <p>For instance, entering the TODO items <code class="md-code md-code-inline">Buy **beer**</code> and <code class="md-code md-code-inline">[snyk](https://snyk.io/)</code> would result in the expected bold and hyperlink like so:</p> <figure><img alt="An amazingly feature-complete TODO app." class="" src="https://i.imgur.com/2vRXFlf.png"></figure> <p>Next, let&#x2019;s try to enter a malicious payload. The next screenshot shows the visual and DOM state after entering each of the three attack payloads above. Note that since this is a TODO list, the items are sorted by the date they were added, with the newest on top.</p> <figure><img alt="Entering malicious payloads into the TODO app." class="" src="https://i.imgur.com/TaCtTtp.png"></figure> <p>As you can see, the first two attempted attacks were mitigated by the sanitizer, reduced to <code class="md-code md-code-inline">&lt;p&gt;)&lt;/p&gt;</code> and <code class="md-code md-code-inline">&lt;p&gt;&lt;/p&gt;</code> respectively. The last payload, however, successfully created a hyperlink which will invoke <code class="md-code md-code-inline">javascript:this;alert(1)</code>. Executing this does nothing (simply references an existing variable), while the alert shows a popup.</p> <p>After making our exploit alert a bit clearer and clicking the link, we get this:</p> <figure><img alt="Marked exploit was successful." class="" src="https://i.imgur.com/NgUAIOo.png"></figure> <p>If you&#x2019;d like to go through this attack flow yourself, install <a href="https://github.com/snyk/goof" target="_blank" aria-label="snyk/goof on GitHub">Goof</a> locally and going through the <a href="https://github.com/Snyk/goof/blob/6e3374b16c0ecad348cd3534c855d92fc358430d/exploits/marked-exploit.sh" target="_blank" aria-label="marked-exploit script on GitHub">exploit payloads</a> under the <a href="https://github.com/Snyk/goof/tree/6e3374b16c0ecad348cd3534c855d92fc358430d/exploits" target="_blank" aria-label="Marked exploit scripts on GitHub">exploits</a> directory.</p> <h2 id="how-to-remediate">How to Remediate?</h2> <p>For a long while, there was no official version of marked that fixes the issue. The <a href="https://github.com/chjj/marked" target="_blank" aria-label="chjj/marked on GitHub"><code class="md-code md-code-inline">marked</code></a> repository has been inactive since last summer, and the vulnerability was only disclosed later on. Open source maintenance is a tricky topic, as life circumstances or simply loss of interest can result in very slow updates - or even none at all.</p> <p>During the period where no fix was available, the only way to fix the issue was by applying a patch using Snyk&#x2019;s <a href="https://snyk.io/docs/using-snyk" target="_blank" aria-label="Using the Snyk CLI">Wizard</a>. This patch was created by our security research team, and is based on <a href="https://github.com/matt-" target="_blank" aria-label="matt- on GitHub">Matt Austin</a>&#x2019;s <a href="https://github.com/chjj/marked/pull/592" target="_blank" aria-label="Pull Request #592 for chjj/marked on GitHub">original pull request</a> to the repository.</p> <p>Like all other Snyk patches, you can see the detailed patch files in our open source <a href="https://github.com/snyk/vulndb" target="_blank" aria-label="snyk/vulndb on GitHub">vulnerability database</a>. There are actually 3 different patches for different versions of marked, the simplest of which being no more than this:</p> <pre class="md-code-block"><code class="md-code md-lang-diff">  function unescape(html) {
<span class="md-code-deletion">-   return html.replace(/&amp;([#\w]+);/g, function(_, n) {</span>
<span class="md-code-addition">+   // explicitly match decimal, hex, and named HTML entities </span>
<span class="md-code-addition">+   return html.replace(/&amp;(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/g, function(_, n) {</span>
</code></pre> <p>In late July, however, marked&#x2019;s authors did release a new version, acknowledging the importance of fixing this issue. And so, if you&#x2019;re using marked today and are able to, you can also fix this issue by upgrading to version <code class="md-code md-code-inline">0.3.6</code>.</p> <h2 id="summary-and-recommendations">Summary &amp; Recommendations</h2> <p>This XSS vulnerability on <code class="md-code md-code-inline">marked</code> is a high severity security issue in a popular package, and so it&#x2019;s important that you ensure you address it if you&#x2019;re using the <code class="md-code md-code-inline">marked</code> package yourself.</p> <p>In addition, it serves as a good example for several broader issues:</p> <ol> <li>How tricky it is to sanitize complex user input. HTML, SQL and URL encoding are very hard to get completely right, and attackers only need one loophole to get in. If possible, always prefer whitelisting allowed values over blacklisting through pattern matching.</li> <li>The risks third party dependencies carry for your application. It&#x2019;s important to stay on top of known vulnerabilities in npm dependencies.</li> <li>Why open source maintenance is a complicated topic, and how it can have very real and urgent implications.</li> </ol></div>
