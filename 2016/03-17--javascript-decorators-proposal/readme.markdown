<h1>ECMAScript Proposal for JavaScript Decorators <br><em>(and protocols)</em></h1>

<p><kbd>ecmascript</kbd> <kbd>decorators</kbd> <kbd>proposal-draft</kbd></p>

<blockquote><p>There&#x2019;s a JavaScript decorators proposal in the works.<br>
We take a look at how it works and why it&#x2019;s useful.</p>
</blockquote>

<div><p>Decorators are, as most things programming, definitely <em>not a new concept</em>. That being said, they may be coming to JavaScript. There&#x2019;s a JavaScript decorators proposal in the works. It is currently sitting at stage 1 of the ECMASCript process, but may soon advance to stage 2. We take a look at how it works and why it&#x2019;s useful.</p></div>

<div></div>

<div><p>Decorators are a fairly commonplace in modern programming languages: you have <a href="https://msdn.microsoft.com/en-us/library/z0w1kczw.aspx" target="_blank" aria-label="Attributes (C# and Visual Basic)">attributes in C#</a>, they&#x2019;re called <a href="https://docs.oracle.com/javase/tutorial/java/annotations/basics.html" target="_blank" aria-label="Learning Java Annotations">annotations in Java</a>, there&#x2019;s <a href="http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/" target="_blank" aria-label="Understanding Python Decorators in 12 Steps">decorators in Python</a>, and so on. The syntax for JavaScript decorators is fairly similar to that of Python decorators &#x2013; which is probably the reason why the name decorator was picked out of an assortment of similarly named and equivalent language features.</p></div>

<div><h1 id="decorator-fundamentals">Decorator Fundamentals</h1> <p>JavaScript decorators apply to classes and any statically-defined properties, such as those found on an object literal declaration or in a <code class="md-code md-code-inline">class</code> declaration <em>&#x2013; even if they were <code class="md-code md-code-inline">static</code>, or accessors like <code class="md-code md-code-inline">get</code> and <code class="md-code md-code-inline">set</code>.</em> The <a href="https://github.com/wycats/javascript-decorators/blob/caf8f28b665333dc39293d5319fe01f01e3e3c0f/README.md" target="_blank" aria-label="wycats/javascript-decorators on GitHub">proposal for JavaScript decorators</a> defines a decorator as:</p> <ul> <li>an expression <em>(that&#x2019;s preceded by an <code class="md-code md-code-inline">@</code> sign)</em></li> <li>that evaluates to a function</li> <li>that takes the <code class="md-code md-code-inline">target</code>, <code class="md-code md-code-inline">name</code>, and decorator <code class="md-code md-code-inline">descriptor</code> as arguments</li> <li>and <em>optionally</em> returns a decorator <code class="md-code md-code-inline">descriptor</code> to install on the <code class="md-code md-code-inline">target</code> object</li> </ul> <p>To better understand decorators, it may be better to look at an example using a plain JavaScript object first.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> dog = {
  name: <span class="md-code-string">&apos;Doug&apos;</span>,
  legs: <span class="md-code-number">4</span>
};
</code></pre> <p>Typically, we would think of the <code class="md-code md-code-inline">dog</code> object literal declaration above as an atom: when the assignment statement is executed, the object literal is assigned to <code class="md-code md-code-inline">dog</code>. In order to better understand decorators, though, it may be more useful to think of the object literal as follows, using <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties" target="_blank" aria-label="Object.defineProperties documentation on MDN"><code class="md-code md-code-inline">Object.defineProperties</code></a> instead. The following piece of code is functionally equivalent to the previous one, albeit more verbose.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> literal = <mark class="md-mark md-code-mark">{}</mark>;
<span class="md-code-keyword">const</span> dog = <span class="md-code-built_in">Object</span>.defineProperties(<mark class="md-mark md-code-mark">literal</mark>, {
  <mark class="md-mark md-code-mark">name</mark>: {
    value: <span class="md-code-string">&apos;Doug&apos;</span>,
    writable: <span class="md-code-literal">true</span>,
    enumerable: <span class="md-code-literal">true</span>,
    configurable: <span class="md-code-literal">true</span>
  },
  <mark class="md-mark md-code-mark">legs</mark>: {
    value: <span class="md-code-number">4</span>,
    writable: <span class="md-code-literal">true</span>,
    enumerable: <span class="md-code-literal">true</span>,
    configurable: <span class="md-code-literal">true</span>
  }
});
</code></pre> <blockquote> <p><sub><em>Properties are writable, enumerable, and configurable by default.</em></sub></p> </blockquote> <p>Great. Let&#x2019;s now imagine that <em>&#x2013; for some reason &#x2013;</em> we want to add a decorator to the amount of legs so that it&#x2019;s no longer <code class="md-code md-code-inline">writable</code>. Our decorator is declared as <code class="md-code md-code-inline">@readonly</code>. This must precede the property declaration for <code class="md-code md-code-inline">legs</code>, as that&#x2019;s the property declaration we want to modify. The <code class="md-code md-code-inline">@</code> is mandatory, and <code class="md-code md-code-inline">readonly</code> should be an arbitrary JavaScript expression that evaluates to a function.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> dog = {
  name: <span class="md-code-string">&apos;Doug&apos;</span>,
  <mark class="md-mark md-code-mark">@readonly</mark>
  legs: <span class="md-code-number">4</span>
};
</code></pre> <p>Let&#x2019;s start by looking at how our code would look like using <code class="md-code md-code-inline">Object.defineProperties</code>, now that we have a decorator. We moved the <code class="md-code md-code-inline">legs</code> property descriptor into a variable, we&#x2019;re calling the <code class="md-code md-code-inline">readonly</code> decorator by passing in the <code class="md-code md-code-inline">literal</code> variable that will be eventually assigned to <code class="md-code md-code-inline">dog</code>, the <code class="md-code md-code-inline">&apos;legs&apos;</code> property name, and the original <code class="md-code md-code-inline">legsDescriptor</code> property descriptor. The legs property will be defined using either the return value from the <code class="md-code md-code-inline">readonly</code> decorator, or a reference to the original property descriptor.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> literal = {};
<span class="md-code-keyword">const</span> <mark class="md-mark md-code-mark">legsDescriptor</mark> = {
  value: <span class="md-code-number">4</span>,
  writable: <span class="md-code-literal">true</span>,
  enumerable: <span class="md-code-literal">true</span>,
  configurable: <span class="md-code-literal">true</span>
};
<span class="md-code-keyword">const</span> dog = <span class="md-code-built_in">Object</span>.defineProperties(literal, {
  name: {
    value: <span class="md-code-string">&apos;Doug&apos;</span>,
    writable: <span class="md-code-literal">true</span>,
    enumerable: <span class="md-code-literal">true</span>,
    configurable: <span class="md-code-literal">true</span>
  },
  legs: <mark class="md-mark md-code-mark">readonly(literal, <span class="md-code-string">&apos;legs&apos;</span>, legsDescriptor) || </mark>legsDescriptor
});
</code></pre> <p>Understanding how to write the <code class="md-code md-code-inline">readonly</code> decorator so that the <code class="md-code md-code-inline">legs</code> property becomes read-only should be trivial, and is demonstrated below: <em>we just modify the original <code class="md-code md-code-inline">descriptor</code> so that the property isn&#x2019;t <code class="md-code md-code-inline">writable</code></em>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">readonly</span> <span class="md-code-params">(target, prop, descriptor)</span> </span>{
  descriptor.<mark class="md-mark md-code-mark">writable = false</mark>;
}
</code></pre> <p>Given that the original descriptor is used if nothing is returned, we didn&#x2019;t necessarily need to <code class="md-code md-code-inline">return</code> a value.</p> <h1 id="stacking-decorators-and-a-warning-about-immutability">Stacking Decorators and a Warning about Immutability</h1> <p>With all the fluff around immutability you may be tempted to <code class="md-code md-code-inline">return</code> a new property descriptor, as to not modify the original descriptor. While well-intentioned, this may have <strong>an undesired effect</strong>. It is possible to decorate the same property or <code class="md-code md-code-inline">class</code> several times.</p> <p>If any of the decorators in the following piece of code returned an entirely new <code class="md-code md-code-inline">descriptor</code> without taking into account the <code class="md-code md-code-inline">descriptor</code> supplied to the decorator function, you&#x2019;d effectively lose all the decoration that took place before returning a different descriptor.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> dog = {
  @readonly
  @nonenumerable
  @doubledValue
  legs: <span class="md-code-number">4</span>
};
</code></pre> <p>Thus, we should be careful to write decorators that take into account the supplied <code class="md-code md-code-inline">descriptor</code>: modify it directly or create one that&#x2019;s based on the <code class="md-code md-code-inline">descriptor</code> that&#x2019;s provided to you.</p> <h1 id="a-little-back-story-runuo-and-attributes-in-c">A Little Back Story: RunUO and Attributes in C#</h1> <p>A long time ago, in a galaxy far far away, I was getting acquainted with C# &#x2013; without even knowing &#x2013; by way of a <a href="http://uo.com/screenshots/" target="_blank" aria-label="Screenshots of Ultima Online">Ultima Online</a> server emulator written in open-source C# code: <a href="https://github.com/runuo/runuo" target="_blank" aria-label="runuo/runuo on GitHub">RunUO</a>. RunUO was one of the most beautiful codebases I&#x2019;ve ever worked with, and it was written in C# to boot.</p> <p>They distributed the server software as an executable and a series of <code class="md-code md-code-inline">.cs</code> files. The <code class="md-code md-code-inline">runuo</code> executable would compile those <code class="md-code md-code-inline">.cs</code> scripts at runtime and dynamically mix them into the application. The result was that you didn&#x2019;t need the Visual Studio IDE <em>(nor <code class="md-code md-code-inline">msbuild</code>)</em>, or really anything other than knowing just enough programming to edit one of the &#x201C;scripts&#x201D; written in <code class="md-code md-code-inline">.cs</code> files. All of the above made RunUO a perfect learning environment for me.</p> <p>I didn&#x2019;t know C# at the time. I didn&#x2019;t even know C# was a heavily used enterprise language. I just thought it was a beautiful language and a beautifully written codebase for the server-side of an MMORPG game I loved, so saying I was <strong>eager to learn more</strong> would be an understatement.</p> <p>RunUO relied heavily in reflection. They made a significant effort to be customizable by players who were interested in changing a few details of the game <em>(such as how much damage a Dragon&#x2019;s fire breath inflicts)</em>, but not necessarily invested in programming itself. Good UX was a big part of their philosophy, and so you could create a new kind of Dragon just by copying one of the monster files, changing it to inherit from the <code class="md-code md-code-inline">Dragon</code> class, and modifying a few properties to change its color, its damage output, etc.</p> <p>Just as they made it easy to create new monsters, &#x2013; or &#x201C;non-player characters&#x201D; (NPC) in gaming slang &#x2013; they also relied in reflection to provide functionality to in-game administrators <em>(&#x201C;Game Masters&#x201D;)</em>. Game masters could run an in-game command and click on an item or a moster to visualize or change properties without ever leaving the game. Again, great UX.</p> <p><img alt="Properties for an item in RunUO" class="" src="https://i.imgur.com/NydsbSG.png"></p> <blockquote> <p>I used to go by &#x201C;Kenko&#x201D; and participate on the RunUO community. I guess this was one of my first adventures into the world of open-source, <a href="http://www.runuo.com/community/threads/kenkos-duel-pit-system-working-translated.84993/" target="_blank" aria-label="Kenko&apos;s Duel Pit System">back around 2006</a>.</p> </blockquote> <p>Not every property in a class is meant to be accessible in-game, though. The consequences of doing something like that could be catastrophic if unforeseen. RunUO had <a href="https://github.com/runuo/runuo/blob/3f5678f061aa1b6e4d8653ae66c667d1c673e96f/Server/Attributes.cs#L179" target="_blank" aria-label="RunUO Attributes on GitHub">a <code class="md-code md-code-inline">CommandPropertyAttribute</code> decorator</a> where you could specify the access level required to read and write properties. This decorator was <a href="https://github.com/runuo/runuo/search?utf8=%E2%9C%93&amp;q=CommandProperty" target="_blank" aria-label="CommandProperty Targets on GitHub">used extensively throughout the RunUO codebase</a>.</p> <p>The <code class="md-code md-code-inline">PlayerMobile</code> class, which governed how a player&#x2019;s character works, is a great place to look at these attributes. <a href="https://github.com/runuo/runuo/blob/3f5678f061aa1b6e4d8653ae66c667d1c673e96f/Scripts/Mobiles/PlayerMobile.cs#L268-L279" target="_blank" aria-label="PlayerMobile.cs on GitHub"><code class="md-code md-code-inline">PlayerMobile</code> have several properties that are accessible in-game</a> to administrators and moderators. Here are a couple of getters and setters, but only the first one has the <code class="md-code md-code-inline">CommandProperty</code> attribute <em>&#x2013; making it in-game accessible to Game Masters.</em></p> <pre class="md-code-block"><code class="md-code md-lang-javascript">[CommandProperty( AccessLevel.GameMaster )]
public int Profession
{
  get{ <span class="md-code-keyword">return</span> m_Profession; }
  set{ m_Profession = value; }
}

public int StepsTaken
{
  get{ <span class="md-code-keyword">return</span> m_StepsTaken; }
  set{ m_StepsTaken = value; }
}
</code></pre> <p>One interesting difference between C# attributes and JavaScript decorators is that reflection in C# allows us to pull all custom attributes from an object using <a href="https://msdn.microsoft.com/en-us/library/kff8s254(v=vs.110).aspx" target="_blank" aria-label="MemberInfo#GetCustomAttributes method on MSDN"><code class="md-code md-code-inline">MemberInfo#getCustomAttributes</code></a>. RunUO leverages that method to pull up information about each property that should be accessible in-game <a href="https://github.com/runuo/runuo/blob/3f5678f061aa1b6e4d8653ae66c667d1c673e96f/Scripts/Commands/Properties.cs#L73" target="_blank" aria-label="Getting an object&apos;s properties in RunUO">when displaying the dialog</a> that lets an administrator view or modify an in-game object&#x2019;s properties.</p> <h1 id="marking-special-properties-in-javascript-or-defining-protocols">Marking &#x201C;special&#x201D; properties in JavaScript <em>&#x2013; or, defining protocols</em></h1> <p>In JavaScript, there&#x2019;s no such thing <em>&#x2013; in this proposal draft, at least &#x2013;</em> to get the custom attributes on a property. That said, JavaScript is a highly dynamic language, and creating this sort of &#x201C;labels&#x201D; wouldn&#x2019;t be much of a hassle. Decorating a <code class="md-code md-code-inline">dog</code> with a &#x201C;command property&#x201D; wouldn&#x2019;t be all that different from RunUO and C#.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> dog = {
  @commandProperty(<span class="md-code-string">&apos;gm&apos;</span>)
  legs: <span class="md-code-number">4</span>
};
</code></pre> <p>The <code class="md-code md-code-inline">commandProperty</code> function would have to be a little more sophisticated. Given that there is no reflection around decorators yet, we could use <a href="https://ponyfoo.com/articles/es6-symbols-in-depth" aria-label="ES6 Symbols in Depth on Pony Foo">a runtime-wide symbol</a> to define <a href="https://ponyfoo.com/articles/es6-maps-in-depth" aria-label="ES6 Maps in Depth on Pony Foo">a <code class="md-code md-code-inline">Map</code></a> of special properties found on <code class="md-code md-code-inline">target</code>. In the example shown above, <code class="md-code md-code-inline">target</code> would be the <code class="md-code md-code-inline">dog</code> object. Note that we aren&#x2019;t even touching the <code class="md-code md-code-inline">descriptor</code> <em>(nor returning a different one)</em>. This is okay because we&#x2019;re more concerned with <a href="https://ponyfoo.com/articles/es6-symbols-in-depth#defining-protocols" aria-label="Defining Protocols Using ES6 Symbols on Pony Foo">the protocol</a> we&#x2019;ve established than with implementation details for this specific property.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">commandProperty</span> <span class="md-code-params">(read, write)</span> </span>{
  <span class="md-code-keyword">return</span> (target, prop, descriptor) =&gt; {
    <span class="md-code-keyword">const</span> commandProperties = Symbol.for(<span class="md-code-string">&apos;commandProperties&apos;</span>);
    <span class="md-code-keyword">if</span> (!target[commandProperties]) {
      target[commandProperties] = <span class="md-code-keyword">new</span> Map();
    }
    target[commandProperties].set(prop, {
      readLevel: read,
      writeLevel: write || read
    });
  };
}
</code></pre> <p>The <code class="md-code md-code-inline">dog</code> object could have as many command properties as neccessary, and each would be properly mapped behind a symbol property. To find out which special command properties any given object has, all we&#x2019;d have to do is use the following one-liner, <a href="https://ponyfoo.com/articles/es6-spread-and-butter-in-depth" aria-label="ES6 Spread and Butter in Depth on Pony Foo">spreading all special properties</a> as <code class="md-code md-code-inline">[key, value]</code> pairs into an array.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">[...target[Symbol.for(<span class="md-code-string">&apos;commandProperties&apos;</span>)] || []]
<span class="md-code-comment">// &lt;- [[&apos;legs&apos;, { readLevel: &apos;gm&apos;, writeLevel: &apos;gm&apos; }]]</span>
</code></pre> <p>You could then iterate over these special properties that are known to be changeable by a user who may not be as computer savvy. They may just want to change the amount of <code class="md-code md-code-inline">legs</code> one given <code class="md-code md-code-inline">dog</code> has. Instead of maintaining long lists of properties that can be modified, relying on some sort of heuristics bound to break from time to time, or using some sort of restrictive naming convention, decorators are the cleanliest way to implement a protocol such as this where we mark properties as special for some particular use case.</p> <p>Granted, the pattern doesn&#x2019;t translate perfectly into JavaScript. Being a dynamic language, properties defined outside of an object literal would have to rely on a different methodology to mark them as special. I&#x2019;ll leave you to do the thinking for that one!</p> <h1 id="ecmascript-decorators-moving-forward">ECMAScript Decorators Moving Forward</h1> <p>There are still moving parts in this proposal. For that reason, an &#x201C;official&#x201D; transpiler for decorators isn&#x2019;t available in Babel 6. You can learn more about the <a href="http://phabricator.babeljs.io/T2645" target="_blank" aria-label="Implement new decorator proposal when finalized">thought process and current state of decorators</a> in Babel&#x2019;s core modules on Phabricator <em>&#x2013; Babel&#x2019;s issue tracker.</em></p> <p>Instead, you&#x2019;ll have to rely on <a href="https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy" target="_blank" aria-label="loganfsmyth/babel-plugin-transform-decorators-legacy on GitHub"><code class="md-code md-code-inline">babel-plugin-transform-decorators-legacy</code></a>, which mostly replicates the behavior in Babel 5 <em>&#x2013; back when Babel shipped with a decorator-transpiling feature.</em></p> <p>I spoke briefly with <a href="https://twitter.com/bterlson" target="_blank" aria-label="@bterlson on Twitter">Brian Terlson</a> <em>&#x2013; editor for the ECMAScript standard &#x2013;</em> about what may be changing in the decorator specification in the future. He mentioned <strong>the decorator API may change in the future</strong>, and that there may be changes in the execution model. In other words, what may change boils down to: the parameters you receive and order of operations.</p> <p>The specification is, however, unlikely to change fundamentally. The essence of ECMAScript decorators will, in all likelihood, not change from what we&#x2019;ve discussed in the article.</p></div>
