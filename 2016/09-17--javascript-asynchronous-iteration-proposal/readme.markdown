<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/javascript-asynchronous-iteration-proposal">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/javascript-asynchronous-iteration-proposal"><div><img src="https://i.imgur.com/E0TZnJW.jpg" alt="JavaScript Asynchronous Iteration Proposal"></div></a>

<h1>JavaScript Asynchronous Iteration Proposal</h1>

<p><kbd>asynciterators</kbd> <kbd>iterators</kbd></p>

<blockquote><p>There&#x2019;s a proposal in the works to simplify asynchronous iteration even further.</p><p>The Asynchronous Iteration proposal is <a href="https://github.com/tc39/proposals/tree/bae93fb054b77934db956d39519e9eb7a8ed49ad#active-proposals" target="_blank" aria-label="tc39/proposals on GitHub">already in stage 2</a> and being heavily worked &#x2026;</p></blockquote>

<div><p>There&#x2019;s a proposal in the works to simplify asynchronous iteration even further.</p></div>

<blockquote></blockquote>

<div><p>The Asynchronous Iteration proposal is <a href="https://github.com/tc39/proposals/tree/bae93fb054b77934db956d39519e9eb7a8ed49ad#active-proposals" target="_blank" rel="noopener noreferrer" aria-label="tc39/proposals on GitHub">already in stage 2</a> and being heavily worked on.</p> <p>Before diving into this article, you may want to brush up on a number of concepts:</p> <ul> <li><a href="https://ponyfoo.com/articles/es6-promises-in-depth" aria-label="ES6 Promises in Depth on Pony Foo">Promises</a></li> <li><a href="https://ponyfoo.com/articles/es6-iterators-in-depth" aria-label="ES6 Iterators in Depth on Pony Foo">Iterators</a></li> <li><a href="https://ponyfoo.com/articles/understanding-javascript-async-await" aria-label="Understanding JavaScript&#x2019;s async await on Pony Foo"><code class="md-code md-code-inline">async</code> / <code class="md-code md-code-inline">await</code></a></li> <li><a href="https://ponyfoo.com/articles/es6-generators-in-depth" aria-label="ES6 Generators in Depth on Pony Foo">Generators</a></li> </ul> <p>Shall we take a look?</p></div>

<div><p>For context, let&#x2019;s start with what we know. You may recall how iterators work using <code class="md-code md-code-inline">Symbol.iterator</code> as an interface to define how an object is to be iterated.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> ponyfoo = {
  [Symbol.iterator]: () =&gt; {
    <span class="md-code-keyword">const</span> items = [`p`, `o`, `n`, `y`, `f`, `o`, `o`];
    <span class="md-code-keyword">return</span> {
      next: () =&gt; ({
        done: items.length === <span class="md-code-number">0</span>,
        value: items.shift()
      })
    }
  }
}
</code></pre> <p>And that the <code class="md-code md-code-inline">ponyfoo</code> object can be iterated in a number of different ways: such as using the spread operator, <code class="md-code md-code-inline">Array.from</code>, or <code class="md-code md-code-inline">for..of</code>, among others.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">[...ponyfoo]
<span class="md-code-comment">// &lt;- [`p`, `o`, `n`, `y`, `f`, `o`, `o`]</span>
<span class="md-code-built_in">Array</span>.from(ponyfoo)
<span class="md-code-comment">// &lt;- [`p`, `o`, `n`, `y`, `f`, `o`, `o`]</span>

<span class="md-code-keyword">for</span> (<span class="md-code-keyword">const</span> item of ponyfoo) {
  <span class="md-code-built_in">console</span>.log(item)
  <span class="md-code-comment">// &lt;- `p`</span>
  <span class="md-code-comment">// &lt;- `o`</span>
  <span class="md-code-comment">// &lt;- `n`</span>
  <span class="md-code-comment">// &lt;- `y`</span>
  <span class="md-code-comment">// &lt;- `f`</span>
  <span class="md-code-comment">// &lt;- `o`</span>
  <span class="md-code-comment">// &lt;- `o`</span>
}
</code></pre> <p>The contract to an iterator mandates that the <code class="md-code md-code-inline">next</code> method of <code class="md-code md-code-inline">Symbol.iterator</code> instances returns an object with <code class="md-code md-code-inline">value</code> and <code class="md-code md-code-inline">done</code> properties. The <code class="md-code md-code-inline">value</code> property indicates the current value in the sequence, while <code class="md-code md-code-inline">done</code> is a boolean indicating whether the sequence has ended.</p> <p>In <em>async iterators</em>, the contract changes a little bit: <code class="md-code md-code-inline">next</code> is supposed to return a <code class="md-code md-code-inline">Promise</code> that resolves to an object containing <code class="md-code md-code-inline">value</code> and <code class="md-code md-code-inline">done</code> properties. Instead of reusing the same <code class="md-code md-code-inline">Symbol</code>, a new <code class="md-code md-code-inline">Symbol.asyncIterator</code> is introduced to declare asynchronous iterators.</p> <p>For the purposes of our demonstration, the <code class="md-code md-code-inline">ponyfoo</code> iterable could be made iterable asynchronously with two small changes, we ditch <code class="md-code md-code-inline">Symbol.iterator</code> in favor of <code class="md-code md-code-inline">Symbol.asyncIterator</code>, and we wrap the return value for the <code class="md-code md-code-inline">next</code> method in <code class="md-code md-code-inline">Promise.resolve</code>, returning a <code class="md-code md-code-inline">Promise</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> ponyfoo = {
  <mark class="md-mark md-code-mark">[Symbol.asyncIterator]</mark>: () =&gt; {
    <span class="md-code-keyword">const</span> items = [`p`, `o`, `n`, `y`, `f`, `o`, `o`];
    <span class="md-code-keyword">return</span> {
      next: () =&gt; <mark class="md-mark md-code-mark">Promise.resolve</mark>({
        done: items.length === <span class="md-code-number">0</span>,
        value: items.shift()
      })
    }
  }
}
</code></pre> <p>Naturally, that was quite a contrived example. Another contrived example could be a utility function that fetches a series of HTTP resources sequentially.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> getResources = endpoints =&gt; ({
  [Symbol.asyncIterator]: () =&gt; ({
    i: <span class="md-code-number">0</span>,
    next () {
      <span class="md-code-keyword">if</span> (endpoints.length &lt;= <span class="md-code-keyword">this</span>.i) {
        <span class="md-code-keyword">return</span> Promise.resolve({ done: <span class="md-code-literal">true</span> })
      }
      <span class="md-code-keyword">return</span> fetch(endpoints[<span class="md-code-keyword">this</span>.i++])
        .then(response =&gt; response.json())
        .then(value =&gt; ({ value, done: <span class="md-code-literal">false</span> }))
    }
  })
})
</code></pre> <p>In order to consume an async iterator, we can leverage the <code class="md-code md-code-inline">for await..of</code> syntax that would also be introduced by this proposal. This way, there&#x2019;s yet another way of writing code that looks synchronous <em>yet behaves asynchronously.</em></p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> resources = [
  `/api/users`,
  `/api/testers`,
  `/api/hackers`,
  `/api/nsa-backdoor`
];

<span class="md-code-keyword">for</span> await (<span class="md-code-keyword">const</span> data of getResources(resources)) {
  <span class="md-code-built_in">console</span>.log(data);
}
</code></pre> <p>There&#x2019;s also async generator functions in this proposal. An async generator function is just like a generator function, but also supports <code class="md-code md-code-inline">await</code> and <code class="md-code md-code-inline">for await..of</code> declarations.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">async <span class="md-code-function"><span class="md-code-keyword">function</span>* <span class="md-code-title">getResources</span><span class="md-code-params">(endpoints)</span> </span>{
  <span class="md-code-keyword">for</span> (endpoint of endpoints) {
    <span class="md-code-keyword">const</span> response = await fetch(endpoint)
    <span class="md-code-keyword">yield</span> await response.json()
  }
}
</code></pre> <p>When called, async generators return an <code class="md-code md-code-inline">{ next, return, throw }</code> object whose methods return promises for <code class="md-code md-code-inline">{ next, done }</code>, instead of returning <code class="md-code md-code-inline">{ next, done }</code> directly.</p> <p>You can consume the <code class="md-code md-code-inline">getResources</code> async generator in exactly the same way you could consume the object-oriented async iterator.</p></div>
