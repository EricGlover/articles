<div><img src="https://i.imgur.com/9yBxDU3.jpg" alt="The Double-Edged Sword of the Web"></div>

<h1>The Double-Edged Sword of the Web</h1>

<p><kbd>opinion</kbd> <kbd>web</kbd> <kbd>state-of-the-web</kbd> <kbd>bugs</kbd></p>

<blockquote><p>A couple of weeks ago I had some time in my hands and decided to fix cross-browser rendering issues for Pony Foo. The ensuing bug hunt was a good reminder of just how obnoxious web development can get.</p>
</blockquote>

<div><p>A couple of weeks ago I had some time in my hands and decided to fix cross-browser rendering issues for Pony Foo. The ensuing bug hunt was a good reminder of how just obnoxious web development can get, in spite of that same obnoxiousness being the main driver of the web&#x2019;s success as <strong>the greatest platform that is</strong>, as <em>Xaro Xhoan Daxos</em> <a href="http://gameofthrones.wikia.com/wiki/Qarth_(Histories_%26_Lore)" target="_blank" aria-label="Qarth (Game of Thrones: Histories &amp; Lore)">would put it</a>.</p></div>

<div></div>

<div><p>Pony Foo is a web development blog. As such, visitors are mostly privileged web developers using macOS and Google Chrome. Here are some historical stats, pulled from Google Analytics:</p> <ul> <li>Over 37% of visitors are on a Mac</li> <li>Under 34% of visitors are on Windows</li> <li>Over 72% use Google Chrome</li> <li>Roughly 10% are on Safari, and another 10% are on Firefox</li> <li>IE and Edge, combined, amount to barely over 1% <em>&#x2013; at 0.84% and 0.3%, respectively</em></li> </ul> <p>The fact that people were seldom using anything other than Chrome gave me a good cover story for not pouring any effort into resolving long-standing <em>(albeit minor)</em> CSS rendering issues in Firefox and Safari. However, 20% of visitors were getting a less than ideal experience, which ultimately wasn&#x2019;t something I could scoff at. Furthermore, it didn&#x2019;t speak well of me to have these blatant rendering bugs lying around in my blog when visited through popular non-Chrome browsers. It wasn&#x2019;t tidy.</p> <p>In this article I&#x2019;ll go through the bugs I fixed for Safari and Firefox visitors, outlining the problem, possible solutions, and how I ended up fixing them. As it turned out, not all of the bugs had a simple fix, and that&#x2019;s the largest reason why I neglected fixing them for so long, as we&#x2019;ll go over while analyzing each specific bug.</p> <p>Besides the specific instances of cross-browser issues I detected and fixed, we&#x2019;ll also be discussing the impact of having to deal with heaps of different rendering engines, when it comes to web development in general as opposed to mobile application development. In that regard, this article follows up on what Eran Hammer wrote about the web last month: <a href="https://hueniverse.com/2016/06/08/the-fucking-open-web/" target="_blank" aria-label="The Fucking Open Web on hueniverse.com">&#x201C;The Fucking Open Web&#x201D;</a>. While under a belligerent light, Eran&#x2019;s article highlights the challenges of web development when it comes to building a polished web application that performs well under the most popular runtimes &#x2013; and there&#x2019;s a lot of them, what with Chrome, Firefox, Safari, IE, Edge, Mobile Safari, and <em>(let me know when to stop)</em> developer editions such as Chrome Canary, Firefox Nightly, Rockmelt, Electron-based browsers, crawler bots, RSS readers and other niche browsers &#x2013; all of them serving one purpose or another, and application developers being judged as the ones at fault when a cross-browser API inconsistency causes our websites to fail under a particular set of conditions.</p> <p>Here&#x2019;s one of those niche browsers <em>&#x2013; which by the way, looks freaking gorgeous! &#x1F913;</em></p> <blockquote class="twitter-tweet"><p>Hyperterm updates:<br>- tab activity indicators<br>- built-in URL handling (no shell changes required, unobtrusive) <a href="https://t.co/jyqAsDYsF8">pic.twitter.com/jyqAsDYsF8</a></p>&#x2014; Guillermo Rauch (@rauchg) <a href="https://twitter.com/rauchg/status/748623889446625280">June 30, 2016</a></blockquote></div>

<div><h1 id="the-web-wields-a-double-edged-sword">The Web Wields a Double-Edged Sword. &#x2694;</h1> <p>On the one hand, having a diverse choice of runtimes allows for the web&#x2019;s user base to pick their favorite in terms of customization, tabbed view management, privacy settings, and so on.</p> <p>That same plurality prevents a single company from controlling the web platform.</p> <p>There&#x2019;s <strong>no gated access</strong> to web publishing, no app stores, and we have a <em>seamless &#x201C;installation&#x201D; process</em> that&#x2019;s so lightweight <em>&#x2013; in comparison &#x2013;</em> that we can afford to go through it on every visit to a site.</p> <p>Competition keeps the web platform a vibrant one, we have so many features and upcoming features being worked on that no single person truly knows the full stack. They may understand the big picture, as we do, or they may be very well versed in a particular aspect of the platform, such as SVG, WebRTC, ServiceWorker, or accessibility.</p> <p>Not being proprietary, the temptation a single company may have had to introduce breaking changes into the platform every other year never had a place in the web, which still retains the ability to render decades-old websites.</p> <p>On the other hand, individual browsers with significant market share are company-owned and drive the web in terms of specification and implementation. Sometimes, browsers disagree about features before they&#x2019;re specified, resulting in different implementations. Naturally, bugs can also be a source of divergence across browsers.</p> <p>Different browsers have different bugs, resulting in libraries like jQuery or normalize.css being highly valued for their convenience when it comes to developer productivity and not having to deal with the nuisance that is cross-browser development. This deficiency in productivity when developing applications that are meant to run on a diverse set of consumer devices and browsers, and not just one or two devices and a single browser in controlled environments <em>&#x2013; such as an enterprise application for companies mandating use of Internet Explorer &#x2013;</em> is for the most part what Eran alludes to when he writes <a href="https://hueniverse.com/2016/06/08/the-fucking-open-web/" target="_blank" aria-label="The Fucking Open Web on hueniverse.com"><em>&#x201C;putting together a great [web] experience [is] too fucking expensive&#x201D;</em></a>.</p> <p>Let&#x2019;s take a look at the concrete examples of cross-browser development issues I ran into and fixed <em>(to some extent)</em> for Pony Foo.</p> <h1 id="css-element-outline-in-firefox">CSS Element Outline in Firefox</h1> <p>Pony Foo uses the CSS <code class="md-code md-code-inline">outline</code> property to draw attention to focused elements. The following picture displays three different links and a text input, all of them focused &#x2013; under Google Chrome. The article title outline felt particularly clever when I first implemented it. It&#x2019;s a thick dotted outline with an artistic feel to it, yet it was relatively easy to achieve in CSS.</p> <p><img alt="CSS outline on Pony Foo elements under Firefox" class="" src="https://i.imgur.com/VW7FAUH.png"></p> <p>At some point in time, it was pointed out to me that Firefox renders outlines quite differently. My clever article title outline trick didn&#x2019;t look so elegant in Firefox. They have a different opinion on how to render outlines when it comes to multi-line text. I didn&#x2019;t include the input in this screenshot, but suffice it to say that the outline is rendered outside of the input instead of within. Elements with <code class="md-code md-code-inline">:before</code> or <code class="md-code md-code-inline">:after</code> pseudo-content are taken into account while drawing the containing element&#x2019;s outline, even if the <a href="http://stackoverflow.com/a/10662977/389745" target="_blank" aria-label="CSS &#x201C;outline&#x201D; different behavior behavior on Webkit &amp; Gecko">pseudo content itself is absolutely positioned</a>. <strong>In soviet Firefox, element outlines you.</strong></p> <p><img alt="CSS outline on Pony Foo elements under Firefox" class="" src="https://i.imgur.com/N8gGNm8.png"></p> <p>The most commonly proposed fix to Firefox&#x2019;s <code class="md-code md-code-inline">outline</code> bug when dealing with absolute positioned pseudo content is to ditch <code class="md-code md-code-inline">outline</code> entirely, and to use <code class="md-code md-code-inline">box-shadow</code> instead. While such a fix is mostly a drop in replacement in some scenarios, it&#x2019;s pretty hard to draw a dotted outline using <code class="md-code md-code-inline">box-shadow</code>. Not impossible, you can do all sorts of things with <code class="md-code md-code-inline">box-shadow</code>, but definitely not a trivial thing to implement.</p> <p>Having neglected this bug for so long, I felt uneasy about switching to <code class="md-code md-code-inline">box-shadow</code> just for 10% of my visitors, so I waited it out. When it came to deciding how to fix it, I decided not to. I took the liberty of using a user-agent detection library <em>&#x2013; I know, <strong>how dare I?</strong> &#x2013;</em> and then created my first <code class="md-code md-code-inline">hacks.css</code> stylesheet.</p> <pre class="md-code-block"><code class="md-code md-lang-css"><span class="md-code-class">.ua-firefox</span> * <span class="md-code-rules">{
  <span><span class="md-code-attribute">outline</span>:<span class="md-code-value"> none <span class="md-code-important">!important</span></span></span>;
<span>}</span></span>
</code></pre> <p><em>Oh, well.</em></p> <p>At times it&#x2019;s important to remember that websites don&#x2019;t necessarily have to look exactly the same on every browser. Other than web developers, humans have little interest in that. Humans will seldom use different browsers. Unless there are gross differences across browsers, like using entirely different sets of font faces, <strong>humans are not going to care</strong>. We need to learn to let go. User-agent detection might not be the prettiest practice in our toolset, but it is available for us to temporarily patch over these kind of problems. While, yes, no <code class="md-code md-code-inline">outline</code> is bad user experience, a misdrawn <code class="md-code md-code-inline">outline</code> is even worse. I&#x2019;d rather have no <code class="md-code md-code-inline">outline</code> for Firefox-wielding humans than have the hideous <em>&#x201C;a two year old kid drew all over my article&#x2019;s title&#x201D;</em> type of <code class="md-code md-code-inline">outline</code> pictured above.</p> <p>It&#x2019;s all in the gradual improvements.</p> <h1 id="dotted-borders-as-a-design-tool">&#x201C;Dotted&#x201D; Borders as a Design Tool</h1> <p>Pony Foo is <strong>a colorful place on the internet</strong>. On the home page, you are greeted with headlines for each article, each using different colors. To render this playful aspect of Pony Foo&#x2019;s design, I&#x2019;ve experimented for quite a bit before settling for <code class="md-code md-code-inline">border-top: 9px dotted $COLOR</code> rules. This looks super pretty on Chrome! The squares shown below <em>don&#x2019;t really convey a &#x201C;dotted&#x201D; style</em> when the border is this thick. At a width of <code class="md-code md-code-inline">1px</code>, however, the intermittence of the border does tell a &#x201C;dotted&#x201D; story. As the border grows in thickness, though, the &#x201C;dotted&#x201D; story dilutes into an unspoken &#x201C;squared&#x201D; border style.</p> <p><img alt="Dotted border style in Google Chrome" class="" src="https://i.imgur.com/jIBNFpC.png"></p> <p>At some point, it was pointed out to me that <strong>Firefox and Edge use, well, dots.</strong> Presumably, this was done so that the <code class="md-code md-code-inline">dotted</code> border style is actually &#x201C;dotted&#x201D;, <em>regardless of thickness</em>. Frankly, it just doesn&#x2019;t look as pretty for my use case. It&#x2019;s not the design tool I leveraged. Not anymore. It&#x2019;s something entirely different. Of course, Firefox and Edge are not to blame here. Or are they? Of course not. In any case, there&#x2019;s a discrepancy between Firefox, Edge, and other browsers. One that makes the site look pretty poorly designed on Firefox and Edge.</p> <p><img alt="Dotted border style in Firefox" class="" src="https://i.imgur.com/AAKTPPX.png"></p> <p>I wanted to preserve my &#x201C;squared&#x201D; borders in Chrome et al. This was a Firefox/Edge problem, not something that&#x2019;s easily patched with one of user-agent sniffing or deprecating the design for every other browser. Eventually, I settled for an <code class="md-code md-code-inline">outset</code> border style when a Firefox or Edge user agent was detected. This allowed me to introduce minimum changes to my CSS code base, while fixing the not-so-good-looking dotted border style in Firefox and Edge, and preserve my existing styles in other browsers.</p> <pre class="md-code-block"><code class="md-code md-lang-css"><span class="md-code-class">.ua-firefox</span> <span class="md-code-class">.dc-colored</span>,
<span class="md-code-class">.ua-edge</span> <span class="md-code-class">.dc-colored</span> <span class="md-code-rules">{
  <span><span class="md-code-attribute">border-top-style</span>:<span class="md-code-value"> outset</span></span>;
<span>}</span></span>
</code></pre> <p>Again, websites don&#x2019;t need to look the same, <em>all the way down to pixel perfection</em>, on every browser. Otherwise, what good is progressive enhancement? Have we been lying to ourselves all this time? <strong>No.</strong> Different browsers. Different purposes. Different looks. It&#x2019;s obvious, once we let go of these terrible mantras.</p> <p><img alt="Solid border style in Google Chrome" class="" src="https://i.imgur.com/vAJQtI8.png"></p> <p>If you&#x2019;re curious about how I do user-agent detection in my Express app, here&#x2019;s a code snippet you can use as a middleware. Once you have that code in your app, all that&#x2019;s left is injecting <code class="md-code md-code-inline">req.ua</code> into your views. In my case, I prefix <code class="md-code md-code-inline">req.ua</code> with <code class="md-code md-code-inline">ua-</code> and inject that into my <code class="md-code md-code-inline">&lt;html&gt;</code> elements.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">import { parse } from <span class="md-code-string">&apos;useragent&apos;</span>;

export <span class="md-code-keyword">default</span> <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">sniffUserAgent</span> <span class="md-code-params">(req, res, next)</span> </span>{
  <span class="md-code-keyword">const</span> nonalpha = <span class="md-code-regexp">/[^a-z]/g</span>;
  <span class="md-code-keyword">const</span> agent = req.headers[<span class="md-code-string">&apos;user-agent&apos;</span>];
  <span class="md-code-keyword">const</span> { family } = parse(agent);
  <span class="md-code-keyword">const</span> ua = family.toLowerCase().replace(nonalpha, <span class="md-code-string">&apos;&apos;</span>);
  req.ua = ua;
  next();
};
</code></pre> <p><em>Oh, and you&#x2019;ll need to <code class="md-code md-code-inline">npm i -S useragent</code>.</em></p> <h1 id="tables-in-firefox-and-ie">Tables in Firefox and IE</h1> <p>Pony Foo uses <code class="md-code md-code-inline">display: table</code> in quite a few places. One caveat when rendering tables in Firefox and IE is that <code class="md-code md-code-inline">max-width</code> rules can be ignored by the rendering engine if they are contained within tables without <a href="http://www.carsonshold.com/2014/07/css-display-table-cell-child-width-bug-in-firefox-and-ie/" target="_blank" aria-label="CSS display:table-cell child width bug in Firefox and IE"><code class="md-code md-code-inline">table-layout: fixed</code></a>. As it turns out, <a href="https://www.w3.org/TR/CSS2/visudet.html#the-width-property" target="_blank" aria-label="Content width: the &apos;width&apos; property">the specification</a> is on Firefox&#x2019;s and IE&#x2019;s side for this particular inconsistency. Who is correct isn&#x2019;t important. What should be important is that browsers put consistency across themselves first. Consistency across browsers should be the most sought-out aspect of feature development.</p> <p>Yet, consistency is consistently not attained. It&#x2019;s sometimes more interesting to work on new features than to fix existing issues on the underlying platform, some of these inconsistencies have been neglected for years. Reporting them time and again to browser vendors could mitigate their impact <em>(by having them patch the features)</em>, to the extent that they&#x2019;re willing to prioritize those fixes over newly developed features.</p> <p>Oh, look! A composite worker! *<em>Rushes to drool all over it.</em>* &#x1F913;&#x1F4A6;</p> <h1 id="line-height-in-firefox">Line Height in Firefox</h1> <p>This one reminded me that even when we leverage libraries meant to ameliorate the effect of inconsistencies across browsers, some of them might still slip through the cracks. In this particular situation there were <em>a few text inputs that were misaligned</em> with their accompanying buttons roughly by one pixel. Upon looking into the issue, it turned out that Firefox had a <code class="md-code md-code-inline">line-height</code> of <code class="md-code md-code-inline">19.45px</code> whereas Chrome and others used <code class="md-code md-code-inline">18px</code>.</p> <p>Presumably, this issue arised from differences in how different browsers calculate the default <code class="md-code md-code-inline">line-height</code> value for elements. I didn&#x2019;t care enough to dig deeper into the issue than that. <em>Sometimes, this is okay too.</em></p> <h1 id="background-gradients-in-safari">Background Gradients in Safari</h1> <p>Headlines on the home page use a gradient between the background color and transparent to overlay a preview image into the content without introducing a hard break between the content and the image. This saves room and allows me to introduce a revealing effect by adding a <code class="md-code md-code-inline">transition</code> on <code class="md-code md-code-inline">opacity</code> when the element is moused over.</p> <p><img alt="A background gradient in Google Chrome" class="" src="https://i.imgur.com/FkkYkuT.png"></p> <p>Some helpful soul sent me an email telling me that the gradient was &#x201C;broken&#x201D; in Safari. Upon inspection, it turned out that Safari dislikes the <code class="md-code md-code-inline">transparent</code> aspect of the gradient, for some unspoken reason. Luckily, a fellow Stack Overflow user noted that using <a href="http://stackoverflow.com/a/11829561/389745" target="_blank" aria-label="CSS3 gradient rendering issues from transparent to white"><code class="md-code md-code-inline">rgba(0, 0, 0, 0.00001)</code></a> instead of <code class="md-code md-code-inline">transparent</code> would get the job done and avoid rendering issues.</p> <p>Weirdly enough, they ran into the issue under Chrome and not Safari, whereas I was able to reproduce it in Safari but not in Chrome.</p> <p>A different time, a different king.</p> <p><img alt="A background gradient in Safari" class="" src="https://i.imgur.com/7micfRu.png"></p> <p>Okay, I promise there&#x2019;s only one bug left for us today.</p> <h1 id="relative-svg-url-strokes-and-the-phantom-of-animation">Relative <code class="md-code md-code-inline">&lt;svg&gt;</code> URL Strokes and the Phantom of Animation</h1> <p>This was one of those <em>&#x201C;I can&#x2019;t believe this ever worked&#x201D;</em> type of bugs. I noticed that the following <code class="md-code md-code-inline">&lt;svg&gt;</code> graph wasn&#x2019;t rendering the page views plot line on Safari. After running into a wall for several minutes, I figured out that the <code class="md-code md-code-inline">stroke</code> for that plot line was a relative URL: <code class="md-code md-code-inline">stroke: url(#sg-pageviews-gradient)</code>. This was being set on the CSS stylesheet. A URL in an stylesheet is relative to that stylesheet.</p> <p><a href="https://ponyfoo.com/subscribe" aria-label="Get Pony Foo in your inbox!"><img alt="A graph of subscribers and page views over time" class="" src="https://i.imgur.com/aCtnyXZ.png"></a></p> <p>I have no idea why this <em>did</em> work on Chrome, but moving the <code class="md-code md-code-inline">stroke</code> property away from the CSS stylesheet and into JavaScript code, assigning it to the <code class="md-code md-code-inline">&lt;path&gt;</code> element as an attribute, fixed the issue. <em>Inconsistency across browsers, again.</em></p> <p>At the same time this bug kind of reminded me of <a href="https://ponyfoo.com/articles/weirdest-bug-ever" aria-label="SVG and the DOM, or &#x201C;The Weirdest Bug I&#x2019;ve Ever Encountered&#x201D; on Pony Foo">the weirdest bug I&#x2019;ve ever come across</a>, also related to <code class="md-code md-code-inline">&lt;svg&gt;</code>. In that article, I go on to describe a rendering bug that depended on so many conditions that <strong>I completely lost my sanity for a whole day</strong>.</p> <h1 id="words-on-rss">Words on RSS</h1> <p>RSS was sort of an special kind of &#x201C;bug&#x201D; I had, where I had simply forgotten to include style information in my feed items&#x2019; HTML. This caused a plethora of rendering inconsistencies between the actual site, the feed&#x2019;s contents, and what humans expected to see. Always inline style information in your RSS feeds.</p> <p>Sure, readers may ignore them entirely, but at least you&#x2019;ve tried. Pony Foo Weekly renders <a href="https://feeds.feedburner.com/ponyfooweekly" target="_blank" aria-label="Pony Foo Weekly on Feedburner">quite decently on Feedburner</a>, for example.</p> <h1 id="the-fickle-nature-of-user-agent-detection">The Fickle Nature of User-Agent Detection</h1> <p>All of the bugs presented so far go to show two things.</p> <p>One, <strong>browsers are still as inconsistent as ever, if not more so.</strong> There is no end in sight for this plight, as browsers keep on piling more features and knowledge is further specialized and bucketed so that no single person understands the whole thing in depth. This is the biggest source of friction when it comes to developing applications that simply work across browsers: some inconsistencies may be ironed out, many others will be take their place. Web development is going to stay cumbersome for the foreseeable future.</p> <p>Two, and this is not something that follows from the bugs I found and patched, but more of a realization. <em>Yes.</em> User-agent sniffing is evil, bad, unsophisticated, inelegant, an oft-overused, misleading band-aid. <strong>But,</strong> user-agent sniffing does serve a <em>purpose</em>. Snuffing out browser-specific bugs that cause rendering anomalies <em>&#x2013; while a fix is being worked on or thought up &#x2013;</em> is laughably easy when you allow yourself to leverage user-agent information, despite the heaps of advise on how user-agent detection is evil. Under the right circumstances, even <code class="md-code md-code-inline">goto</code> and <code class="md-code md-code-inline">On Error Resume Next</code> have useful applications.</p> <p>That&#x2019;s not to say you should patch all the things over with a user-agent-sniffing self-<code class="md-code md-code-inline">!important</code> rule and call it a day. It&#x2019;s a tool, like any other. You may use it, but you should always ping your best judgement first. It may be a good idea to have a <a href="https://github.com/ponyfoo/ponyfoo/blob/ea2a97608d54eb47331510fe16966a11255f253f/client/css/hacks.styl" target="_blank" aria-label="hacks.styl in ponyfoo/ponyfoo on GitHub"><code class="md-code md-code-inline">hacks.css</code></a> stylesheet where you keep track of every single awful hack your site leverages, so that you can readily identify them all, and slowly pluck them away from your site as you find more <em>engineeringly-sound</em> solutions.</p> <p>Preferrably, ones that don&#x2019;t include the made-up word: <em>engineeringly</em>.</p> <h1 id="so-native-mobile-apps">So, Native Mobile Apps?</h1> <p>Well, yes. <em>If all you care about is optimal developer productivity,</em> you&#x2019;ll never ever attain that in web development. That&#x2019;s the price you pay for having an application that runs on the world&#x2019;s largest runtime platform, that&#x2019;s <em>able to fend off against half a dozen rendering bugs and still display a somewhat usable experience</em> to the humans visiting your corner of the internet. That&#x2019;s the price you pay for not having gated access, for not having to deal with arbitrary rules imposed upon you whenever you publish an update to your application, for having a choice when it comes to where and how your application can run.</p> <p>And, no. <strong>Do not give me that bullshit about Android or iOS being easier to develop for because they&#x2019;re single platforms.</strong> Nothing is stopping you from sniffing user-agents, developing for a single browser, and blocking all the rest with a big fat <em>&#x201C;Your browser is not supported&#x201D;</em> notice, as bad as that&#x2019;d be. How is that any different from developing for a single mobile operating system? Well, it&#x2019;s different in that at least on the web you don&#x2019;t have to put up with App Stores, a proprietary API, breaking changes, or licensing fees.</p> <p>So, native mobile apps? <em>No.</em> <strong>Not fucking native.</strong></p></div>
