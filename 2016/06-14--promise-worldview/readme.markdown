<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/master/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/promise-worldview">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/promise-worldview"><div><img src="https://i.imgur.com/lrg9mQr.jpg" alt="A Promise-Based Worldview"></div></a>

<h1>A Promise-Based Worldview</h1>

<p><kbd>es6</kbd> <kbd>promise</kbd> <kbd>async-await</kbd> <kbd>food-for-thought</kbd></p>

<blockquote><p>Once the Node.js developer&#x2019;s victim of choice, <code>Promise</code> now enjoys healthy adoption on both sides of the stack, with prominent open-source contributors like <a href="https://github.com/sindresorhus" target="_blank">@sindresorhus</a> visibly leveraging them.<br>
<em>What&#x2019;s changed?</em></p>
</blockquote>

<div><p>Once the Node.js developer&#x2019;s victim of choice, <code class="md-code md-code-inline">Promise</code> now enjoys healthy adoption on both sides of the stack, with prominent open-source contributors like <a href="https://github.com/sindresorhus" target="_blank">@sindresorhus</a> visibly leveraging them.<br> <em>What&#x2019;s changed?</em></p></div>

<div></div>

<div><blockquote> <p><em>Just a thought.</em></p> </blockquote> <p>What was once considered a mistake by many &#x2013; inclusion of <code class="md-code md-code-inline">Promise</code> as a native language API &#x2013; is now seeing increasingly high rates of adoption. I&#x2019;d say there&#x2019;s three reasons for this.</p></div>

<div><p>The most obvious one is &#x2013; recursively &#x2013; the fact that <code class="md-code md-code-inline">Promise</code> is now in the language. <code class="md-code md-code-inline">Promise</code> being in the language drives adoption by itself, through the official endorsement of the spec-writing JavaScript gods. Furthermore, libraries like Babel and <code class="md-code md-code-inline">bluebird</code> making it all too simple to include spec-compliant <code class="md-code md-code-inline">Promise</code>-based solutions in any app at very little cost. Anyone writing code for modern browsers or using a modern development toolchain leverages Babel and/or <code class="md-code md-code-inline">bluebird</code>.</p> <p>Another reason is that <strong>developers are increasingly comfortable with ES6</strong>. There have been plenty of <a href="https://ponyfoo.com/articles/es6" aria-label="ES6 Overview in 350 Bullet Points on Pony Foo">tutorials</a>, a couple of books, and many conference talks describing ES6. It&#x2019;s been roughly a year since the specification was finalized. People now roughly understand the <code class="md-code md-code-inline">Promise</code> API, and what&#x2019;s better: the API isn&#x2019;t changing anymore. Recently, <a href="https://blog.jquery.com/2016/06/09/jquery-3-0-final-released/" target="_blank" aria-label="jQuery 3.0 Final Released!">jQuery 3 was released</a> into <em>Promises/A+</em> compliance, a huge win for native <code class="md-code md-code-inline">Promise</code>.</p> <p>Third, there&#x2019;s <a href="https://ponyfoo.com/articles/understanding-javascript-async-await" aria-label="Understanding JavaScript&#x2019;s async await on Pony Foo"><code class="md-code md-code-inline">async</code>/<code class="md-code md-code-inline">await</code></a>. While not the most heavily utilized JavaScript API, <code class="md-code md-code-inline">async</code>/<code class="md-code md-code-inline">await</code> is already a <a href="https://github.com/tc39/ecmascript-asyncawait" target="_blank" aria-label="tc39/ecmascript-asyncawait on GitHub">stage 3 proposal</a>, and at this point I think we can state confidently and without hesitation that it&#x2019;ll someday be an official language feature.</p> <blockquote> <p>The synergy between <code class="md-code md-code-inline">Promise</code>, <code class="md-code md-code-inline">async</code>/<code class="md-code md-code-inline">await</code>, and generators, is just too good to pass up!</p> </blockquote></div>
