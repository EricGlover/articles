Most often, web UI libraries fall under one of two categories. They may be part of a _"framework"_, or a grouping of UI components that **share an appearance, a similar API, or are otherwise cohesive**. Another category is usually the _standalone_ library. Regardless of whether a standalone library depends on jQuery _(I'm singling out this scenario because of its prevalence)_, they aren't directly related to other UI components, which means **they set their own terms** with regard to API, appearance, and other conventions. Components that are part of a framework are _usually hard to integrate_ with anything that's not part of said framework, resulting in vendor lock-in. Components that aren't part of a framework tend to be easier to integrate with other things, but most often they're _not designed_ to that effect. <mark>**Composability** is a much better alternative, and something we'll explore in depth in this article</mark>.
