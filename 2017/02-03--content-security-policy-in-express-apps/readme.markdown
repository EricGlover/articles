<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/content-security-policy-in-express-apps">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/content-security-policy-in-express-apps"><div><img src="https://i.imgur.com/wWiTEO4.jpg" alt="Content-Security-Policy in Express apps"></div></a>

<h1><code class="md-code md-code-inline">Content-Security-Policy</code> in Express apps</h1>

<p><kbd>csp</kbd> <kbd>security</kbd> <kbd>http</kbd></p>

<blockquote><p>The <code>Content-Security-Policy</code> header is a bit frightening &#x2014; will I break my website if I suddenly start blocking requests for external resources? In this article we go over a gradual approach to adopting CSP. &#x1F510;</p>
</blockquote>

<div><p>The <code class="md-code md-code-inline">Content-Security-Policy</code> header is a bit frightening &#x2014; will I break my website if I suddenly start blocking requests for external resources &#x1F630;? In this article we go over a gradual approach to adopting CSP, so that you can mitigate the risk of breaking your website while trying to making it more secure. &#x1F510;</p></div>

<blockquote></blockquote>

<div><h1 id="what-is-content-security-policy">What is <code class="md-code md-code-inline">Content-Security-Policy</code>?</h1> <p>CSP is an HTTP header that helps you mitigate XSS risk by preventing resources from untrusted origins from loading. CSP comes with several different directives, each of which serves a specific purpose. For instance, the <code class="md-code md-code-inline">img-src</code> directive is used when loading images, <code class="md-code md-code-inline">script-src</code> is used when loading scripts, <code class="md-code md-code-inline">connect-src</code> is used for XHR, <code class="md-code md-code-inline">WebSocket</code> and friends, and so on.</p> <p>Each CSP directive lets you indicate which origins are trusted by using a whitelist-based approach. User agents which support CSP will avoid fetching resources that don&#x2019;t match your server&#x2019;s CSP directives. This means our server can determine, at a granular level, which origins are allowed for which kinds of resources.</p> <p>For instance, you might serve all of your images through the <code class="md-code md-code-inline">imgur.com</code> service, and thus you could set the header to <code class="md-code md-code-inline">Content-Security-Policy: &quot;img-src: imgur.com;&quot;</code> and prevent images from any origins other than <code class="md-code md-code-inline">imgur.com</code> from loading. In a similar fashion you could limit script loading to just a subdomain of your site, preventing XSS attacks from loading scripts from <code class="md-code md-code-inline">malicious.com</code> or from anywhere else you haven&#x2019;t proactively approved.</p></div>

<div><h1 id="content-security-policy-in-express"><code class="md-code md-code-inline">Content-Security-Policy</code> in Express</h1> <p>If you&#x2019;re using Express, it&#x2019;s really simple to write maintainable CSP directives using <a href="https://github.com/helmetjs/csp" target="_blank" aria-label="helmetjs/csp on GitHub"><code class="md-code md-code-inline">helmet-csp</code></a>. To implement the <code class="md-code md-code-inline">img-src</code> rule we were talking about, we&#x2019;d only have to write code link in the following snippet, and <code class="md-code md-code-inline">helmet-csp</code> will take care of adding the appropriate header to our server&#x2019;s HTTP responses.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> csp = <span class="md-code-built_in">require</span>(`helmet-csp`)

app.use(csp({
  directives: {
    imgSrc: [`imgur.com`]
  }
}))
</code></pre> <p>We could also use <code class="md-code md-code-inline">&apos;self&apos;</code> to allow image resources from the same origin. Note that <code class="md-code md-code-inline">&apos;self&apos;</code> must be in quotes.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">app.use(csp({
  directives: {
    imgSrc: [`<span class="md-code-string">&apos;self&apos;</span>`, `imgur.com`]
  }
}))
</code></pre> <p>There is a directive called <code class="md-code md-code-inline">default-src</code> that&#x2019;s used as fallback for any undeclared directives. If we set <code class="md-code md-code-inline">default-src: &apos;self&apos;</code>, for example, we&#x2019;d allow scripts, styles, and every other kind of resource to be loaded from the same origin.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">app.use(csp({
  directives: {
    defaultSrc: [`<span class="md-code-string">&apos;self&apos;</span>`],
    imgSrc: [`<span class="md-code-string">&apos;self&apos;</span>`, `imgur.com`]
  }
}))
</code></pre> <p>Keep in mind that <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/default-src" target="_blank" aria-label="Read the documentation about the &apos;default-src&apos; directive on MDN."><code class="md-code md-code-inline">default-src</code></a> <strong>isn&#x2019;t inherited</strong> by other declared rules, meaning that if we now removed <code class="md-code md-code-inline">&apos;self&apos;</code> from <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/img-src" target="_blank" aria-label="Read the documentation about the &apos;img-src&apos; directive on MDN."><code class="md-code md-code-inline">img-src</code></a>, only images from <code class="md-code md-code-inline">imgur.com</code> would be allowed.</p> <p>There are <strong>many</strong> different directives we can set. What follows is a table <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#Directives" target="_blank" aria-label="Content-Security-Policy Directives">based off of MDN documentation</a>, containing just the 15 most relevant rules. As you can see, we weren&#x2019;t exaggerating when we said CSP allows us to determine where resources can be loaded from <strong>on a granular level</strong>. We can make our CSP header as complicated as we want it to be, with directives ranging from simple rules such as where images should be allowed to load from with <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/img-src" target="_blank" aria-label="Read the documentation about the &apos;img-src&apos; directive on MDN."><code class="md-code md-code-inline">img-src</code></a>, to more severe ones like blocking all mixed content or restricting how the page works using the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox" target="_blank" aria-label="Read the documentation about the &apos;sandbox&apos; directive on MDN."><code class="md-code md-code-inline">sandbox</code></a> directive.</p> <table> <thead> <tr> <th>Directive</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/block-all-mixed-content" target="_blank" aria-label="Read the documentation about the &apos;block-all-mixed-content&apos; directive on MDN."><code class="md-code md-code-inline">block-all-mixed-content</code></a></td> <td>Prevents loading any assets using HTTP when the page is loaded using HTTPS.</td> </tr> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/child-src" target="_blank" aria-label="Read the documentation about the &apos;child-src&apos; directive on MDN."><code class="md-code md-code-inline">child-src</code></a></td> <td>Defines the valid sources for web workers and nested browsing contexts loaded using elements such as <code class="md-code md-code-inline">&lt;frame&gt;</code> and <code class="md-code md-code-inline">&lt;iframe&gt;</code>.</td> </tr> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/connect-src" target="_blank" aria-label="Read the documentation about the &apos;connect-src&apos; directive on MDN."><code class="md-code md-code-inline">connect-src</code></a></td> <td>Restricts the URLs which can be loaded using script interfaces</td> </tr> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/default-src" target="_blank" aria-label="Read the documentation about the &apos;default-src&apos; directive on MDN."><code class="md-code md-code-inline">default-src</code></a></td> <td>Serves as a fallback for the other fetch directives.</td> </tr> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/font-src" target="_blank" aria-label="Read the documentation about the &apos;font-src&apos; directive on MDN."><code class="md-code md-code-inline">font-src</code></a></td> <td>Specifies valid sources for fonts loaded using <code class="md-code md-code-inline">@font-face</code>.</td> </tr> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-src" target="_blank" aria-label="Read the documentation about the &apos;frame-src&apos; directive on MDN."><code class="md-code md-code-inline">frame-src</code></a></td> <td>Specifies valid sources for nested browsing contexts loading using elements such as <code class="md-code md-code-inline">&lt;frame&gt;</code> and <code class="md-code md-code-inline">&lt;iframe&gt;</code>.</td> </tr> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/img-src" target="_blank" aria-label="Read the documentation about the &apos;img-src&apos; directive on MDN."><code class="md-code md-code-inline">img-src</code></a></td> <td>Specifies valid sources of images and favicons.</td> </tr> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/media-src" target="_blank" aria-label="Read the documentation about the &apos;media-src&apos; directive on MDN."><code class="md-code md-code-inline">media-src</code></a></td> <td>Specifies valid sources for loading media using the <code class="md-code md-code-inline">&lt;audio&gt;</code> and <code class="md-code md-code-inline">&lt;video&gt;</code> elements.</td> </tr> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/object-src" target="_blank" aria-label="Read the documentation about the &apos;object-src&apos; directive on MDN."><code class="md-code md-code-inline">object-src</code></a></td> <td>Specifies valid sources for the <code class="md-code md-code-inline">&lt;object&gt;</code>, <code class="md-code md-code-inline">&lt;embed&gt;</code>, and <code class="md-code md-code-inline">&lt;applet&gt;</code> elements.</td> </tr> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-uri" target="_blank" aria-label="Read the documentation about the &apos;report-uri&apos; directive on MDN."><code class="md-code md-code-inline">report-uri</code></a></td> <td>Instructs the user agent to report attempts to violate the Content Security Policy. These violation reports consist of JSON documents sent via an HTTP POST request to the specified URI.</td> </tr> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/require-sri-for" target="_blank" aria-label="Read the documentation about the &apos;require-sri-for&apos; directive on MDN."><code class="md-code md-code-inline">require-sri-for</code></a></td> <td>Requires the use of SRI for scripts or styles on the page.</td> </tr> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox" target="_blank" aria-label="Read the documentation about the &apos;sandbox&apos; directive on MDN."><code class="md-code md-code-inline">sandbox</code></a></td> <td>Enables a sandbox for the requested resource similar to the <code class="md-code md-code-inline">&lt;iframe&gt;</code> sandbox attribute.</td> </tr> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src" target="_blank" aria-label="Read the documentation about the &apos;script-src&apos; directive on MDN."><code class="md-code md-code-inline">script-src</code></a></td> <td>Specifies valid sources for JavaScript.</td> </tr> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src" target="_blank" aria-label="Read the documentation about the &apos;style-src&apos; directive on MDN."><code class="md-code md-code-inline">style-src</code></a></td> <td>Specifies valid sources for stylesheets.</td> </tr> <tr> <td><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/upgrade-insecure-requests" target="_blank" aria-label="Read the documentation about the &apos;upgrade-insecure-requests&apos; directive on MDN."><code class="md-code md-code-inline">upgrade-insecure-requests</code></a></td> <td>Instructs user agents to treat all of a site&#x2019;s insecure URLs (those served over HTTP) as though they have been replaced with secure URLs (those served over HTTPS). This directive is intended for web sites with large numbers of insecure legacy URLs that need to be rewritten.</td> </tr> </tbody> </table> <p>Granted, the above table can feel intimidating. To get started with CSP, however, we don&#x2019;t need to list every single rule. Generally speaking, a good idea is to set a <code class="md-code md-code-inline">default-src</code> of <code class="md-code md-code-inline">&apos;self&apos;</code> and then whitelist other origins to allow specific resources to load. Using <code class="md-code md-code-inline">report-only</code> is a great way of finding out what those other resources could be.</p> <h1 id="to-get-started-let-s-use-report-only">To get started, let&#x2019;s use <code class="md-code md-code-inline">report-only</code></h1> <p>The <code class="md-code md-code-inline">Content-Security-Policy-Report-Only</code> header is identical to the <code class="md-code md-code-inline">Content-Security-Policy</code> header, except that it behaves like a dry run. The policy won&#x2019;t be enforced, <em>&#x2013; resources will continue to load as they were &#x2013;</em> but the configured <code class="md-code md-code-inline">report-uri</code> will be requested with a <code class="md-code md-code-inline">POST</code> message and a JSON payload.</p> <p>I&#x2019;ll be using the <a href="https://github.com/winstonjs/winston" target="_blank" aria-label="winstonjs/winston on GitHub"><code class="md-code md-code-inline">winston</code></a> logger to persist log messages for the CSP report, but you can use anything you&#x2019;d like. Odds are, you already have some sort of logging solution in place <em>&#x2013; use that!</em></p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> winston = <span class="md-code-built_in">require</span>(`winston`)

app.use(csp({
  directives: {
    defaultSrc: [`<span class="md-code-string">&apos;self&apos;</span>`],
    reportUri: `/api/csp/report`
  },
  reportOnly: <span class="md-code-literal">true</span>
}))

app.post(`/api/csp/report`, (req, res) =&gt; {
  winston.warn(`CSP header violation`, req.body[`csp-report`])
  res.status(<span class="md-code-number">204</span>).end()
})
</code></pre> <p>Once you set up CSP reporting, your server will start logging reports of every single resource that would&#x2019;ve been blocked by your CSP header. As the days pass, you&#x2019;ll collect considerable amounts of data on the resources CSP would block.</p> <p>You could fix the violations by relaxing your CSP directives, for example by adding origins you&#x2019;ll allow images to be loaded from; or by changing how your site is implemented so that the resources that would have been blocked by the CSP directive aren&#x2019;t requested anymore.</p> <p>Keep adding directives to your CSP header without removing <code class="md-code md-code-inline">reportOnly: true</code> from your <code class="md-code md-code-inline">helmet-csp</code> configuration. As you tweak your header, you should see the amount of reports shrinking to a point where it&#x2019;ll be safe to remove the <code class="md-code md-code-inline">reportOnly: true</code> option. At this point, your CSP header will be in effect and requests for resources from untrusted origins will be blocked.</p> <p>Generally speaking, there&#x2019;s two hurdles to overcome when setting up a CSP header for production use.</p> <p>Ads served by an ad network tend to load third party scripts, loading images, styles, and scripts from an assortment of different origins. Unless the ad network offers documentation on how to set up your CSP header to allow them to serve advertisements unimpeded, it can be hard to detect every origin casually in order to whitelist them. This is one of the reasons why the &#x201C;report-only first&#x201D; approach is recommended.</p> <p>Inline scripts and inline styles can also be a hassle. Any occurrence of <code class="md-code md-code-inline">onclick</code> handlers directly in your HTML code, inline script tags such as your typical Google Analytics snippet, or inline styles such as those recommended to optimize <a href="https://ponyfoo.com/articles/critical-path-performance-optimization" aria-label="Critical Path Performance Optimization at Pony Foo">critical rendering path performance</a> will be blocked by CSP unless you add the shame-inducing <code class="md-code md-code-inline">&apos;unsafe-inline&apos;</code> source to <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src" target="_blank" aria-label="Read the documentation about the &apos;script-src&apos; directive on MDN."><code class="md-code md-code-inline">script-src</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src" target="_blank" aria-label="Read the documentation about the &apos;style-src&apos; directive on MDN."><code class="md-code md-code-inline">style-src</code></a> directives, respectively. The same goes with<code class="md-code md-code-inline">&apos;unsafe-eval&apos;</code>, which whitelists JavaScript code such as <code class="md-code md-code-inline">eval(`code`)</code>, <code class="md-code md-code-inline">setTimeout(`code`)</code> or <code class="md-code md-code-inline">new Function(`code`)</code>._</p> <h1 id="inlining-safely-using-a-nonce">Inlining safely using a <code class="md-code md-code-inline">nonce</code></h1> <p>You probably have inline styles and scripts like the Google Analytics snippet we&#x2019;ve mentioned above. To whitelist these snippets without turning on the <code class="md-code md-code-inline">&apos;unsafe-inline&apos;</code> rule, we can use a nonce. A nonce is an unique code we generate for every request, using a module such as <a href="https://github.com/kelektiv/node-uuid" target="_blank" aria-label="kelektiv/node-uuid on GitHub"><code class="md-code md-code-inline">uuid</code></a>.</p> <p>In the following piece of code, we generate a nonce for every request.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> uuid = <span class="md-code-built_in">require</span>(`uuid`)

app.use((req, res, next) =&gt; {
  res.locals.nonce = uuid.v4()
  next()
})
</code></pre> <p>We then tell the CSP directive what the nonce for the current request is. Any inline scripts that don&#x2019;t have the same nonce in a <code class="md-code md-code-inline">nonce</code> attribute will be blocked.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> csp = <span class="md-code-built_in">require</span>(`helmet-csp`)

app.use(csp({
  directives: {
    defaultSrc: [`<span class="md-code-string">&apos;self&apos;</span>`],
    scriptSrc: [`<span class="md-code-string">&apos;self&apos;</span>`, (req, res) =&gt; `<span class="md-code-string">&apos;nonce-${ res.locals.nonce }&apos;</span>`]
  }
}))
</code></pre> <p>Lastly, we apply the nonce as an attribute for any inline scripts and styles we have. This tells CSP-compliant browsers that the script is safe to execute.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">// in the real world, this would be in your view engine:
app.use((req, res) =&gt; {
  res.end(`&lt;script nonce=&apos;${ res.locals.nonce }&apos;&gt;alert(&apos;whitelisted!&apos;)&lt;/script&gt;`)
})
</code></pre> <p>You can repeat the process for inline styles, but using <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src" target="_blank" aria-label="Read the documentation about the &apos;style-src&apos; directive on MDN."><code class="md-code md-code-inline">style-src</code></a> and <code class="md-code md-code-inline">&lt;style nonce=&apos;...&apos;&gt;</code>.</p> <h1 id="closing-the-loop-with-upgrade-insecure-requests">Closing the loop with <code class="md-code md-code-inline">upgrade-insecure-requests</code></h1> <p>Using CSP&#x2019;s <code class="md-code md-code-inline">upgrade-insecure-requests</code> directive, we could have the user agent automatically upgrade HTTP requests to HTTPS, effectively transforming code like this:</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">img</span> <span class="md-code-attribute">src</span>=<span class="md-code-value">&apos;<mark class="md-mark md-code-mark">http://</mark>cats.com/hairy-cat.png&apos;</span> /&gt;</span>
</code></pre> <p>Into its secure counterpart:</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">img</span> <span class="md-code-attribute">src</span>=<span class="md-code-value">&apos;<mark class="md-mark md-code-mark">https://</mark>cats.com/hairy-cat.png&apos;</span> /&gt;</span>
</code></pre> <p>Enabling this behavior in <code class="md-code md-code-inline">helmet-csp</code> is merely a matter of setting <code class="md-code md-code-inline">upgradeInsecureRequests: true</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">app.use(csp({
  directives: {
    upgradeInsecureRequests: <span class="md-code-literal">true</span>
  }
}))
</code></pre> <h1 id="csp-in-express-by-example">CSP in Express, by Example</h1> <p>Here&#x2019;s an example of how we compose the CSP header for Pony Foo. There&#x2019;s quite a few whitelisted external services, and we weren&#x2019;t able to completely get rid of inline styles, but it&#x2019;s a good start!</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> csp = <span class="md-code-built_in">require</span>(`helmet-csp`)
<span class="md-code-keyword">const</span> uuid = <span class="md-code-built_in">require</span>(`uuid`)
<span class="md-code-keyword">const</span> env = <span class="md-code-built_in">require</span>(`./env`)
<span class="md-code-keyword">const</span> authority = env(`AUTHORITY`)
<span class="md-code-keyword">const</span> authorityIsSecure = authority.startsWith(`https`)
<span class="md-code-keyword">const</span> authorityProtocol = authorityIsSecure ? `https` : `http`

<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">generateNonce</span><span class="md-code-params">(req, res, next)</span> </span>{
  <span class="md-code-keyword">const</span> rhyphen = <span class="md-code-regexp">/-/g</span>
  res.locals.nonce = uuid.v4().replace(rhyphen, ``)
  next()
}

<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">getNonce</span> <span class="md-code-params">(req, res)</span> </span>{
  <span class="md-code-keyword">return</span> `<span class="md-code-string">&apos;nonce-${ res.locals.nonce }&apos;</span>`
}

<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">getDirectives</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">const</span> self = `<span class="md-code-string">&apos;self&apos;</span>`
  <span class="md-code-keyword">const</span> unsafeInline = `<span class="md-code-string">&apos;unsafe-inline&apos;</span>`
  <span class="md-code-keyword">const</span> scripts = [
    `https:<span class="md-code-comment">//www.google-analytics.com/`,</span>
    `https:<span class="md-code-comment">//maps.googleapis.com/`,</span>
    `https:<span class="md-code-comment">//static.getclicky.com/`,</span>
    `https:<span class="md-code-comment">//in.getclicky.com/`,</span>
    `https:<span class="md-code-comment">//cdn.carbonads.com/`,</span>
    `http:<span class="md-code-comment">//srv.carbonads.net/`,</span>
    `${ authorityProtocol }:<span class="md-code-comment">//adn.fusionads.net/`,</span>
    `https:<span class="md-code-comment">//platform.twitter.com/`,</span>
    `https:<span class="md-code-comment">//assets.codepen.io/`,</span>
    `https:<span class="md-code-comment">//cdn.syndication.twimg.com/`</span>
  ]
  <span class="md-code-keyword">const</span> styles = [
    `https:<span class="md-code-comment">//fonts.googleapis.com/`,</span>
    `https:<span class="md-code-comment">//platform.twitter.com/`</span>
  ]
  <span class="md-code-keyword">const</span> fonts = [
    `https:<span class="md-code-comment">//fonts.gstatic.com/`</span>
  ]
  <span class="md-code-keyword">const</span> frames = [
    `https:<span class="md-code-comment">//www.youtube.com/`,</span>
    `https:<span class="md-code-comment">//speakerdeck.com/`,</span>
    `https:<span class="md-code-comment">//player.vimeo.com/`,</span>
    `https:<span class="md-code-comment">//syndication.twitter.com/`,</span>
    `https:<span class="md-code-comment">//codepen.io/`</span>
  ]
  <span class="md-code-keyword">const</span> images = [
    `https:`,
    `data:`
  ]
  <span class="md-code-keyword">const</span> connect = [
    `https:<span class="md-code-comment">//api.github.com/`,</span>
    `https:<span class="md-code-comment">//maps.googleapis.com/`</span>
  ]

  <span class="md-code-keyword">return</span> {
    defaultSrc: [self],
    scriptSrc: [self, getNonce, ...scripts],
    styleSrc: [self, unsafeInline, ...styles],
    fontSrc: [self, ...fonts],
    frameSrc: [self, ...frames],
    connectSrc: [self, ...connect],
    imgSrc: [self, ...images],
    objectSrc: [self],

    <span class="md-code-comment">// breaks pdf in chrome:</span>
    <span class="md-code-comment">// https://bugs.chromium.org/p/chromium/issues/detail?id=413851</span>
    <span class="md-code-comment">// sandbox: [`allow-forms`, `allow-scripts`, `allow-same-origin`],</span>

    upgradeInsecureRequests: authorityIsSecure,
    reportUri: `/api/csp/report`
  }
}

app.use(generateNonce)
app.use(csp({
  directives: getDirectives()
}))
</code></pre> <h1 id="further-reading">Further Reading</h1> <ul> <li><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity" target="_blank" aria-label="Subresource Integrity on MDN">Subresource Integrity</a> &#x2013; a better way of trusting resources served by our CDN</li> <li><a href="https://content-security-policy.com/" target="_blank" aria-label="Content Security Policy Quick Reference Guide">Content-Security-Policy.com</a> &#x2013; a good go-to resource which summarizes a lot of advice around CSP</li> <li><a href="https://githubengineering.com/githubs-csp-journey/" target="_blank" aria-label="GitHub&apos;s CSP journey">GitHub&#x2019;s CSP journey</a> &#x2013; where they explain the steps they took in implementing CSP</li> <li><a href="https://githubengineering.com/githubs-post-csp-journey/" target="_blank" aria-label="GitHub&apos;s post-CSP journey">GitHub&#x2019;s post-CSP journey</a> &#x2013; where they go further and dive into more advanced tactics to zero in on XSS attack mitigation</li> </ul> <p>If you liked this article, consider subscribing to <a href="https://ponyfoo.com/weekly" aria-label="Pony Foo Weekly Email Newsletter">Pony Foo Weekly</a>, our periodic email newsletter on front-end development! &#x1F48C;</p></div>
