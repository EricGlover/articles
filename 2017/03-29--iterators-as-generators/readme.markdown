<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/iterators-as-generators">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/iterators-as-generators"><div><img src="https://i.imgur.com/YqpTJGF.jpg" alt="Mixing Generators Into Iterators"></div></a>

<h1>Mixing Generators Into Iterators</h1>

<p><kbd>es6</kbd> <kbd>generators</kbd> <kbd>iterators</kbd></p>

<blockquote><p>As it turns out, iterators can be written using generators. This can lead to some interesting use cases.</p>
</blockquote>

<div><p>As it turns out, iterators can be written using generators. This can lead to some interesting use cases. Read on to understand the synergistic properties between these two JavaScript iteration concepts.</p></div>

<blockquote></blockquote>

<div><p>Let&#x2019;s do a quick recap of generators <em><a href="https://ponyfoo.com/articles/es6-generators-in-depth" aria-label="ES6 Generators in Depth on Pony Foo">(read our primer on generators here)</a></em>. Generator functions return generator objects when invoked. A generator object has a <code class="md-code md-code-inline">next</code> method, which returns the next element in the sequence. The <code class="md-code md-code-inline">next</code> method returns objects with a <code class="md-code md-code-inline">{ value, done }</code> shape.</p> <p>The following example shows an infinite fibonacci number generator. We then instantiate a generator object and read the first eight values in the sequence.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span>* <span class="md-code-title">fibonacci</span><span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">let</span> previous = <span class="md-code-number">0</span>
  <span class="md-code-keyword">let</span> current = <span class="md-code-number">1</span>
  <span class="md-code-keyword">while</span> (<span class="md-code-literal">true</span>) {
    <span class="md-code-keyword">yield</span> current
    <span class="md-code-keyword">const</span> next = current + previous
    previous = current
    current = next
  }
}
<span class="md-code-keyword">const</span> g = fibonacci()
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 1, done: false }</span>
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 1, done: false }</span>
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 2, done: false }</span>
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 3, done: false }</span>
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 5, done: false }</span>
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 8, done: false }</span>
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 13, done: false }</span>
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 21, done: false }</span>
</code></pre></div>

<div><p>Iterators follow a similar pattern <em><a href="https://ponyfoo.com/articles/es6-iterators-in-depth" aria-label="ES6 Iterators in Depth on Pony Foo">(you may read our primer on iterators here)</a></em>. They enforce a contract that dictates we should return an object with a <code class="md-code md-code-inline">next</code> method. That method should return sequence elements following a <code class="md-code md-code-inline">{ value, done }</code> shape. The following example shows a <code class="md-code md-code-inline">fibonacci</code> iterable that&#x2019;s a rough equivalent of the generator we were just looking at.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> fibonacci = {
  [Symbol.iterator]() {
    <span class="md-code-keyword">let</span> previous = <span class="md-code-number">0</span>
    <span class="md-code-keyword">let</span> current = <span class="md-code-number">1</span>
    <span class="md-code-keyword">return</span> {
      next() {
        <span class="md-code-keyword">const</span> value = current
        <span class="md-code-keyword">const</span> next = current + previous
        previous = current
        current = next
        <span class="md-code-keyword">return</span> { value, done: <span class="md-code-literal">false</span> }
      }
    }
  }
}
<span class="md-code-keyword">const</span> sequence = fibonacci[Symbol.iterator]()
<span class="md-code-built_in">console</span>.log(sequence.next()) <span class="md-code-comment">// &lt;- { value: 1, done: false }</span>
<span class="md-code-built_in">console</span>.log(sequence.next()) <span class="md-code-comment">// &lt;- { value: 1, done: false }</span>
<span class="md-code-built_in">console</span>.log(sequence.next()) <span class="md-code-comment">// &lt;- { value: 2, done: false }</span>
<span class="md-code-built_in">console</span>.log(sequence.next()) <span class="md-code-comment">// &lt;- { value: 3, done: false }</span>
<span class="md-code-built_in">console</span>.log(sequence.next()) <span class="md-code-comment">// &lt;- { value: 5, done: false }</span>
<span class="md-code-built_in">console</span>.log(sequence.next()) <span class="md-code-comment">// &lt;- { value: 8, done: false }</span>
<span class="md-code-built_in">console</span>.log(sequence.next()) <span class="md-code-comment">// &lt;- { value: 13, done: false }</span>
<span class="md-code-built_in">console</span>.log(sequence.next()) <span class="md-code-comment">// &lt;- { value: 21, done: false }</span>
</code></pre> <p>Let&#x2019;s reiterate. An iterable should return an object with a <code class="md-code md-code-inline">next</code> method: generator functions do just that. The <code class="md-code md-code-inline">next</code> method should return objects with a <code class="md-code md-code-inline">{ value, done }</code> shape: generator functions do that too. What happens if we change the <code class="md-code md-code-inline">fibonacci</code> iterable to use a generator function for its <code class="md-code md-code-inline">Symbol.iterator</code> property? As it turns out, it just works.</p> <p>The following example shows the iterable <code class="md-code md-code-inline">fibonacci</code> object using a generator function for its iterator. Note how that iterator has the exact same contents as the <code class="md-code md-code-inline">fibonacci</code> generator function we saw earlier. We can use <code class="md-code md-code-inline">yield</code>, <code class="md-code md-code-inline">yield*</code>, and all of the semantics found in generator functions hold.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> fibonacci = {
  * [Symbol.iterator]() {
    <span class="md-code-keyword">let</span> previous = <span class="md-code-number">0</span>
    <span class="md-code-keyword">let</span> current = <span class="md-code-number">1</span>
    <span class="md-code-keyword">while</span> (<span class="md-code-literal">true</span>) {
      <span class="md-code-keyword">yield</span> current
      <span class="md-code-keyword">const</span> next = current + previous
      previous = current
      current = next
    }
  }
}
<span class="md-code-keyword">const</span> g = fibonacci[Symbol.iterator]()
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 1, done: false }</span>
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 1, done: false }</span>
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 2, done: false }</span>
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 3, done: false }</span>
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 5, done: false }</span>
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 8, done: false }</span>
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 13, done: false }</span>
<span class="md-code-built_in">console</span>.log(g.next()) <span class="md-code-comment">// &lt;- { value: 21, done: false }</span>
</code></pre> <p>Meanwhile, the iterable protocol also holds up. To verify that you might use a construct like <code class="md-code md-code-inline">for..of</code>, instead of manually creating the generator object. The following example uses <code class="md-code md-code-inline">for..of</code> and introduces a circuit breaker to prevent an infinite loop from crashing the program.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">for</span> (<span class="md-code-keyword">const</span> value of fibonacci) {
  <span class="md-code-built_in">console</span>.log(value)
  <span class="md-code-keyword">if</span> (value &gt; <span class="md-code-number">20</span>) {
    <span class="md-code-keyword">break</span>
  }
}
<span class="md-code-comment">// &lt;- 1</span>
<span class="md-code-comment">// &lt;- 1</span>
<span class="md-code-comment">// &lt;- 2</span>
<span class="md-code-comment">// &lt;- 3</span>
<span class="md-code-comment">// &lt;- 5</span>
<span class="md-code-comment">// &lt;- 8</span>
<span class="md-code-comment">// &lt;- 13</span>
<span class="md-code-comment">// &lt;- 21</span>
</code></pre> <p>This was a fun trick. What would you use it for in a real-world program?</p> <h1 id="further-reading">Further Reading</h1> <ul> <li><a href="https://ponyfoo.com/articles/es6-iterators-in-depth" aria-label="ES6 Iterators in Depth on Pony Foo">ES6 Iterators in Depth</a></li> <li><a href="https://ponyfoo.com/articles/es6-generators-in-depth" aria-label="ES6 Generators in Depth on Pony Foo">ES6 Generators in Depth</a></li> <li><a href="https://ponyfoo.com/articles/es6-symbols-in-depth" aria-label="ES6 Symbols in Depth on Pony Foo">ES6 Symbols in Depth</a></li> <li><a href="https://ponyfoo.com/articles/understanding-javascript-async-await" aria-label="Understanding JavaScript&apos;s async await on Pony Foo">Understanding JavaScript&#x2019;s <code class="md-code md-code-inline">async</code>/<code class="md-code md-code-inline">await</code></a> <em>(bonus track!) &#x1F3B6;</em></li> </ul></div>
