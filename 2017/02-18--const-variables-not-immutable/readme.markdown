<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/const-variables-not-immutable">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/const-variables-not-immutable"><div><img src="https://i.imgur.com/TjJ7TAS.jpg" alt="Variables declared using const are not immutable"></div></a>

<h1>Variables declared using <code class="md-code md-code-inline">const</code> are not immutable</h1>

<p><kbd>const</kbd> <kbd>immutability</kbd></p>

<blockquote><p>Using <code>const</code> only means that the variable will always have a reference to the same object or primitive value, because that reference can&#x2019;t change.</p>
</blockquote>

<div><p>Using <code class="md-code md-code-inline">const</code> only means that the variable will always have a reference to the same object or primitive value, because that reference can&#x2019;t change. The reference itself is immutable, but the value held by the variable does not become immutable.</p></div>

<blockquote></blockquote>

<div><p>The following example shows that even though the <code class="md-code md-code-inline">people</code> reference couldn&#x2019;t be changed, the array itself can indeed be modified. If the array were immutable, this wouldn&#x2019;t be possible.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> people = [<span class="md-code-string">&apos;Tesla&apos;</span>, <span class="md-code-string">&apos;Musk&apos;</span>]
people.push(<span class="md-code-string">&apos;Berners-Lee&apos;</span>)
<span class="md-code-built_in">console</span>.log(people)
<span class="md-code-comment">// &lt;- [&apos;Tesla&apos;, &apos;Musk&apos;, &apos;Berners-Lee&apos;]</span>
</code></pre></div>

<div><p>A <code class="md-code md-code-inline">const</code> statement only prevents the variable binding from referencing a different value. Another way of representing that difference is the following piece of code, where we create a <code class="md-code md-code-inline">people</code> variable using <code class="md-code md-code-inline">const</code>, and later assign that variable to a plain <code class="md-code md-code-inline">var humans</code> binding. We can reassign the <code class="md-code md-code-inline">humans</code> variable to reference something else, because it wasn&#x2019;t declared using <code class="md-code md-code-inline">const</code>. However, we can&#x2019;t reassign <code class="md-code md-code-inline">people</code> to reference something else, because it was created using <code class="md-code md-code-inline">const</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> people = [<span class="md-code-string">&apos;Tesla&apos;</span>, <span class="md-code-string">&apos;Musk&apos;</span>]
<span class="md-code-keyword">var</span> humans = people
humans = <span class="md-code-string">&apos;evil&apos;</span>
<span class="md-code-built_in">console</span>.log(humans)
<span class="md-code-comment">// &lt;- &apos;evil&apos;</span>
</code></pre> <p>If our goal was to make the value immutable, then we&#x2019;d have to use a function such as <code class="md-code md-code-inline">Object.freeze</code>. Using <code class="md-code md-code-inline">Object.freeze</code> prevents extensions to the provided object, as represented in the following code snippet.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> frozen = <span class="md-code-built_in">Object</span>.freeze([<span class="md-code-string">&apos;Ice&apos;</span>, <span class="md-code-string">&apos;Icicle&apos;</span>, <span class="md-code-string">&apos;Ice cube&apos;</span>])
frozen.push(<span class="md-code-string">&apos;Water&apos;</span>)
<span class="md-code-comment">// Uncaught TypeError: Can&apos;t add property 3, object is not extensible</span>
</code></pre></div>
