<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/setting-up-angular-2-development-environment">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/setting-up-angular-2-development-environment"><div><img src="https://i.imgur.com/QCjmRYJ.jpg" alt="Setting up an Angular 2 Development Environment"></div></a>

<h1>Setting up an Angular 2 Development Environment</h1>

<p><kbd>angular-2</kbd> <kbd>cloudinary</kbd> <kbd>typescript</kbd></p>

<blockquote><p>Angular 2 is the rave of the moment. It is a modern JavaScript framework that is supercharged with awesome features. In fact, Angular 2 is now more than a framework, it &#x2026;</p></blockquote>

<div><p>Angular 2 is the rave of the moment. It is a modern JavaScript framework that is supercharged with awesome features. In fact, Angular 2 is now more than a framework, it is a platform for developing web, mobile and desktop applications. It is a complete re-write of Angular 1 that takes advantage of the new ES6 features, TypeScript, server-side rendering, RxJS and the goodies that modern JavaScript has to offer.</p></div>

<blockquote><p>Today we have a sponsored article from Cloudinary, where Prosper writes about setting up an Angular 2 development environment with all the different tools that are available to its ecosystem. You&#x2019;ll learn a bit about TypeScript, SystemJS, and webpack.</p> <p><a href="http://cloudinary.com/?utm_source=ponyfoo&amp;utm_medium=Sponsored_post_1&amp;utm_content=Angular2" target="_blank" rel="noopener noreferrer">Cloudinary</a> is an image and video management solution on the cloud for front-end developers, and I&#x2019;m super excited that they&#x2019;re sponsoring us! &#x2601;&#xFE0F;&#x1F5BC;</p><p align="right"><sub><em>&#x2014; Editor&#x2019;s note.</em></sub></p></blockquote>

<div><p>Angular 2 requires a bit of setup to get started. To avoid the headaches associated with setup, the Angular team came up with the <a href="https://cli.angular.io/" target="_blank" rel="noopener noreferrer">Angular CLI</a>. The Angular 2 CLI makes it easy to create an application that just works out of the box.</p> <p>Install the Angular 2 CLI globally:</p> <pre class="md-code-block"><code class="md-code md-lang-bash">npm install -g angular-cli
</code></pre> <p><strong>Note:</strong> The Angular team has decided to drop the 2 from the name. So, it is now called <strong>Angular</strong> instead of <strong>Angular 2</strong>. For the sake of this tutorial, I&#x2019;ll use Angular 2 to prevent confusion from developers just trying out the framework for the first time.</p> <p>Use these commands to simply create your app and run it:</p> <pre class="md-code-block"><code class="md-code md-lang-bash">ng new myapp // creates a new app
ng generate // generates components, routes, services and pipes
ng serve // serves your application <span class="md-code-keyword">in</span> the browser
</code></pre> <p>In this tutorial, we&#x2019;ll avoid using the CLI and learn how to set up our development environment from scratch. Meanwhile if you are interested in using the CLI with <a href="http://cloudinary.com/?utm_source=ponyfoo&amp;utm_medium=Sponsored_post_1&amp;utm_content=Angular2" target="_blank" rel="noopener noreferrer">Cloudinary</a>, check out this <a href="https://github.com/cloudinary/cloudinary_angular/tree/angular_next/samples/angular-cli-sample" target="_blank" rel="noopener noreferrer">great sample</a>. Should we use SystemJS? Is Webpack the best option? How does the transpiling work? You&#x2019;ll get the answers to these questions as we get our hands dirty with the nitty-gritty of setting up an Angular 2 application.</p></div>

<div><h2 id="set-up-your-base-project">Set up Your Base Project</h2> <p>Quickly go ahead and create a new directory, <code class="md-code md-code-inline">newapp</code>. Move into the directory and create an <code class="md-code md-code-inline">index.html</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">html</span> <span class="md-code-attribute">lang</span>=<span class="md-code-value">&quot;en&quot;</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">head</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">meta</span> <span class="md-code-attribute">charset</span>=<span class="md-code-value">&quot;UTF-8&quot;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">title</span>&gt;</span>Angular 2 app<span class="md-code-tag">&lt;/<span class="md-code-title">title</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">head</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">body</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">h2</span>&gt;</span>Setting up my development environment<span class="md-code-tag">&lt;/<span class="md-code-title">h2</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">html</span>&gt;</span>
</code></pre> <p>Create another file, <code class="md-code md-code-inline">package.json</code> by running the <code class="md-code md-code-inline">npm init</code> command from the terminal. You can simply just type enter several times throughout all the questions been asked to speedily create the file.</p> <p>Let&#x2019;s install a package, <code class="md-code md-code-inline">lite-server</code>, that will allow us to serve our application like so:</p> <pre class="md-code-block"><code class="md-code md-lang-bash">npm install --save-dev lite-server
</code></pre> <p><strong>Note:</strong> <code class="md-code md-code-inline">lite-server</code> comes bundled with <a href="https://www.browsersync.io/" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">browser-sync</code></a> which automatically reloads the browser when our files change.</p> <p>Open up <code class="md-code md-code-inline">package.json</code> to configure <code class="md-code md-code-inline">lite-server</code> like so:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-string">&quot;scripts&quot;</span>: {
  <span class="md-code-string">&quot;test&quot;</span>: <span class="md-code-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,
  <span class="md-code-string">&quot;lite&quot;</span>: <span class="md-code-string">&quot;lite-server&quot;</span>
}
</code></pre> <p>Now run <code class="md-code md-code-inline">npm run lite</code> from your terminal, your browser should open up displaying your application and in your terminal, you should see something like this:</p> <figure><img alt="Getting up and running with lite-server" class="" src="https://lh5.googleusercontent.com/FekVGkoPt2gq8VzN5XLarr93psyFuI-_O0bUwJWZVLh9gzQiOJaXavUPuroyMjoPFRfmveefETIbMADUX3R_5Ij7_HIH7xxXj70L6M0CTbVGEjbVSkbYX7RwabOuESpPEFyJY-Br"></figure> <p>Change something within your <code class="md-code md-code-inline">index.html</code> file and you&#x2019;ll discover that your browser refreshes automatically and reflects that change!</p> <h2 id="configuring-the-typescript-language">Configuring the TypeScript Language</h2> <p>You can decide to use TypeScript or use vanilla JavaScript. Personally, I prefer TypeScript because it is JavaScript with some sugar added to it like type checking. So let&#x2019;s go ahead and install TypeScript like so:</p> <pre class="md-code-block"><code class="md-code md-lang-bash">npm install --save-dev typescript
</code></pre> <p>Create a file, <code class="md-code md-code-inline">tsconfig.json</code> in your directory. All our TypeScript configuration live here.</p> <p>Open up your <code class="md-code md-code-inline">tsconfig.json</code> and add the following:</p> <pre class="md-code-block"><code class="md-code md-lang-json">{
  &quot;<span class="md-code-attribute">compilerOptions</span>&quot;: <span class="md-code-value">{
    &quot;<span class="md-code-attribute">target</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;es5&quot;</span></span>,
    &quot;<span class="md-code-attribute">module</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;commonjs&quot;</span></span>,
    &quot;<span class="md-code-attribute">moduleResolution</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;node&quot;</span></span>,
    &quot;<span class="md-code-attribute">sourceMap</span>&quot;: <span class="md-code-value"><span class="md-code-literal">true</span></span>,
    &quot;<span class="md-code-attribute">emitDecoratorMetadata</span>&quot;: <span class="md-code-value"><span class="md-code-literal">true</span></span>,
    &quot;<span class="md-code-attribute">experimentalDecorators</span>&quot;: <span class="md-code-value"><span class="md-code-literal">true</span></span>,
    &quot;<span class="md-code-attribute">removeComments</span>&quot;: <span class="md-code-value"><span class="md-code-literal">false</span></span>,
    &quot;<span class="md-code-attribute">noImplicitAny</span>&quot;: <span class="md-code-value"><span class="md-code-literal">false</span>
  </span>}
</span>}
</code></pre> <p>Thanks to the <code class="md-code md-code-inline">&quot;target&quot;: &quot;es5&quot;</code> option, TypeScript will transpile our ES6 code to ES5 so that all browsers can understand the JavaScript code we write. Then we also want <a href="https://www.html5rocks.com/en/tutorials/developertools/sourcemaps/" target="_blank" rel="noopener noreferrer">sourcemaps</a> and <a href="http://myrighttocode.org/blog/typescript/angular2/decorators/angular2-custom-decorators" target="_blank" rel="noopener noreferrer">decorators</a>. In Angular 2, lots of decorators are used.</p> <p>Go ahead and install these scoped npm packages like so:</p> <pre class="md-code-block"><code class="md-code md-lang-bash">npm install @types/node @types/core-js @types/jasmine --save-dev
</code></pre> <p>The reason for installing these packages is to add type definitions to our project. It will make our editor support type-hinting, language highlighting for TypeScript, JavaScript and the modules from node we use in our code.</p> <p>Open up your <code class="md-code md-code-inline">package.json</code> file again, let&#x2019;s add new commands in the scripts section like so:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-string">&quot;scripts&quot;</span>: {
  <span class="md-code-string">&quot;start&quot;</span>: <span class="md-code-string">&quot;tsc &amp;&amp; concurrently \&quot;npm run tsc:w\&quot; \&quot;npm run lite\&quot;&quot;</span>,
  <span class="md-code-string">&quot;test&quot;</span>: <span class="md-code-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,
  <span class="md-code-string">&quot;lite&quot;</span>: <span class="md-code-string">&quot;lite-server&quot;</span>,
  <span class="md-code-string">&quot;tsc&quot;</span>: <span class="md-code-string">&quot;tsc&quot;</span>,
  <span class="md-code-string">&quot;tsc:w&quot;</span>: <span class="md-code-string">&quot;tsc -w&quot;</span>
},
</code></pre> <p>So, <code class="md-code md-code-inline">tsc</code> is to start up TypeScript compiler &amp; <code class="md-code md-code-inline">tsc:w</code> is to watch for file changes. We also added the <code class="md-code md-code-inline">start</code> command which will run three commands together concurrently. However, you can take advantage o<a href="https://angular.io/docs/ts/latest/cookbook/aot-compiler.html" target="_blank" rel="noopener noreferrer">f Angular&#x2019;s AOT compiler</a>. It replaces the usage of <code class="md-code md-code-inline">tsc</code> with ngc which is Angular template compiler <em>(a drop-in replacement for <code class="md-code md-code-inline">tsc</code>)</em>.</p> <p>Wait a minute! How do we run three commands concurrently? Aha! <a href="https://www.npmjs.com/package/concurrently" target="_blank" rel="noopener noreferrer">Concurrently</a> package to the rescue.</p> <h2 id="setting-up-concurrently">Setting up Concurrently</h2> <p><a href="https://www.npmjs.com/package/concurrently" target="_blank" rel="noopener noreferrer">Concurrently</a> is a nodejs package that allows us to run multiple commands concurrently. Let&#x2019;s pull in the package.</p> <pre class="md-code-block"><code class="md-code md-lang-bash">npm install concurrently --save-dev
</code></pre> <p>Now, run <code class="md-code md-code-inline">npm start</code> from the terminal to start your application with <code class="md-code md-code-inline">lite-server</code> and <code class="md-code md-code-inline">typescript</code> working concurrently like so:</p> <figure><img alt="Running the lite server once again." class="" src="https://lh4.googleusercontent.com/yeR-9esIWPphC2zxEKZ2z8Hky4Y2qIPYwN5SCIbPSuFvDtK8SsBdoCksB11go2MUpUpHmXnKMJJvvMidpbuOtRttVCx1f69oLrCD42LAFwbUJ1OzHvPf3i8nYhzRA4Ytf0OEH0WA"></figure> <p>Your App is now being served locally.</p> <figure><img alt="Lite server is running" class="" src="https://lh4.googleusercontent.com/5XXvRS0xq-cF09hK9JYfD1OG2XBDxZeSSvWcqTJrCTDKe-EBe_59S-N-t7Sr2yS6j2ayeN6FxzlmCqd9jFkMFF2iYWaCmCfbm5MAR5ufPbfZYTwRS2gzRPKvaL1gNKY8MJoeav7h"></figure> <h2 id="install-angular-2-dependencies-and-packages">Install Angular 2 Dependencies &amp; Packages</h2> <p>With great power, comes great responsibilities. Angular 2 depends on some libraries &amp; tools to wield such power.</p> <ul> <li><a href="https://github.com/angular/zone.js/" target="_blank" rel="noopener noreferrer">zone.js</a> simply makes our debugging much productive and supports change detection in our code</li> <li><a href="https://github.com/zloirock/core-js" target="_blank" rel="noopener noreferrer">core-js</a> standard library for JavaScript that includes polyfills for ES5, ES6, ES7 features in browsers</li> <li><a href="http://reactivex.io/" target="_blank" rel="noopener noreferrer">rxjs</a> hands us observables and asynchronous data streams</li> </ul> <p>So let&#x2019;s go ahead and install these tools like so:</p> <pre class="md-code-block"><code class="md-code md-lang-bash">npm install zone.js core-js rxjs@<span class="md-code-number">5.0</span>.<span class="md-code-number">3</span> systemjs --save
</code></pre> <p>Having installed these dependencies, let&#x2019;s pull in some packages that we will need to set up a basic Angular 2 app.</p> <pre class="md-code-block"><code class="md-code md-lang-bash">npm install --save \
  @angular/platform-browser \
  @angular/platform-browser-dynamic \
  @angular/core \
  @angular/common \
  @angular/compiler \
  @angular/http \
  @angular/forms \
  @angular/router
</code></pre> <h2 id="using-the-systemjs-package-loader">Using the SystemJS package loader</h2> <p>We need a loader to help load all the angular packages that we use in the app. Angular needs a tool to point it to where each and every package is whenever it invokes the package functionalities. <a href="https://github.com/systemjs/systemjs" target="_blank" rel="noopener noreferrer">SystemJS</a> is a universal dynamic loader. It loads ES6 modules, CommonJS, AMD and global scripts in the browser and NodeJS.</p> <p>Create a new file, <code class="md-code md-code-inline">systemjs.config.js</code>, the SystemJS configuration file in the root directory and add <a href="https://gist.github.com/unicodeveloper/4926d1852811624a11cc270559ea0c25" target="_blank" rel="noopener noreferrer">the contents of this gist</a> to it. Take a look at the gist first, too. You&#x2019;ll see something like:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><mark class="md-mark md-code-mark">...</mark>

map: {
  <span class="md-code-comment">// our app is within the app folder</span>
  app: <span class="md-code-string">&apos;dist&apos;</span>,

  <span class="md-code-comment">// angular bundles</span>
  <span class="md-code-string">&apos;@angular/core&apos;</span>: <span class="md-code-string">&apos;npm:@angular/core/bundles/core.umd.js&apos;</span>,
  <span class="md-code-string">&apos;@angular/common&apos;</span>: <span class="md-code-string">&apos;npm:@angular/common/bundles/common.umd.js&apos;</span>,
  <span class="md-code-string">&apos;@angular/compiler&apos;</span>: <span class="md-code-string">&apos;npm:@angular/compiler/bundles/compiler.umd.js&apos;</span>,
  <span class="md-code-string">&apos;@angular/platform-browser&apos;</span>: <span class="md-code-string">&apos;npm:@angular/platform-browser/bundles/platform-browser.umd.js&apos;</span>,
  <span class="md-code-string">&apos;@angular/platform-browser-dynamic&apos;</span>: <span class="md-code-string">&apos;npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js&apos;</span>,
  <span class="md-code-string">&apos;@angular/http&apos;</span>: <span class="md-code-string">&apos;npm:@angular/http/bundles/http.umd.js&apos;</span>,
  <span class="md-code-string">&apos;@angular/router&apos;</span>: <span class="md-code-string">&apos;npm:@angular/router/bundles/router.umd.js&apos;</span>,
  <span class="md-code-string">&apos;@angular/forms&apos;</span>: <span class="md-code-string">&apos;npm:@angular/forms/bundles/forms.umd.js&apos;</span>,

  <span class="md-code-comment">// other libraries</span>
  <span class="md-code-string">&apos;rxjs&apos;</span>:                      <span class="md-code-string">&apos;npm:rxjs&apos;</span>,
  <span class="md-code-string">&apos;ng2-file-upload&apos;</span>:           <span class="md-code-string">&apos;npm:ng2-file-upload&apos;</span>,
  <span class="md-code-string">&apos;cloudinary-core&apos;</span>:           <span class="md-code-string">&apos;npm:cloudinary-core&apos;</span>,
  <span class="md-code-string">&apos;@cloudinary/angular&apos;</span>:       <span class="md-code-string">&apos;npm:@cloudinary/angular&apos;</span>,
  <span class="md-code-string">&apos;Angular-in-memory-web-api&apos;</span>: <span class="md-code-string">&apos;npm:angular-in-memory-web-api/bundles/in-memory-web-api.umd.js&apos;</span>
},

<mark class="md-mark md-code-mark">...</mark>
</code></pre> <p>It looks for the application files to run in the <code class="md-code md-code-inline">app</code> directory, you can change it to whatever directory you want. You can also see that it has specified what directory to look for angular packages, <code class="md-code md-code-inline">node_modules/@angular</code>.</p> <p>Take another good look at this section too:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><mark class="md-mark md-code-mark">...</mark>

<span class="md-code-comment">// `packages` tells the System loader how to load when no filename and/or no extension</span>
packages: {
  app: {
    main: <span class="md-code-string">&apos;./main.js&apos;</span>, defaultExtension: <span class="md-code-string">&apos;js&apos;</span>
  },
  rxjs: {
    defaultExtension: <span class="md-code-string">&apos;js&apos;</span>
  },
  <span class="md-code-string">&apos;ng2-file-upload&apos;</span>: {
    main: <span class="md-code-string">&apos;ng2-file-upload.js&apos;</span>, defaultExtension: <span class="md-code-string">&apos;js&apos;</span>
  },
  <span class="md-code-string">&apos;cloudinary-core&apos;</span>: {
    main: <span class="md-code-string">&apos;cloudinary-core-shrinkwrap.js&apos;</span>, defaultExtension: <span class="md-code-string">&apos;js&apos;</span>
  },
  <span class="md-code-string">&apos;@cloudinary/angular&apos;</span>: {
    main: <span class="md-code-string">&apos;index.js&apos;</span>, defaultExtension: <span class="md-code-string">&apos;js&apos;</span>
  }
}

<mark class="md-mark md-code-mark">...</mark>
</code></pre> <p>This config lets SystemJS know how and what to load in the app.</p> <p>Now head over to your <code class="md-code md-code-inline">index.html</code> and reference the polyfills we installed earlier. Then load <code class="md-code md-code-inline">SystemJS</code> like so:</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">html</span> <span class="md-code-attribute">lang</span>=<span class="md-code-value">&quot;en&quot;</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">head</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">meta</span> <span class="md-code-attribute">charset</span>=<span class="md-code-value">&quot;UTF-8&quot;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">title</span>&gt;</span>Angular 2 app<span class="md-code-tag">&lt;/<span class="md-code-title">title</span>&gt;</span>

  <span class="md-code-tag">&lt;<span class="md-code-title">script</span> <span class="md-code-attribute">src</span>=<span class="md-code-value">&quot;node_modules/core-js/client/shim.min.js&quot;</span>&gt;</span><span></span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">script</span> <span class="md-code-attribute">src</span>=<span class="md-code-value">&quot;node_modules/zone.js/dist/zone.js&quot;</span>&gt;</span><span></span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>

  <span class="md-code-comment">&lt;!-- Load our angular app with Systemjs --&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">script</span> <span class="md-code-attribute">src</span>=<span class="md-code-value">&quot;node_modules/systemjs/dist/system.src.js&quot;</span>&gt;</span><span></span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">script</span> <span class="md-code-attribute">src</span>=<span class="md-code-value">&quot;systemjs.config.js&quot;</span>&gt;</span><span></span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">script</span>&gt;</span><span>
    System.import(<span class="md-code-string">&apos;app&apos;</span>).catch(<span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">(err)</span> </span>{ <span class="md-code-built_in">console</span>.error(err); });
  </span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">head</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">body</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">h2</span>&gt;</span>Setting up my development environment<span class="md-code-tag">&lt;/<span class="md-code-title">h2</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">html</span>&gt;</span>
</code></pre> <h2 id="use-webpack-as-an-alternative">Use Webpack as an Alternative</h2> <p><a href="https://webpack.github.io/" target="_blank" rel="noopener noreferrer">Webpack</a> is a fantastic alternative to SystemJS. It is a popular module loader and bundler that helps load code from a server into a browser and generates static assets.</p> <p>There are different ways of configuring Webpack for use in an Angular 2 application. One such way is installing <code class="md-code md-code-inline">webpack</code> and its <code class="md-code md-code-inline">dev-server</code>.</p> <p><strong>Note:</strong> Webpack 1.x was used here.</p> <pre class="md-code-block"><code class="md-code md-lang-bash">npm install webpack webpack-dev-server --save-dev
</code></pre> <p>Then, you can install webpack loaders. Loaders help preprocess different types of files, so there are loaders for different files.</p> <pre class="md-code-block"><code class="md-code md-lang-bash">npm install --save-dev \
  angular2-template-loader \
  awesome-typescript-loader \
  CSS-loader \
  file-loader \
  html-loader \
  null-loader \
  raw-loader \
  style-loader \
  to-string-loader
</code></pre> <p>Another advantage of using Webpack is the presence of plugins. Webpack plugins alter the behaviour of webpack for different scenarios. For example:</p> <ul> <li><code class="md-code md-code-inline">Defineplugin</code> is used to define environment variables that we can reference within our app</li> <li><code class="md-code md-code-inline">UglifyJSPlugin</code> minifies the bundles</li> <li><code class="md-code md-code-inline">NoErrorsPlugin</code> stops the build if there is any error</li> <li><code class="md-code md-code-inline">ExtractTextPlugin</code> extracts embedded css as external files</li> </ul> <p>So, let&#x2019;s install some plugins like so:</p> <pre class="md-code-block"><code class="md-code md-lang-bash">npm install --save-dev \
  html-webpack-plugin \
  webpack-merge \
  extract-text-webpack-plugin
</code></pre> <p>Let&#x2019;s configure Webpack. We will need a bundle for our application code, another for the vendor(angular libraries that were imported) code and a third one for the polyfills. So create a file, <code class="md-code md-code-inline">vendor.ts</code> in the root directory.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">import <span class="md-code-string">&apos;@angular/platform-browser&apos;</span>;
import <span class="md-code-string">&apos;@angular/platform-browser-dynamic&apos;</span>;
import <span class="md-code-string">&apos;@angular/core&apos;</span>;
import <span class="md-code-string">&apos;@angular/common&apos;</span>;
import <span class="md-code-string">&apos;@angular/http&apos;</span>;
import <span class="md-code-string">&apos;@angular/router&apos;</span>;
import <span class="md-code-string">&apos;@angular/forms&apos;</span>;
import <span class="md-code-string">&apos;rxjs&apos;</span>;
</code></pre> <p>Create another file, <code class="md-code md-code-inline">polyfills.ts</code>, in the root directory like so:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">import <span class="md-code-string">&apos;core-js/es6&apos;</span>;
import <span class="md-code-string">&apos;core-js/es7/reflect&apos;</span>;
<span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;zone.js/dist/zone&apos;</span>);

<span class="md-code-keyword">if</span> (process.env.ENV === <span class="md-code-string">&apos;production&apos;</span>) {
  <span class="md-code-comment">// production</span>
} <span class="md-code-keyword">else</span> {
  <span class="md-code-comment">// development</span>
  <span class="md-code-built_in">Error</span>.stackTraceLimit = <span class="md-code-literal">Infinity</span>;
  <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;zone.js/dist/long-stack-trace-zone&apos;</span>);
}
</code></pre> <p>Create a new file, <code class="md-code md-code-inline">webpack.config.js</code>, the Webpack configuration file in the root directory like so:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">module</span>.exports = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;./config/webpack.dev.js&apos;</span>);
</code></pre> <p>Another advantage to using Webpack is the ability to have separate configuration for testing, development and production. So go ahead and create a <code class="md-code md-code-inline">config</code> folder. The webpack config will reside here.</p> <p>Create a file, <code class="md-code md-code-inline">webpack.common.js</code> inside the <code class="md-code md-code-inline">config</code> directory and add this code to it:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> webpack = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;webpack&apos;</span>);
<span class="md-code-keyword">const</span> HtmlWebpackPlugin = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;html-webpack-plugin&apos;</span>);
<span class="md-code-keyword">const</span> ExtractTextPlugin = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;extract-text-webpack-plugin&apos;</span>);
<span class="md-code-keyword">const</span> path = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;path&apos;</span>);
<span class="md-code-keyword">const</span> rootDir = path.resolve(__dirname, <span class="md-code-string">&apos;..&apos;</span>);

<span class="md-code-built_in">module</span>.exports = {
  entry: {
    polyfills: <span class="md-code-string">&apos;./src/polyfills.ts&apos;</span>,
    vendor: <span class="md-code-string">&apos;./src/vendor.ts&apos;</span>,
    app: <span class="md-code-string">&apos;./src/main.ts&apos;</span>
  },
  resolve: {
    extensions: [<span class="md-code-string">&apos;&apos;</span>, <span class="md-code-string">&apos;.js&apos;</span>, <span class="md-code-string">&apos;.ts&apos;</span>]
  },
  <span class="md-code-built_in">module</span>: {
    loaders: [{
      test: <span class="md-code-regexp">/\.ts$/</span>,
      loaders: [<span class="md-code-string">&apos;awesome-typescript-loader&apos;</span>, <span class="md-code-string">&apos;angular2-template-loader&apos;</span>]
    }, {
      test: <span class="md-code-regexp">/\.html$/</span>,
      loader: <span class="md-code-string">&apos;html&apos;</span>
    }, {
      test: <span class="md-code-regexp">/\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/</span>,
      loader: <span class="md-code-string">&apos;file?name=assets/[name].[hash].[ext]&apos;</span>
    }, {
      test: <span class="md-code-regexp">/\.css$/</span>,
      loaders: [<span class="md-code-string">&apos;to-string-loader&apos;</span>, <span class="md-code-string">&apos;css-loader&apos;</span>]
    }]
  },
  plugins: [
    <span class="md-code-keyword">new</span> webpack.optimize.CommonsChunkPlugin({
      name: [<span class="md-code-string">&apos;app&apos;</span>, <span class="md-code-string">&apos;vendor&apos;</span>, <span class="md-code-string">&apos;polyfills&apos;</span>]
    }),
    <span class="md-code-keyword">new</span> HtmlWebpackPlugin({
      template: <span class="md-code-string">&apos;src/index.html&apos;</span>
    })
  ]
};
</code></pre> <p>Create a <code class="md-code md-code-inline">webpack.dev.js</code> file inside the config folder too, like so:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> webpackMerge = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;webpack-merge&apos;</span>);
<span class="md-code-keyword">const</span> ExtractTextPlugin = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;extract-text-webpack-plugin&apos;</span>);
<span class="md-code-keyword">const</span> commonConfig = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;./webpack.common.js&apos;</span>);
<span class="md-code-keyword">const</span> path = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;path&apos;</span>);
<span class="md-code-keyword">const</span> rootDir = path.resolve(__dirname, <span class="md-code-string">&apos;..&apos;</span>);

<span class="md-code-built_in">module</span>.exports = webpackMerge(commonConfig, {
  devtool: <span class="md-code-string">&apos;cheap-module-eval-source-map&apos;</span>,
  output: {
    path: path.resolve(rootDir, <span class="md-code-string">&apos;dist&apos;</span>),
    publicPath: <span class="md-code-string">&apos;http://localhost:8080/&apos;</span>,
    filename: <span class="md-code-string">&apos;[name].js&apos;</span>,
    chunkFilename: <span class="md-code-string">&apos;[id].chunk.js&apos;</span>
  },
  plugins: [
    <span class="md-code-keyword">new</span> ExtractTextPlugin(<span class="md-code-string">&apos;[name].css&apos;</span>)
  ],
  devServer: {
    historyApiFallback: <span class="md-code-literal">true</span>,
    stats: <span class="md-code-string">&apos;minimal&apos;</span>
  }
});
</code></pre> <p>In the code above, you can see that <code class="md-code md-code-inline">webpack.dev.js</code> imports the <code class="md-code md-code-inline">webpack.common.js</code> and defines some extra configuration like setting a directory for the build output, defining how the source map is created and removing the compiled css from the bundle to place it in a separate file.</p> <p>The advantage of using SystemJS is that the setup is not as complex and verbose as Webpack. It&#x2019;s simple and straightforward but Webpack offers a whole lot more functionalities and is needed as your app grows to become complex.</p> <h2 id="build-a-sample-app-with-cloudinary">Build A Sample App With Cloudinary</h2> <p><a href="http://cloudinary.com/?utm_source=ponyfoo&amp;utm_medium=Sponsored_post_1&amp;utm_content=Angular2" target="_blank" rel="noopener noreferrer">Cloudinary</a> provides an API for uploading images and any other kind of files to the cloud. These files are safely stored in the cloud with secure backups and revision history.</p> <p><a href="http://cloudinary.com/?utm_source=ponyfoo&amp;utm_medium=Sponsored_post_1&amp;utm_content=Angular2" target="_blank" rel="noopener noreferrer">Cloudinary</a> already takes away the pain of having to write large amounts of code to interact with their API by providing a new <a href="https://github.com/cloudinary/cloudinary_angular/tree/angular_next" target="_blank" rel="noopener noreferrer">open source Angular 2 SDK</a> that ships with simple, easy-to-use helper methods for:</p> <ul> <li>Image uploading</li> <li>Image administration and sprite generation</li> <li>Embedding of images</li> <li>Image transformation and manipulation</li> </ul> <p>With the Angular 2 SDK, you can also adapt images for delivery on any device. Uploaded images can be manipulated, on-the-fly to deliver each user a version that suits the requirements of the viewing device while optimizing performance. <a href="http://cloudinary.com/?utm_source=ponyfoo&amp;utm_medium=Sponsored_post_1&amp;utm_content=Angular2" target="_blank" rel="noopener noreferrer">Cloudinary</a> can automatically crop images to focus on the most important region, select the most optimal quality and format and responsively deliver the image on any device in any resolution or pixel density.</p> <p>What are we waiting for? Let&#x2019;s get started on how to upload images in an Angular 2 app using <a href="http://cloudinary.com/?utm_source=ponyfoo&amp;utm_medium=Sponsored_post_1&amp;utm_content=Angular2" target="_blank" rel="noopener noreferrer">Cloudinary</a>!</p> <p>1. Sign up for a Cloudinary Account</p> <figure><img alt="Signing up for Cloudinary is free." class="" src="https://lh3.googleusercontent.com/h6_U4MKoHUx8dO6XMZPL_DAZRpD4wLord4A6jX6rC822PPJat3V6Y_GoYP1hNj3R03A5-2dbOT7kbZJDqgSmZ92ZaN-iW8iXEFR40O8GNrDRnycOxHVOXiExuDX4bjD6fjjMDhhI"></figure> <p>2. Enable <em>&#x201C;unsigned uploads&#x201D;</em> in the <a href="https://cloudinary.com/console/settings/upload" target="_blank" rel="noopener noreferrer">&#x201C;Upload Settings&#x201D;</a> of your Cloudinary console</p> <figure><img alt="" class="" src="https://lh3.googleusercontent.com/r_pHUTYEP6624UO2MrSZG_-moYXS-JG8ASuTr_Luyw2j4t6fvZ4YXet6Z69cXjSAgUpJ7Qly0meOif1NqK8gGRrqSmYeTPdKxE_Hftg6KuWS6IMQtEzOahUSGj9ynqpkSgk28cph"></figure> <p>You&#x2019;ll need to grab your <code class="md-code md-code-inline">cloud_name</code> from the console.</p> <p>3. We&#x2019;ll just build on the already existing development environment we have that utilizes SystemJS, and use a few new packages.</p> <ul> <li><a href="https://www.npmjs.com/package/@cloudinary/angular" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">@cloudinary/angular</code></a> is the Cloudinary Angular 2 SDK and it depends on the cloudinary JavaScript library to function.</li> <li><a href="https://www.npmjs.com/package/cloudinary-core" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">cloudinary-core</code></a> is the core Cloudinary JavaScript library .</li> <li><a href="https://github.com/valor-software/ng2-file-upload" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">ng2-file-upload</code></a> is an Angular 2 package that allows us to upload files.</li> </ul> <p>So go ahead and install the <a href="http://cloudinary.com/?utm_source=ponyfoo&amp;utm_medium=Sponsored_post_1&amp;utm_content=Angular2" target="_blank" rel="noopener noreferrer">cloudinary</a> package and file upload packages like so:</p> <pre class="md-code-block"><code class="md-code md-lang-bash">npm install --save \
  @cloudinary/angular \
  cloudinary-core \
  ng2-file-upload
</code></pre> <p>Once you are done, update your <code class="md-code md-code-inline">systemjs.config.js</code> to <a href="https://gist.github.com/unicodeveloper/81f54a8dd1046b13124a9217d553615f" target="_blank" rel="noopener noreferrer">the contents of this gist file</a>. After that, open up your <code class="md-code md-code-inline">tsconfig.json</code> file and add this:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><mark class="md-mark md-code-mark">...</mark>

<span class="md-code-string">&quot;outDir&quot;</span> : <span class="md-code-string">&quot;dist&quot;</span>
</code></pre> <p>This is to ensure that all the <code class="md-code md-code-inline">.js</code> files and sourcemaps that are produced from the TypeScript files are all in one directory rather than occupy space in the other directories.</p> <p>4. Create the <a href="https://github.com/unicodeveloper/angular-2-cloudinary/blob/master/app/app.component.ts" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">app.component.ts</code></a>, <a href="https://github.com/unicodeveloper/angular-2-cloudinary/blob/master/app/app.module.ts" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">app.module.ts</code></a>, <a href="https://github.com/unicodeveloper/angular-2-cloudinary/blob/master/app/app.routing.ts" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">app.routing.ts</code></a>, <a href="https://github.com/unicodeveloper/angular-2-cloudinary/blob/master/app/app.component.css" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">app.component.css</code></a>, <a href="https://github.com/unicodeveloper/angular-2-cloudinary/blob/master/app/app.component.html" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">app.component.html</code></a>, <code class="md-code md-code-inline">config.ts</code>, <a href="https://github.com/unicodeveloper/angular-2-cloudinary/blob/master/app/main.ts" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">main.ts</code></a> and populate them.</p> <p>In the <code class="md-code md-code-inline">app.module.ts</code> file, we imported the <a href="http://cloudinary.com/?utm_source=ponyfoo&amp;utm_medium=Sponsored_post_1&amp;utm_content=Angular2" target="_blank" rel="noopener noreferrer">Cloudinary</a> modules like so:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-comment">// Cloudinary module</span>
import {
  CloudinaryModule,
  CloudinaryConfiguration,
  provideCloudinary
} from <span class="md-code-string">&apos;@cloudinary/angular&apos;</span>;
</code></pre> <p>Now add your Cloudinary details in <code class="md-code md-code-inline">config.ts</code> like so:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">export <span class="md-code-keyword">default</span> {
  cloud_name: <mark class="md-mark md-code-mark"><span class="md-code-string">&apos;xxxxxxx&apos;</span></mark>,
  upload_preset: <mark class="md-mark md-code-mark"><span class="md-code-string">&apos;xxxxxx&apos;</span></mark>
};
</code></pre> <p>5. We&#x2019;ll deal with photo uploading, listing the photos and perform some transformations on them with the aid of <a href="http://cloudinary.com/?utm_source=ponyfoo&amp;utm_medium=Sponsored_post_1&amp;utm_content=Angular2" target="_blank" rel="noopener noreferrer">Cloudinary</a>. So go ahead and create two folders, photo-list and photo-upload inside the app directory.</p> <p>In the <code class="md-code md-code-inline">photo-list</code> directory, add <a href="https://github.com/unicodeveloper/angular-2-cloudinary/blob/master/app/photo-list/photo-list.component.css" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">photo-list.component.css</code></a>, <a href="https://github.com/unicodeveloper/angular-2-cloudinary/blob/master/app/photo-list/photo-list.component.html" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">photo-list.component.html</code></a> and <a href="https://github.com/unicodeveloper/angular-2-cloudinary/blob/master/app/photo-list/photo-list.component.ts" target="_blank" rel="noopener noreferrer">photo-list.component.ts</a>.</p> <p>In the <code class="md-code md-code-inline">photo-upload</code> directory, add <a href="https://github.com/unicodeveloper/angular-2-cloudinary/blob/master/app/photo-upload/photo-upload.component.html" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">photo-upload.component.html</code></a> and <a href="https://github.com/unicodeveloper/angular-2-cloudinary/blob/master/app/photo-upload/photo-upload.component.ts" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">photo-upload.component.ts</code></a>.</p> <p>Also, don&#x2019;t forget to create the models for your photos! Create a <code class="md-code md-code-inline">models</code> folder inside the app directory and add <a href="https://github.com/unicodeveloper/angular-2-cloudinary/blob/master/app/model/photo.ts" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">photo.ts</code></a> and <a href="https://github.com/unicodeveloper/angular-2-cloudinary/blob/master/app/model/photo-album.service.ts" target="_blank" rel="noopener noreferrer"><code class="md-code md-code-inline">photo-album.service.ts</code></a>.</p> <p><strong>Note:</strong> Add <code class="md-code md-code-inline">&lt;base href=&quot;/&quot;&gt;</code> to your <code class="md-code md-code-inline">index.html</code> file.</p> <p>So <a href="http://cloudinary.com/?utm_source=ponyfoo&amp;utm_medium=Sponsored_post_1&amp;utm_content=Angular2" target="_blank" rel="noopener noreferrer">Cloudinary</a> provides us with some ready-made Angular 2 directives like:</p> <ul> <li><code class="md-code md-code-inline">&lt;cl-image&gt;</code> allows you to easily fetch and display image on your web page from an external service like facebook</li> <li><code class="md-code md-code-inline">&lt;cl-transformation&gt;</code> allows you to add all sorts of effects &amp; transform the image. For a complete list of image manipulation options see the <a href="http://cloudinary.com/documentation/image_transformations#reference" target="_blank" rel="noopener noreferrer">image transformations reference</a></li> <li><code class="md-code md-code-inline">&lt;cl-video&gt;</code> allows you to embed a video element on your web page</li> </ul> <p>A typical example is:</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">cl-image</span> <span class="md-code-attribute">public-id</span>=<span class="md-code-value">&quot;{some_public_id}&quot;</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;thumbnail inline&quot;</span> <span class="md-code-attribute">angle</span>=<span class="md-code-value">&quot;20&quot;</span> <span class="md-code-attribute">format</span>=<span class="md-code-value">&quot;jpg&quot;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">cl-transformation</span> <span class="md-code-attribute">height</span>=<span class="md-code-value">&quot;150&quot;</span> <span class="md-code-attribute">width</span>=<span class="md-code-value">&quot;150&quot;</span> <span class="md-code-attribute">crop</span>=<span class="md-code-value">&quot;fill&quot;</span> <span class="md-code-attribute">gravity</span>=<span class="md-code-value">&quot;north&quot;</span> <span class="md-code-attribute">effect</span>=<span class="md-code-value">&quot;sepia&quot;</span> <span class="md-code-attribute">radius</span>=<span class="md-code-value">&quot;20&quot;</span>/&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">cl-image</span>&gt;</span>
</code></pre> <p>6. Try running your app. You should be able to upload, list your images and perform some transformations on them, as seen below.</p> <figure><img alt="Cloudinary is alive!" class="" src="https://lh6.googleusercontent.com/25aX-u5bsbDnNpUmLSHZxJqaBuPviBz8WFByXs9jj5mG00PQCCyxfw9jRgQ0ekRU0bo8FdUo71Ut_MFS2zlMK_Jkph9YWQpifX0HrpLIxu-ncrAybiFumSnGXITvv0cnqd3BuBj8"></figure> <p>The complete source code for the application with SystemJS can be found on <a href="https://github.com/unicodeveloper/angular-2-cloudinary" target="_blank" rel="noopener noreferrer">GitHub</a>. The source code for this application with Webpack can be found <a href="https://github.com/cloudinary/cloudinary_angular/tree/angular_next/samples/photo_album" target="_blank" rel="noopener noreferrer">here</a>.</p> <p>This application has also been integrated with Ahead of Time Compilation (AOT) and Rollup too. Check out the <a href="https://github.com/cloudinary/cloudinary_angular/tree/angular_next/samples/photo_album_aot" target="_blank" rel="noopener noreferrer">source code</a> for that.</p> <p>Now, if you need a zero-setup sample, feel free to checkout this <a href="https://embed.plnkr.co/e4GuRg" target="_blank" rel="noopener noreferrer">plunker sample code</a> that demos the use <a href="http://cloudinary.com/?utm_source=ponyfoo&amp;utm_medium=Sponsored_post_1&amp;utm_content=Angular2" target="_blank" rel="noopener noreferrer">Cloudinary</a> directives such as <code class="md-code md-code-inline">&lt;cl-image&gt;</code>.</p> <h2 id="conclusion">Conclusion! &#x26A1;</h2> <p>We have looked at different ways of setting up a development environment for Angular 2 and also taken one of the easiest and very efficient approach of managing file uploads in your Angular 2 application. With <a href="http://cloudinary.com/?utm_source=ponyfoo&amp;utm_medium=Sponsored_post_1&amp;utm_content=Angular2" target="_blank" rel="noopener noreferrer">Cloudinary</a>, file management <em>(images, videos, etc.)</em> hassles should be a thing of the past!</p> <p>For more detail on all the available <a href="http://cloudinary.com/?utm_source=ponyfoo&amp;utm_medium=Sponsored_post_1&amp;utm_content=Angular2" target="_blank" rel="noopener noreferrer">Cloudinary</a> Angular directives and components, check out the <a href="https://github.com/cloudinary/cloudinary_angular/tree/angular_next" target="_blank" rel="noopener noreferrer">SDK documentation</a>.</p></div>
