<h1>Email Sending Done Right</h1>

<div><kbd>ponyfoo</kbd> <kbd>modules</kbd> <kbd>campaign</kbd></div>

<blockquote><p><a href="https://ponyfoo.com/2014/01/01/a-year-in-review">A week ago I wrote</a> about a few goals I&#x2019;ve set for myself in 2014. In particular, I alluded to writing code that&#x2019;s more modular than what I&#x2019;ve been &#x2026;</p></blockquote>

<div><p><a href="https://ponyfoo.com/2014/01/01/a-year-in-review">A week ago I wrote</a> about a few goals I&#x2019;ve set for myself in 2014. In particular, I alluded to writing code that&#x2019;s more modular than what I&#x2019;ve been writing so far:</p></div>

<div></div>

<div><blockquote> <p>In the future, I&#x2019;ll abstain from tightly coupling major pieces of functionality together, and instead force myself to <strong>write reusable components which are well documented</strong>.</p> </blockquote> <p>The blog repository grew in size considerably <em>while I was actively developing it</em>, but it became clear after a few months that some of the design decisions I had made were wrong, such as not doing any server-side rendering at all. I&#x2019;ve set out to revamp the platform, and in doing so, I started to extract modules from the core repository.</p> <p>One such piece is the emailing functionality. In this article I&#x2019;ll examine the design decisions behind <a href="https://github.com/bevacqua/campaign" target="_blank">campaign</a>, the comprehensive email library I extracted from Pony Foo, and detail what sets it apart from existing emailing packages.</p> <p>Spoiler: <strong>it&#x2019;s modularity</strong>.</p></div>

<div><p>Sending emails often involves tons of overhead, you usually want to set up a few different things.</p> <ul> <li>Authentication credentials to either an email account or an email-sending service</li> <li>A pretty email layout so that your messages don&#x2019;t look like spam</li> <li>Templates for each of the different types of email you would send</li> <li>The ability to send out multiple emails using a single API call</li> <li>Debugging facilities for development</li> <li>Some way to embed images so you don&#x2019;t have to serve them</li> </ul> <p>There already are popular solutions that deal with some of these things. For example, <a href="https://github.com/andris9/Nodemailer" target="_blank" aria-label="andris9/Nodemailer on GitHub">Nodemailer</a> deals with the email sending part, but it doesn&#x2019;t provide any <em>easy to find</em> examples of how to deal with a transactional API such as <a href="https://postmarkapp.com/" target="_blank" aria-label="Postmark Transactional Email">Postmark</a> or <a href="http://mandrill.com/" target="_blank" aria-label="Mandrill Email API">Mandrill</a>.</p> <p>Then there&#x2019;s <a href="https://github.com/niftylettuce/node-email-templates" target="_blank" aria-label="niftylettuce/node-email-templates on GitHub">node-email-templates</a>, which deals with templating, but is really opinionated about it. You are to use <a href="https://github.com/visionmedia/ejs" target="_blank" aria-label="visionmedia/ejs on GitHub"><code class="md-code md-code-inline">ejs</code></a>, you need to keep your templates in a directory, they need to be in such-and-such folder structure. Utter non-sense. The funniest part is that the library doesn&#x2019;t really do a lot, other than complicate your templating process and providing a few layouts for you to copy and paste.</p> <h1 id="enter-campaign-6">Enter <a href="https://github.com/bevacqua/campaign" target="_blank" aria-label="bevacqua/campaign on GitHub"><code class="md-code md-code-inline">campaign</code></a></h1> <p><a href="https://github.com/bevacqua/campaign" target="_blank" aria-label="bevacqua/campaign on GitHub"><img alt="campaign.png" class="" src="https://i.imgur.com/BGyQlmp.png"></a></p> <p>When building out the project the first time around, I wrote a bunch of logic to be able to deal with email sending easily. I used <a href="http://mandrill.com/" target="_blank" aria-label="Mandrill Email API">Mandrill</a> for a simple transactional email API, <a href="https://github.com/janl/mustache.js" target="_blank" aria-label="janl/mustache.js on GitHub">Mustache</a> allowed me to write the templates, and I spent a lot of time fiddling with MailChimp&#x2019;s <a href="https://github.com/mailchimp/Email-Blueprints" target="_blank" aria-label="mailchimp/Email-Blueprints on GitHub">responsive email templates</a>, getting the layout just right. I also spent time dealing with embedded images, unsubcribe links, and Mandrill&#x2019;s <a href="http://help.mandrill.com/entries/21678522-How-do-I-use-merge-tags-to-add-dynamic-content-" target="_blank" aria-label="How do I use merge tags to add dynamic content?">merge tags</a>, used to customize emails sent to a lot of people at once.</p> <p>I spent some time improving the API so that it wouldn&#x2019;t be all over the place, making it easy to interact with while keeping the layout, the views, and the models completely separated. This is what it looks like:</p> <p><img alt="email.png" title="Example email sent using campaign" class="" src="https://i.imgur.com/PQXuMfQ.png"></p> <p>Now, I&#x2019;ve extracted the logic from <a href="https://github.com/bevacqua/ponyfoo" target="_blank" aria-label="bevacqua/ponyfoo on GitHub">Pony Foo&#x2019;s codebase</a>, refactoring the code as I went, simplified the API, and made it extensible. You&#x2019;re now able to:</p> <ul> <li>Use it, since <a href="https://github.com/bevacqua/campaign" target="_blank" aria-label="bevacqua/campaign on GitHub">I&#x2019;ve open sourced it</a> (under MIT)</li> <li>Pick any email sending service, not just Mandrill, or bake your own</li> <li>Pick any template engine, or bake your own</li> <li>Get a default email service, just provide an API key</li> <li>Get a default template engine for free</li> <li>Get a default layout template out the box</li> <li>Customize it using styles that better represent your brand</li> </ul> <p>Want to read some code?</p> <pre class="md-code-block"><code class="md-code">var campaign = require(&apos;campaign&apos;);
var client = campaign({
    provider: campaign.providers.terminal()
});
var template = &apos;<p>Your password reset key is: {{reset}}</p>&apos;;
var model = {
    to: &apos;someone@important.com&apos;,
    subject: &apos;Password Reset&apos;,
    reset: &apos;q12jFbwJsCKm&apos;
};

client.sendString(template, model, done);

function done () {
  console.log(&apos;Done.&apos;);
}

</code></pre> <p>The above will compile the template with Mustache, using the model we&#x2019;ve provided, and &#x201C;send&#x201D; that email using the <code class="md-code md-code-inline">terminal</code> transport, which doesn&#x2019;t really send emails, it just prints the JSON on your terminal.</p> <p><img alt="output.png" class="" src="https://i.imgur.com/bt8IUS9.png"></p> <p>I&#x2019;m pretty happy with how the code extraction turned out, and I hope to be able to deliver more focused libraries like this one in the future. <a href="https://github.com/bevacqua/campaign" target="_blank" aria-label="bevacqua/campaign on GitHub">Go read the documentation</a>, I spent <em>a lot of time</em> writing that thing!</p></div>
