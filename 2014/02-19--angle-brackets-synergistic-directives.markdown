<div><blockquote>
  <h1>Angle Brackets, Synergistic Directives</h1>
  <div><p>In <a href="https://ponyfoo.com/2014/02/14/angle-brackets-rifle-scopes">the previous part of this article</a>, I discussed scope events and the behavior of the digest cycle. This time around, I&#x2019;ll talk about directives. Just as &#x2026;</p></div>
</blockquote></div>

<div><p>In <a href="https://ponyfoo.com/2014/02/14/angle-brackets-rifle-scopes">the previous part of this article</a>, I discussed scope events and the behavior of the digest cycle. This time around, I&#x2019;ll talk about directives. Just as promised, this article will cover <strong>isolate scopes, transclusion, linking functions, compilers, directive controllers, and more</strong>.</p></div>

<div></div>

<div><p>If the following figure <a href="http://docs.angularjs.org/guide/concepts" target="_blank"><em>(source)</em></a> looks unreasonably mind bending, then this article might be for you.</p> <p><a href="http://docs.angularjs.org/guide/concepts" target="_blank"><img src="https://i.stack.imgur.com/fkWHA.png" alt="scope.png"></a></p> <p><em>Disclaimer: article based on <a href="https://github.com/angular/angular.js/tree/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d" target="_blank">Angular v1.2.10 tree @ <code class="md-code md-code-inline">caed2dfe4f</code></a>.</em></p> <p><a href="http://angularjs.org/" target="_blank"></a></p> <h1 id="what-the-hell-is-a-directive">What the hell is a directive?</h1> <p>Directives are <em>typically small</em> components which are meant to interact with the DOM, in Angular. They are used as an abstraction layer on top of the DOM, and most manipulation can be achieved without touching DOM elements, wrapped in jQuery, jqLite, or otherwise. This is accomplished by using expressions, and other directives, to achieve the results you want.</p> <p>Directives in Angular core can bind an element property <strong>(such as visibility, class list, inner text, inner HTML, or value)</strong> to a scope property or expression. Most notably, these bindings will be updated whenever changes in the scope are digested, using watches. Similarly, and in the opposite direction, DOM attributes can we &#x201C;watched&#x201D; using an <code class="md-code md-code-inline">$observe</code> function, which will trigger a callback whenever the watched property changes.</p> <p>Directives are, simply put, the single most important face of Angular. If you master directives you won&#x2019;t have any issues dealing with Angular applications. Likewise, if you don&#x2019;t manage to get a hold of directives, you&#x2019;ll be cluelessly grasping at straws, unsure what you&#x2019;ll pull off next. Mastering directives takes time, particularly if you&#x2019;re trying to stay away from merely wrapping a snippet of jQuery-powered code and calling it a day.</p> <blockquote> <p>While directives are supposed to do all of the DOM manipulation, <strong>it&#x2019;s <a href="http://en.wikipedia.org/wiki/Synergy" target="_blank">synergy</a> you should be exploiting</strong>, and not jQuery.</p> </blockquote> <p>Synergy. <strong>Synergy is the long sought-after secret sauce.</strong></p> <h1 id="secret-sauce-synergy">Secret Sauce: Synergy</h1> <p><a href="http://en.wikipedia.org/wiki/Synergy" target="_blank"><em>Synergy</em></a> is a term I&#x2019;ve became intimate with a few years back, as the <a href="http://www.wizards.com/Magic/Magazine/Events.aspx?x=mtgevent/gpba08/welcome#9" target="_blank"><em>enthusiastic</em> (fat) Magic: The Gathering <em>(MTG)</em> player</a> I used to be. The best decks in <em>MTG</em> often are those where each card in your sixty-card deck is empowered by its relationship with the rest of your deck. In these synergistic decks, you run with a significant advantage: each card you draw has the potential of improving the impact each card in your hand has, and this effect grows exponentially, as you draw more cards. You could say that the two most important factors in building a good deck is card drawing sources, and synergistic potential.</p> <p>It&#x2019;s not that different with Angular applications. In Angular applications, the more and more you use Angular&#x2019;s inner-mechanisms, such as scopes, events, services, and the different options available to directives, the more synergistic your application will be. Synergy translates into reusability. Highly synergistic components allow you to share them across parts of an application, or even across applications entirely.</p> <p>Synergy makes Angular applications <em>work as if magic existed</em>. <strong>Synergy makes complex interaction feel easy, reasonable, and understandable.</strong> Synergy is what drives <em>complex interaction into its building blocks</em>, breaking it down into the essentials, which anyone can understand. Synergy is everywhere, synergy isn&#x2019;t just in code itself, but <strong>you can find it in UX, too.</strong> A synergistic application will feel more natural, easier to use, and more intuitive. You&#x2019;ll feel like <em>you know the application</em>, and often guess correctly what the next step will look like, because <em>the application author cared</em> about what you&#x2019;d think should happen.</p> <p>In Angular, synergy means being able to build componentized directives, services, and controllers, which can be reused as often as it makes sense for them to be reused. For instance, you might have a simple directive which turns on a class based on a watched scope expression, and I&#x2019;d imagine that could be a pretty common directive, used everywhere in your application, to signal the state of a particular component in your code. You could have a service to aggregate keyboard shortcut handling, and have controllers, directives, and other services, register shortcuts with that service, rooting all of your keyboard shortcut handling in one nicely self-contained service.</p> <p>Directives are <em>also</em> reusable pieces of functionality, but most often, <strong>these are associated to DOM fragments, or templates</strong>, rather than merely providing functionality. Markup is equally important in providing synergy, if not even more so. Time for me to give you a deep down dive of Angular directives and their use cases.</p></div>

<div><h1 id="creating-a-directive">Creating a directive</h1> <p>Earlier, I <a href="https://ponyfoo.com/2014/02/14/angle-brackets-rifle-scopes" aria-label="Angle Brackets, Rifle Scopes">listed each property available on a scope</a> in Angular, and I used that to explain the digest mechanism, and how scopes operate. I&#x2019;ll do the same for directives, but this time I&#x2019;ll be going through the properties of the object returned by a directive&#x2019;s factory function, and how each of those properties influences the directive we&#x2019;re defining.</p> <p>The first thing of note is the name of the directive. Let&#x2019;s look at a brief example.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">angular.module(<span class="md-code-string">&apos;PonyDeli&apos;</span>).directive(<span class="md-code-string">&apos;pieceOfFood&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">var</span> definition = { <span class="md-code-comment">// &lt;- these are the options we&apos;ll be discussing</span>
    template: <span class="md-code-comment">// ...</span>
  };
  <span class="md-code-keyword">return</span> definition;
});
</code></pre> <p>Even though in the snippet above I&#x2019;m defining a directive named <code class="md-code md-code-inline">&apos;pieceOfFood&apos;</code>, I&#x2019;ll be using a dashed version of that name in the markup, instead. That is, if this directive was implemented as an attribute, I might need to reference it like below, in my HTML.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">span</span> <span class="md-code-attribute">piece-of-food</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">span</span>&gt;</span>
</code></pre> <p>By default, directives can only be triggered as attributes, but what if you want to change this behavior? You can use the <code class="md-code md-code-inline">restrict</code> option.</p> <blockquote> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1590" target="_blank" aria-label="Directives restricted to a location - Angular on GitHub"><code class="md-code md-code-inline">restrict</code></a> Defines how a directive may be applied in markup</li> </ol> </blockquote> <pre class="md-code-block"><code class="md-code md-lang-javascript">angular.module(<span class="md-code-string">&apos;PonyDeli&apos;</span>).directive(<span class="md-code-string">&apos;pieceOfFood&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> {
    restrict: <span class="md-code-string">&apos;E&apos;</span>,
    template: <span class="md-code-comment">// ...</span>
  };
});
</code></pre> <p>For some reason I can not fathom, they&#x2019;ve somehow decided to obfuscate what&#x2019;s otherwise a verbose framework, and we ended up with single capital letters to define how a directive is restricted. Here&#x2019;s a list of <a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L980" target="_blank" aria-label="Where can I add a directive? - Angular on GitHub">available <code class="md-code md-code-inline">restrict</code> choices</a>.</p> <ul> <li><code class="md-code md-code-inline">&apos;A&apos;</code> <a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L549" target="_blank" aria-label="`&apos;A&apos;` is the default `restrict` value - Angular on GitHub">Silent default</a>, attributes are allowed, <code class="md-code md-code-inline">&lt;span piece-of-food&gt;&lt;/span&gt;</code></li> <li><code class="md-code md-code-inline">&apos;E&apos;</code> Elements are allowed, <code class="md-code md-code-inline">&lt;piece-of-food&gt;&lt;/piece-of-food&gt;</code></li> <li><code class="md-code md-code-inline">&apos;C&apos;</code> As a class name, <code class="md-code md-code-inline">&lt;span class=&apos;piece-of-food&apos;&gt;&lt;/span&gt;</code></li> <li><code class="md-code md-code-inline">&apos;M&apos;</code> As a comment, <code class="md-code md-code-inline">&lt;!-- directive: piece-of-food --&gt;</code></li> <li><code class="md-code md-code-inline">&apos;AE&apos;</code> You can combine any of these to loosen up the restriction a bit</li> </ul> <p>Don&#x2019;t ever use <code class="md-code md-code-inline">&apos;C&apos;</code> or <code class="md-code md-code-inline">&apos;M&apos;</code> to restrict your directives. Using <code class="md-code md-code-inline">&apos;C&apos;</code> doesn&#x2019;t stand out in markup, and using <code class="md-code md-code-inline">&apos;M&apos;</code> was meant for backwards compatibility. If you feel like being funny, though, you could make a case for setting <code class="md-code md-code-inline">restrict</code> to <code class="md-code md-code-inline">&apos;ACME&apos;</code>.</p> <blockquote> <p>Remember how the last time around I said <strong>take advice with a pinch of salt</strong>? Don&#x2019;t do that with mine, my advice is <em>awesome!</em></p> </blockquote> <p>Unfortunately, the rest of the properties in a directive definition object are much more obscure.</p> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L931-L936" target="_blank" aria-label="Determining the scope of a directive - Angular on GitHub"><code class="md-code md-code-inline">scope</code></a> Sets how a directive interacts with <strong>the <code class="md-code md-code-inline">$parent</code> scope</strong></li> </ol> <p>Since we&#x2019;ve already discussed scopes at length in the previous part, learning how to use the <code class="md-code md-code-inline">scope</code> property <strong>properly</strong> shouldn&#x2019;t be <em>all that excruciating</em>. Let&#x2019;s start with the default value, <code class="md-code md-code-inline">scope: false</code>, where the scope chain remains unaffected: you get <strong>whatever scope is found</strong> on the associated element, following the rules I&#x2019;ve <a href="https://ponyfoo.com/2014/02/14/angle-brackets-rifle-scopes" aria-label="Angle Brackets, Rifle Scopes">outlined in the previous part</a>.</p> <p>Leaving the scope chain untouched is obviously useful when your directive doesn&#x2019;t interact with the scope at all, but that rarely happens. A much more common scenario where not touching the scope is useful, is when creating a directive that has no reason to be instanced more than once on any given scope, and which just interacts with a single scope property, <em>the directive name</em>. This is most declarative when combined with <code class="md-code md-code-inline">restrict: &apos;A&apos;</code>, the default <code class="md-code md-code-inline">restrict</code> value.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">angular.module(<span class="md-code-string">&apos;PonyDeli&apos;</span>).directive(<span class="md-code-string">&apos;pieceOfFood&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> {
    template: <span class="md-code-string">&apos;{{pieceOfFood}}&apos;</span>,
    link: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, element, attrs)</span> </span>{
      attrs.$observe(<span class="md-code-string">&apos;pieceOfFood&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(value)</span> </span>{
        scope.pieceOfFood = value;
      });
    }
  };
});
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">body</span> <span class="md-code-attribute">ng-app</span>=<span class="md-code-value">&apos;PonyDeli&apos;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">span</span> <span class="md-code-attribute">piece-of-food</span>=<span class="md-code-value">&apos;Fish &amp; Chips&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">span</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
</code></pre> <p><a href="http://codepen.io/bevacqua/pen/iexmJ" target="_blank" aria-label="A piece of food on CodePen">Grab the pen.</a> There&#x2019;s a few things to note here, which we haven&#x2019;t discussed yet. You&#x2019;ll learn more about the <code class="md-code md-code-inline">link</code> property later in the article. For the time being you can think of it as <em>a controller that runs for each instance of the directive</em>.</p> <p>In the directive linking function we can access <code class="md-code md-code-inline">attrs</code>, which is a collection of attributes present on <code class="md-code md-code-inline">element</code>. This collection has a special method, called <code class="md-code md-code-inline">$observe()</code>, which will fire a callback <a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L747-L755" target="_blank" aria-label="Observing attributes - Angular on GitHub">whenever a property changes</a>. Without watching the attribute for changes, the property wouldn&#x2019;t ever make it to the scope, and we wouldn&#x2019;t be able to bind to it in our template.</p> <p>We can twist the code above, making it much more useful, by adding <code class="md-code md-code-inline">scope.$eval</code> into the mix. Remember how it could be used to evaluate an expression against a scope? Look at the code below to get a better idea of how that could help us.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> deli = angular.module(<span class="md-code-string">&apos;PonyDeli&apos;</span>, []);

deli.controller(<span class="md-code-string">&apos;foodCtrl&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">($scope)</span> </span>{
  $scope.piece = <span class="md-code-string">&apos;Fish &amp; Chips&apos;</span>;
});

deli.directive(<span class="md-code-string">&apos;pieceOfFood&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> {
    template: <span class="md-code-string">&apos;{{pieceOfFood}}&apos;</span>,
    link: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, element, attrs)</span> </span>{
      attrs.$observe(<span class="md-code-string">&apos;pieceOfFood&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(value)</span> </span>{
        scope.pieceOfFood = scope.$<span class="md-code-built_in">eval</span>(value);
      });
    }
  };
});
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">body</span> <span class="md-code-attribute">ng-app</span>=<span class="md-code-value">&apos;PonyDeli&apos;</span> <span class="md-code-attribute">ng-controller</span>=<span class="md-code-value">&apos;foodCtrl&apos;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">span</span> <span class="md-code-attribute">piece-of-food</span>=<span class="md-code-value">&apos;piece&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">span</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
</code></pre> <p><a href="http://codepen.io/bevacqua/pen/ilgtv" target="_blank" aria-label="Interpreting food-scopes on CodePen">In this case</a>, I&#x2019;m evaluating the attribute value, <code class="md-code md-code-inline">piece</code>, against the scope, which defined <code class="md-code md-code-inline">$scope.piece</code> at the controller. Of course, you could use a template like <code class="md-code md-code-inline">{{piece}}</code> directly, but that would require specific knowledge about which property in the scope you want to track. This pattern provides <em>a little more flexibility</em>, although you&#x2019;re still going to be sharing the scope <strong>across all directives</strong>, which can lead to <em>unexpected behavior</em> if you were to try adding more than one directive in the same scope.</p> <h1 id="playful-child-scopes">Playful Child Scopes</h1> <p>You could solve that issue by creating a child scope, which inherits prototypically from its parent. In order to create a child scope, you merely need to declare <code class="md-code md-code-inline">scope: true</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> deli = angular.module(<span class="md-code-string">&apos;PonyDeli&apos;</span>, []);

deli.controller(<span class="md-code-string">&apos;foodCtrl&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">($scope)</span> </span>{
  $scope.pieces = [<span class="md-code-string">&apos;Fish &amp; Chips&apos;</span>, <span class="md-code-string">&apos;Potato Salad&apos;</span>];
});

deli.directive(<span class="md-code-string">&apos;pieceOfFood&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> {
    template: <span class="md-code-string">&apos;{{pieceOfFood}}&apos;</span>,
    scope: <span class="md-code-literal">true</span>,
    link: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, element, attrs)</span> </span>{
      attrs.$observe(<span class="md-code-string">&apos;pieceOfFood&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(value)</span> </span>{
        scope.pieceOfFood = scope.$<span class="md-code-built_in">eval</span>(value);
      });
    }
  };
});
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">body</span> <span class="md-code-attribute">ng-app</span>=<span class="md-code-value">&apos;PonyDeli&apos;</span> <span class="md-code-attribute">ng-controller</span>=<span class="md-code-value">&apos;foodCtrl&apos;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">p</span> <span class="md-code-attribute">piece-of-food</span>=<span class="md-code-value">&apos;pieces[0]&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">p</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">p</span> <span class="md-code-attribute">piece-of-food</span>=<span class="md-code-value">&apos;pieces[1]&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">p</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
</code></pre> <p>As you can see, we&#x2019;re now <a href="http://codepen.io/bevacqua/pen/JrLev" target="_blank" aria-label="Directive child scopes on CodePen">able to use multiple instances</a> of the directive, and get the desired behavior, because each directive is creating its own scope. However, there&#x2019;s a limitation: multiple directives on an element all get the same scope.</p> <blockquote> <p>If multiple directives on the same element request a new scope, only one new scope is created.</p> </blockquote> <h2 id="lonely-isolate-scope">Lonely, Isolate Scope</h2> <p>One last option is creating a local, or isolate scope. The difference between an isolate scope and a child scope, is that local scopes don&#x2019;t inherit from their parent <em>(but it&#x2019;s still accessible on <code class="md-code md-code-inline">scope.$parent</code>)</em>. You can declare an isolate scope like this: <code class="md-code md-code-inline">scope: {}</code>. You can add properties to the object, which get data-bound to the parent scope, but accessible on the local scope. Much like <code class="md-code md-code-inline">restrict</code>, isolate scope properties have a terse but confusing syntax, where you can use symbols like <code class="md-code md-code-inline">&amp;</code>, <code class="md-code md-code-inline">@</code>, and <code class="md-code md-code-inline">=</code> to define how the property is bound.</p> <p>You may omit the property name if you&#x2019;re going to use that as the key in your local scope. That is to say, <code class="md-code md-code-inline">pieceOfFood: &apos;=&apos;</code> is a short-hand form for <code class="md-code md-code-inline">pieceOfFood: &apos;=pieceOfFood&apos;</code>, they are equivalent.</p> <h3 id="choose-your-weapon-and-or">Choose Your Weapon. <code class="md-code md-code-inline">@</code>, <code class="md-code md-code-inline">&amp;</code>, or <code class="md-code md-code-inline">=</code>?</h3> <p>What do those symbols mean, then? The examples I coded, enumerated below, might help you decode them.</p> <h5 id="attribute-observer">Attribute Observer, <code class="md-code md-code-inline">@</code></h5> <p>Using <code class="md-code md-code-inline">@</code> binds to the result of <a href="http://codepen.io/bevacqua/pen/IxvBc" target="_blank" aria-label="Buying vegetables on CodePen">observing an attribute</a> against the parent scope.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">body</span> <span class="md-code-attribute">ng-app</span>=<span class="md-code-value">&apos;PonyDeli&apos;</span> <span class="md-code-attribute">ng-controller</span>=<span class="md-code-value">&apos;foodCtrl&apos;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">p</span> <span class="md-code-attribute">note</span>=<span class="md-code-value">&apos;You just bought some {{type}}&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">p</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-javascript">deli.directive(<span class="md-code-string">&apos;note&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> {
    template: <span class="md-code-string">&apos;{{note}}&apos;</span>,
    scope: {
      note: <span class="md-code-string">&apos;@&apos;</span>
    }
  };
});
</code></pre> <p>This is <a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1417-L1419" target="_blank" aria-label="Observing an attribute value - Angular on GitHub">equivalent to observing the attribute</a> for changes, and updating our local scope. Of course, using the <code class="md-code md-code-inline">@</code> notation is much more &#x201C;Angular&#x201D;.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">deli.directive(<span class="md-code-string">&apos;note&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> {
    template: <span class="md-code-string">&apos;{{note}}&apos;</span>,
    scope: {},
    link: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, element, attrs)</span> </span>{
      attrs.$observe(<span class="md-code-string">&apos;note&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(value)</span> </span>{
        scope.note = value;
      });
    }
  };
});
</code></pre> <p>Attribute observers are most useful when <strong>consuming options for a directive</strong>. If we want to change the directive&#x2019;s behavior based on changing options, though, it <em>might make more sense</em> to write the <code class="md-code md-code-inline">attrs.$observe</code> line ourselves, rather than have Angular <a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1417-L1419" target="_blank" aria-label="Observing an attribute value - Angular on GitHub"><em>do that internally</em></a>, and creating a watch on our end, which would be slower.</p> <p>In those cases, merely replacing <code class="md-code md-code-inline">scope.note = value</code>, in the <code class="md-code md-code-inline">$observe</code> handler shown above, into whatever you would&#x2019;ve put on the <code class="md-code md-code-inline">$watch</code> listener, should do.</p> <blockquote> <p>It&#x2019;s important to keep in mind that, when dealing with <code class="md-code md-code-inline">@</code>, we&#x2019;re <strong>talking about observing and attribute</strong>, instead of <em>binding to the parent scope</em>.</p> </blockquote> <h5 id="expression-builder-and">Expression Builder, <code class="md-code md-code-inline">&amp;</code></h5> <p>Using <code class="md-code md-code-inline">&amp;</code> gives you an <a href="http://codepen.io/bevacqua/pen/glhso" target="_blank" aria-label="Expression evaluation on CodePen">expression evaluating function</a>, in the context of the parent scope.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">body</span> <span class="md-code-attribute">ng-app</span>=<span class="md-code-value">&apos;PonyDeli&apos;</span> <span class="md-code-attribute">ng-controller</span>=<span class="md-code-value">&apos;foodCtrl&apos;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">p</span> <span class="md-code-attribute">note</span>=<span class="md-code-value">&apos;&quot;You just bought some &quot; + type&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">p</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-javascript">deli.directive(<span class="md-code-string">&apos;note&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> {
    template: <span class="md-code-string">&apos;{{note()}}&apos;</span>,
    scope: {
      note: <span class="md-code-string">&apos;&amp;&apos;</span>
    }
  };
});
</code></pre> <p>Below I outlined how you might implement that same functionality inside the linking function, if you weren&#x2019;t aware of <code class="md-code md-code-inline">&amp;</code>. This one is a tad more lengthy than <code class="md-code md-code-inline">@</code>, as <a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1463-L1466" target="_blank" aria-label="Parsing a getter expression - Angular on GitHub">it parses the expression in the attribute</a> once, building a reusable function.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">deli.directive(<span class="md-code-string">&apos;note&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">($parse)</span> </span>{
  <span class="md-code-keyword">return</span> {
    template: <span class="md-code-string">&apos;{{note()}}&apos;</span>,
    scope: {},
    link: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, element, attrs)</span> </span>{
      <span class="md-code-keyword">var</span> parentGet = $parse(attrs.note);

      scope.note = <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(locals)</span> </span>{
        <span class="md-code-keyword">return</span> parentGet(scope.$parent, locals);
      };
    }
  };
});
</code></pre> <p>Expression builders are, as we can see, generate a method which queries the parent scope. You can execute the method whenever you&#x2019;d like, and even watch it for output changes. This method should be treated as a read-only query on a parent expression, and as such would be most useful in two scenarios. The first one is if you need to watch for changes on the parent scope, in which case you would set up a watch on the function expression, <code class="md-code md-code-inline">note()</code>, which is in essence, what we did in the example above.</p> <p>The other situation in which this might come in handy is when you need access to a method on the parent scope. Suppose the parent scope has a method which refreshes a table, while your local scope represents a table row. When the table row is deleted, you might want to refresh the table. If the button is in the child scope, then it would make sense using a <code class="md-code md-code-inline">&amp;</code> binding to access the refresh functionality on the parent scope. That&#x2019;s just a contrived example, as you might prefer to use events for that kind of thing, or maybe even structure your application in some way where complicating things like that could be avoided.</p> <h5 id="bi-directional-binding">Bi-directional Binding, <code class="md-code md-code-inline">=</code></h5> <p>Using <code class="md-code md-code-inline">=</code> sets up <a href="http://codepen.io/bevacqua/pen/sDmAo" target="_blank" aria-label="Bi-directional binding on CodePen">bi-directional binding</a> between the local and parent scopes.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">body</span> <span class="md-code-attribute">ng-app</span>=<span class="md-code-value">&apos;PonyDeli&apos;</span> <span class="md-code-attribute">ng-controller</span>=<span class="md-code-value">&apos;foodCtrl&apos;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">button</span> <span class="md-code-attribute">countable</span>=<span class="md-code-value">&apos;clicks&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">button</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">span</span>&gt;</span>Got {{clicks}} clicks!<span class="md-code-tag">&lt;/<span class="md-code-title">span</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-javascript">deli.directive(<span class="md-code-string">&apos;countable&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> {
    template:
      <span class="md-code-string">&apos;&lt;button ng-disabled=&quot;!remaining&quot;&gt;&apos;</span> +
        <span class="md-code-string">&apos;Click me {{remaining}} more times! ({{count}})&apos;</span> +
      <span class="md-code-string">&apos;&lt;/button&gt;&apos;</span>,
    replace: <span class="md-code-literal">true</span>,
    scope: {
      count: <span class="md-code-string">&apos;=countable&apos;</span>
    },
    link: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, element, attrs)</span> </span>{
      scope.remaining = <span class="md-code-number">10</span>;

      element.bind(<span class="md-code-string">&apos;click&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
        scope.remaining--;
        scope.count++;
        scope.$apply();
      });
    }
  };
});
</code></pre> <p>Bi-directional binding is <a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1429-L1459" target="_blank" aria-label="Bi-directional binding implementation - Angular on GitHub"><em>quite a bit</em> more complicated</a> than <code class="md-code md-code-inline">&amp;</code> or <code class="md-code md-code-inline">@</code>.</p> <pre class="md-code-block"><code class="md-code">deli.directive(&apos;countable&apos;, function ($parse) {
  return {
    template:
      &apos;&apos;,
    replace: true,
    scope: {},
    link: function (scope, element, attrs) {

      // you&apos;re definitely better off just using &apos;&amp;&apos;

      var compare;
      var parentGet = $parse(attrs.countable);
      if (parentGet.literal) {
        compare = angular.equals;
      } else {
        compare = function(a,b) { return a === b; };
      }
      var parentSet = parentGet.assign; // or throw
      var lastValue = scope.count = parentGet(scope.$parent);

      scope.$watch(function () {
        var value = parentGet(scope.$parent);
        if (!compare(value, scope.count)) {
          if (!compare(value, lastValue)) {
            scope.count = value;
          } else {
            parentSet(scope.$parent, value = scope.count);
          }
        }
        return lastValue = value;
      }, null, parentGet.literal);

      // I told you!

      scope.remaining = 10;

      element.bind(&apos;click&apos;, function () {
        scope.remaining--;
        scope.count++;
        scope.$apply();
      });
    }
  };
});
</code></pre> <p>This form of data-binding is <em>arguably the most useful of all three</em>. In this case, the parent scope property is kept in sync with the local scope. Whenever the local scope value is updated, it gets set on the parent scope. Likewise, whenever the parent scope value changes, the local scope gets an update. The most straightforward scenario I&#x2019;ve got for you as to when this could be useful, would be whenever you have a child scope which is used to represent a sub-model of the parent scope. Think of your typical <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete" target="_blank" aria-label="CRUD on Wikipedia">CRUD <em>(Create, Read, Update, Delete)</em></a> table. The table as a whole would be the parent scope, whereas each row would be contained in an isolate directive, which binds to the row&#x2019;s data model through a two-way <code class="md-code md-code-inline">=</code> binding. This would allow for modularity while still being able to effectively communicate between the master table and its children.</p> <p>That took a lot of words, but I think I&#x2019;ve managed to sum up how the <code class="md-code md-code-inline">scope</code> property works when declaring directives, and what the <em>most common use cases</em> are. Time to move on to other properties in the directive definition object, shall we?</p> <h1 id="sensible-view-templates">Sensible View Templates</h1> <p>Directives are most effective when they contain small, reusable snippets of HTML. That&#x2019;s where the true power of directives comes from. These templates can be provided in plain text, or as a resource Angular will query when bootstrapping the directive.</p> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1236" target="_blank" aria-label="Setting a view template - Angular on GitHub"><code class="md-code md-code-inline">template</code></a> Is how you would provide the view template as plain text. <code class="md-code md-code-inline">template: &apos;&lt;span ng-bind=&quot;message&quot; /&gt;&apos;</code></li> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1663" target="_blank" aria-label="Using templateUrl to fetch a template using AJAX - Angular on GitHub"><code class="md-code md-code-inline">templateUrl</code></a> Allows you to provide the url to an HTML template. <code class="md-code md-code-inline">templateUrl: /partials/message.html</code></li> </ol> <p>Using a <code class="md-code md-code-inline">templateUrl</code> to separate the HTML from your linking function <em>is awesome</em>. Making an AJAX request whenever you want to initialize a directive for the first time, <strong>not so much</strong>. However, you can circumvent the AJAX request if you pre-fill the <code class="md-code md-code-inline">$templateCache</code> with a build task, such as <a href="https://github.com/ericclemmons/grunt-angular-templates" target="_blank" aria-label="grunt-angular-templates on GitHub">grunt-angular-templates</a>. That would be the <strong>&#x201C;best of both worlds&#x201D;</strong>.Separation of concerns without the extra overhead of AJAX calls.</p> <p>You could also provide a <code class="md-code md-code-inline">function (tElement, tAttrs)</code> as the <code class="md-code md-code-inline">template</code>, but this is <strong>neither necessary nor useful.</strong></p> <ol> <li><a href="http://codepen.io/bevacqua/pen/iteGj" target="_blank" aria-label="Replaced versus inlined directives"><code class="md-code md-code-inline">replace</code></a> Should the template be inserted as a child element, or inlined?</li> </ol> <p>The documentation for this property is <em>woefully confusing</em>.</p> <blockquote> <h5 id="replace"><code class="md-code md-code-inline">replace</code></h5> <p>Specify where the template should be inserted. Defaults to <code class="md-code md-code-inline">false</code>.</p> <ul> <li><code class="md-code md-code-inline">true</code> The template will replace the current element</li> <li><code class="md-code md-code-inline">false</code> The template will replace the contents of the current element</li> </ul> </blockquote> <p>So when replace is <code class="md-code md-code-inline">false</code> the directive actually replaces the element? That doesn&#x2019;t sound right. If you <a href="http://codepen.io/bevacqua/pen/iteGj" target="_blank" aria-label="Replaced versus inlined directives">check out this pen</a>, then you&#x2019;ll find out that the element simply gets appended if <code class="md-code md-code-inline">replace: false</code>, and it gets <a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1244-L1279" target="_blank" aria-label="&apos;Replacing&apos; an element with a directive - Angular on GitHub">sort of replaced</a>, if <code class="md-code md-code-inline">replace: true</code>.</p> <p>As a rule of thumb, try and keep replacements to a minimum. Directives should strive to keep interferance with the DOM as close as possible to none, whenever possible, of course.</p> <p>Directives are compiled, which results in a pre-linking function, and a post-linking function. You can define the code which returns these functions, or just provide them. Here are the different ways in which you can provide linking functions. I warn you, this is yet another one of those <em>&#x201C;features&#x201D;</em> in Angular which I feel is more of a drawback, because <strong>it confuses the hell out of new-comers for little to no gain.</strong> Behold.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">compile: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(templateElement, templateAttrs)</span> </span>{
  <span class="md-code-keyword">return</span> {
    pre: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, instanceElement, instanceAttrs, controller)</span> </span>{
      <span class="md-code-comment">// pre-linking function</span>
    },
    post: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, instanceElement, instanceAttrs, controller)</span> </span>{
      <span class="md-code-comment">// post-linking function</span>
    }
  }
}
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-javascript">compile: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(templateElement, templateAttrs)</span> </span>{
  <span class="md-code-keyword">return</span> <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, instanceElement, instanceAttrs, controller)</span> </span>{
    <span class="md-code-comment">// post-linking function</span>
  };
}
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-javascript">link: {
  pre: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, instanceElement, instanceAttrs, controller)</span> </span>{
    <span class="md-code-comment">// pre-linking function</span>
  },
  post: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, instanceElement, instanceAttrs, controller)</span> </span>{
    <span class="md-code-comment">// post-linking function</span>
  }
}
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-javascript">link: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, instanceElement, instanceAttrs, controller)</span> </span>{
  <span class="md-code-comment">// post-linking function</span>
}
</code></pre> <p>Actually, you could even forget about the directive definition object we&#x2019;ve been discussing thus far, and merely return a post-linking function. However, this isn&#x2019;t recommended even by Angular peeps, so you better stay away from it.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">deli.directive(<span class="md-code-string">&apos;food&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, element, attrs)</span> </span>{
    <span class="md-code-comment">// post-linking function</span>
  };
});
</code></pre> <p>Before proceeding, here&#x2019;s an important note from the Angular documentation I&#x2019;d like you to take a look at.</p> <blockquote> <p><strong>Note:</strong> The template instance and the link instance may be different objects if the template has been cloned. For this reason it is not safe to do anything other than DOM transformations that apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration should be done in a linking function rather than in a compile function.</p> </blockquote> <p>Compile functions currently take in a third parameter, a <em>transclude linking function</em>, but it&#x2019;s deprecated. Also, you shouldn&#x2019;t be altering the DOM during compile functions (on <code class="md-code md-code-inline">templateElement</code>). Just do yourself a favor and avoid <code class="md-code md-code-inline">compile</code> entirely, provide pre-linking and post-linking functions directly. Most often, a post-linking function is just enough, which is what you&#x2019;re using when you assign a <code class="md-code md-code-inline">link</code> function to the definition object.</p> <p>I have a rule for you here. Always use a post-linking function. If a scope absolutely needs to be pre-populated before the DOM is linked, then do <em>just that</em> in the pre-linking function, but bind the functionality in the post-linking function, like you normally would have. You&#x2019;ll rarely need to do this, but I think it&#x2019;s still worth mentioning.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">link: {
  pre: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, element, attrs, controller)</span> </span>{
    scope.requiredThing = [<span class="md-code-number">1</span>, <span class="md-code-number">2</span>, <span class="md-code-number">3</span>];
  },
  post: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope, element, attrs, controller)</span> </span>{
    scope.squeal = <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
      scope.$emit(<span class="md-code-string">&quot;squeal&quot;</span>);
    };
  }
}
</code></pre> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1492" target="_blank" aria-label="Controller instances can be shared on the scope - Angular on GitHub"><code class="md-code md-code-inline">controller</code></a> A controller instance on the directive</li> </ol> <p>Directives can have controllers, which makes sense, because directives can create a scope. The controller is shared among all directives on the scope, and it is accessible as the fourth argument in linking functions. These controllers are a useful communication channel across directives on the same scoping level, which can be contained in the directive itself.</p> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1503-L1505" target="_blank" aria-label="Assigning a controllerAs alias - Angular on GitHub"><code class="md-code md-code-inline">controllerAs</code></a> Controller alias to reference it in the template</li> </ol> <p>Using a controller alias allows for using the controller within the template itself, as it&#x2019;ll be made available in the scope.</p> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1362-L1365" target="_blank" aria-label="Require or whine - Angular on GitHub"><code class="md-code md-code-inline">require</code></a> <em>I&#x2019;ll throw if you don&#x2019;t link some other directive(s) on this element!</em></li> </ol> <p>The documentation for require is surprisingly straightforward, so I&#x2019;ll just cheat and paste that here.</p> <blockquote> <p>Require another directive and inject its controller as the fourth argument to the linking function. The <code class="md-code md-code-inline">require</code> takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the injected argument will be an array in corresponding order. If no such directive can be found, or if the directive does not have a controller, then an error is raised. The name can be prefixed with:</p> <ul> <li><code class="md-code md-code-inline">(no prefix)</code> Locate the required controller on the current element. Throw an error if not found</li> <li><code class="md-code md-code-inline">?</code> Attempt to locate the required controller or pass <code class="md-code md-code-inline">null</code> to the <code class="md-code md-code-inline">link</code> fn if not found</li> <li><code class="md-code md-code-inline">^</code> Locate the required controller by searching the element&#x2019;s parents. Throw an error if not found</li> <li><code class="md-code md-code-inline">?^</code> Attempt to locate the required controller by searching the element&#x2019;s parents or pass <code class="md-code md-code-inline">null</code> to the <code class="md-code md-code-inline">link</code> fn if not found</li> </ul> </blockquote> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1748-L1753" target="_blank" aria-label="Priority Sort - Angular on GitHub"><code class="md-code md-code-inline">priority</code></a> Defines the order in which directives are applied.</li> </ol> <p>Cheating time!</p> <blockquote> <p>When there are multiple directives defined on a single DOM element, sometimes it is necessary to specify the order in which the directives are applied. The <code class="md-code md-code-inline">priority</code> is used to sort the directives before their <code class="md-code md-code-inline">compile</code> functions get called. Priority is defined as a number. Directives with greater numerical <code class="md-code md-code-inline">priority</code> are compiled first. Pre-link functions are also run in priority order, but post-link functions are run in reverse order. The order of directives with the same priority is <em>undefined</em>. The default priority is <code class="md-code md-code-inline">0</code>.</p> </blockquote> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1167-L1169" target="_blank" aria-label="Enforcing terminal priority - Angular on GitHub"><code class="md-code md-code-inline">terminal</code></a> Prevents further processing of directives</li> </ol> <blockquote> <p>If set to true then the current <code class="md-code md-code-inline">priority</code> will be the last set of directives which will execute (any directives at the current priority will still execute as the order of execution on same <code class="md-code md-code-inline">priority</code> is <em>undefined</em>).</p> </blockquote> <h1 id="transcluding-for-much-win">Transcluding for much win</h1> <ol> <li><a href="https://github.com/angular/angular.js/blob/caed2dfe4feeac5d19ecea2dbb1456b7fde21e6d/src/ng/compile.js#L1195-L1232" target="_blank" aria-label="Transcluded directives - Angular on GitHub"><code class="md-code md-code-inline">transclude</code></a> Compiles the content of the element and makes it available to the directive.</li> </ol> <p>I saved the best <em>(worst?)</em> for last. This property allows two values, for more fun and less profits. You can either set it to <code class="md-code md-code-inline">true</code>, which enables transclusion, or to <code class="md-code md-code-inline">&apos;element&apos;</code>, in which case the whole element, including any directives defined at lower priority, get transcluded.</p> <p>At a high level, transclusion allows the consumer of a directive to define a snippet of HTML which can then be included into some part of the directive, using an <code class="md-code md-code-inline">ng-transclude</code> directive. This sounds way too complicated, and it&#x2019;s only <em>kind of complicated</em>. An example might make things clearer for you.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">angular.module(<span class="md-code-string">&apos;PonyDeli&apos;</span>).directive(<span class="md-code-string">&apos;transclusion&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> {
    restrict: <span class="md-code-string">&apos;E&apos;</span>,
    template:
      <span class="md-code-string">&apos;&lt;div ng-hide=&quot;hidden&quot; class=&quot;transcluded&quot;&gt;&apos;</span> +
        <span class="md-code-string">&apos;&lt;span ng-transclude&gt;&lt;/span&gt;&apos;</span> +
        <span class="md-code-string">&apos;&lt;span ng-click=&quot;hidden=true&quot; class=&quot;close&quot;&gt;Close&lt;/span&gt;&apos;</span> +
      <span class="md-code-string">&apos;&lt;/div&gt;&apos;</span>,
    transclude: <span class="md-code-literal">true</span>
  };
});
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">body</span> <span class="md-code-attribute">ng-app</span>=<span class="md-code-value">&apos;PonyDeli&apos;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">transclusion</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">span</span>&gt;</span>The plot thickens!<span class="md-code-tag">&lt;/<span class="md-code-title">span</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">transclusion</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
</code></pre> <p>You can <a href="http://codepen.io/bevacqua/pen/rlmwB" target="_blank" aria-label="Basic Transclusion on CodePen">check it out on CodePen</a>, of course. What happens when you try to get scopes into the mix? We&#x2019;ll, the content which gets transcluded inside the directive will still respond to the parent content, correctly, even though it&#x2019;s placed inside the directive, and even if the directive presents an isolate scope. This is what you&#x2019;d expect, because the transcluded content is defined in the consuming code, which belongs to the parent scope, and not the directive&#x2019;s scope. The directive still binds to it&#x2019;s local scope, as usual.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> deli = angular.module(<span class="md-code-string">&apos;PonyDeli&apos;</span>, []);

deli.controller(<span class="md-code-string">&apos;foodCtrl&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">($scope)</span> </span>{
  $scope.message = <span class="md-code-string">&apos;The plot thickens!&apos;</span>;
});

deli.directive(<span class="md-code-string">&apos;transclusion&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> {
    restrict: <span class="md-code-string">&apos;E&apos;</span>,
    template:
      <span class="md-code-string">&apos;&lt;div ng-hide=&quot;hidden&quot; class=&quot;transcluded&quot;&gt;&apos;</span> +
        <span class="md-code-string">&apos;&lt;span ng-transclude&gt;&lt;/span&gt;&apos;</span> +
        <span class="md-code-string">&apos;&lt;span ng-click=&quot;hidden=true&quot; class=&quot;close&quot; ng-bind=&quot;close&quot;&gt;&lt;/span&gt;&apos;</span> +
      <span class="md-code-string">&apos;&lt;/div&gt;&apos;</span>,
    transclude: <span class="md-code-literal">true</span>,
    scope: {},
    link: <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(scope)</span> </span>{
      scope.close = <span class="md-code-string">&apos;Close&apos;</span>;
    }
  };
});
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">body</span> <span class="md-code-attribute">ng-app</span>=<span class="md-code-value">&apos;PonyDeli&apos;</span> <span class="md-code-attribute">ng-controller</span>=<span class="md-code-value">&apos;foodCtrl&apos;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">transclusion</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">span</span> <span class="md-code-attribute">ng-bind</span>=<span class="md-code-value">&apos;message&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">span</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">transclusion</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
</code></pre> <p>You can <a href="http://codepen.io/bevacqua/pen/lFHoE" target="_blank" aria-label="Transcluded Scopes on CodePen">find that one on CodePen</a> as well. There you have it, transclusion, demystified.</p> <h2 id="further-reading">Further Reading</h2> <p>Here&#x2019;s some additional resources you can read to further extend your comprehension of Angular.</p> <ul> <li><a href="https://ponyfoo.com/2014/02/14/angle-brackets-rifle-scopes" aria-label="Angle Brackets, Rifle Scopes">Angle Brackets <em>(Part I)</em>, Rifle Scopes</a></li> <li><a href="http://stackoverflow.com/a/14914798/389745" target="_blank" aria-label="When writing a directive, how do I decide if a need no new scope, a new child scope, or a new isolate scope? on StackOverflow">How to choose between no new scope, child scope, or isolate scope?</a></li> <li><a href="https://egghead.io/lessons/angularjs-transclusion-basics" target="_blank" aria-label="Angular.js Transclusion Basics - Egghead.io">Transclusion Basics (screencast)</a></li> <li><a href="http://stackoverflow.com/a/18457319/389745" target="_blank" aria-label="When to use transclude &apos;true&apos; and transclude &apos;element&apos; - StackOverflow"><code class="md-code md-code-inline">transclude: true</code> vs <code class="md-code md-code-inline">transclude: &apos;element&apos;</code></a></li> <li><a href="http://liamkaufman.com/blog/2013/05/13/understanding-angularjs-directives-part1-ng-repeat-and-compile/" target="_blank" aria-label="Understanding AngularJS Directives Part 1: Ng-repeat and Compile">Understanding Directives, <code class="md-code md-code-inline">ng-repeat</code> and <code class="md-code md-code-inline">compile</code></a></li> </ul> <p>Please comment on any issues regarding this article, so <em>everyone can benefit</em> from your feedback. Also, you should <a href="https://twitter.com/nzgb" target="_blank" aria-label="@nzgb on Twitter">follow me on Twitter</a>!</p></div>
