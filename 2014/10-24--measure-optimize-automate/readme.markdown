<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/measure-optimize-automate">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/measure-optimize-automate"><div></div></a>

<h1>Measure, Optimize, Automate</h1>

<p><kbd>measure</kbd> <kbd>performance</kbd> <kbd>build</kbd> <kbd>automation</kbd></p>

<blockquote><p>We&#x2019;ve already covered the different techniques you could use to <a href="https://ponyfoo.com/articles/critical-path-performance-optimization">vastly improve the performance of your front-end applications</a>, their page load time, and the &#x2026;</p></blockquote>

<div><p>We&#x2019;ve already covered the different techniques you could use to <a href="https://ponyfoo.com/articles/critical-path-performance-optimization">vastly improve the performance of your front-end applications</a>, their page load time, and the perceived performance <em>(determined by the moment when the human can start interacting with your site)</em>. Although slightly off topic, we&#x2019;ve also discussed <a href="https://ponyfoo.com/articles/adjusting-ux-for-humans">how performance impacts UX</a>. In this article, we&#x2019;ll focus on <strong>measuring performance, understanding those measurements, and automating the process</strong>.</p></div>

<blockquote></blockquote>

<div><p>Pretty much every web performance engineer out there starts by telling you to <strong>measure performance</strong>, and they typically suggest you measure it by tracking your relevant business metrics <em>(such as sign-ups, purchases, or renewals)</em>, as a way to entice management and teach them that <a href="https://twitter.com/hashtag/perfmatters" target="_blank">#perfmatters</a>. Once you have an idea of the current state of your application, you can go over the performance report, fix the glaring issues, and measure again. The <strong>iterative approach allows you to keep your application on a tight leash</strong>, which helps you to quickly deploy improvements that make your site faster. Since you&#x2019;re measuring your performance, you can <em>gauge exactly how beneficial your changes were</em>.</p> <p>Of course, all of this <strong>needs to be automated</strong> in order to be a feasible and sustained effort. In this article I&#x2019;ll explore our options when it comes to measuring, learning from those measurements, and automating them.</p> <p>Since we&#x2019;re <a href="https://ponyfoo.com/articles/gulp-grunt-whatever">not really concerned with a specific build tool</a>, I&#x2019;ll default to showing examples from the command-line, so that you can run them using <a href="http://substack.net/task_automation_with_npm_run" target="_blank">npm run</a>, and then provide links to well known plugins for the popular kids in the build block - <a href="http://gruntjs.com/" target="_blank">Grunt</a>, <a href="http://gulpjs.com/" target="_blank">Gulp</a> and <a href="https://github.com/broccolijs/broccoli" target="_blank">Broccoli</a> - as well as short explanations on how to use those plugins.</p> <figure><a href="https://ponyfoo.com/articles/gulp-grunt-whatever"><img src="https://i.imgur.com/rVlIUsC.jpg" alt="Gulp, Grunt, Whatever" title="Gulp, Grunt, Whatever"></a><figcaption>Gulp, Grunt, Whatever</figcaption></figure></div>

<div><h1 id="measuring-performance-and-business-metrics">Measuring performance <em>(and business metrics)</em></h1> <p>Measuring the performance of your site helps you <strong>figure out where you are on the scale</strong>, how bad <em>(or how well!)</em> your site is performing, and it also helps you keep track of the effect of changes made to your application.</p> <p>There are quite a few different tools you can use to gauge performance and business metrics. When it comes to business metrics, you&#x2019;ll typically use a tool like <a href="https://www.google.com/analytics/web/" target="_blank">Google Analytics</a> or <a href="https://mixpanel.com/" target="_blank">Mixpanel</a>. Both are pretty good at tracking human interactions, studying engagement, <a href="http://www.smashingmagazine.com/2010/06/24/the-ultimate-guide-to-a-b-testing/" target="_blank" aria-label="The Ultimate Guide to A/B Testing">A/B testing</a>, and comparing different products or categories. I won&#x2019;t bore you about tracking business metrics though, because that&#x2019;s <em>probably up to someone else</em> in your company.</p> <p>Instead, let&#x2019;s focus on gauging performance. Popular services for measuring web application performance include <a href="http://yslow.org/" target="_blank" aria-label="YSlow analyzes web pages and why they&apos;re slow based on Yahoo!&apos;s rules for high performance web sites">YSlow</a>, <a href="http://www.webpagetest.org/" target="_blank" aria-label="WebPageTest.org helps test a website&apos;s performance">PageSpeed Insights</a>, and <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" aria-label="PageSpeed Insights helps you make your web pages fast on all devices">WebPageTest.org</a>.</p> <h2 id="using-yahoo-yslow">Using Yahoo YSlow</h2> <p>While lately it has been declining in popularity, YSlow is still a <strong>good source of performance tips</strong>. Nowadays, YSlow consists of browser extensions and there&#x2019;s <a href="https://github.com/andyshora/grunt-yslow" target="_blank" aria-label="andyshora/grunt-yslow on GitHub">the <code class="md-code md-code-inline">grunt-yslow</code> Grunt plugin</a> as well.</p> <p>YSlow provides many basic suggestions, such as minification and bundling, as well as more advanced ones. Here&#x2019;s a list of the highlights, <em>mostly caching-related</em> rules.</p> <ul> <li>Use a Content Delivery Network <em>(CDN)</em></li> <li>Use <code class="md-code md-code-inline">Expires</code> headers</li> <li>Enable gzip compression</li> <li>Configure <code class="md-code md-code-inline">ETags</code></li> <li>Reduce cookie size</li> </ul> <p>It&#x2019;s a great tool to get started in the fantastic world of web performance optimization.</p> <h4 id="yslow-with-browser-extensions">YSlow with browser extensions</h4> <p>Using the browser extension is merely a matter of installing it and clicking on the button. YSlow will open up another window, and once you run a test you&#x2019;ll get a grade sheet like the one below.</p> <figure><img alt="YSlow test results" title="YSlow test results" class="" src="https://i.imgur.com/b95evOX.png"><figcaption>YSlow test results</figcaption></figure> <h4 id="yslow-in-grunt-with-grunt-yslow">YSlow in Grunt with <code class="md-code md-code-inline">grunt-yslow</code></h4> <p>The Grunt plugin couldn&#x2019;t be easier to configure. You just install <code class="md-code md-code-inline">grunt-yslow</code> and add the following piece of code to your <code class="md-code md-code-inline">Gruntfile.js</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">module</span>.exports = <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(grunt)</span> </span>{
  grunt.loadNpmTasks(<span class="md-code-string">&apos;grunt-yslow&apos;</span>);
  grunt.initConfig({
    yslow: {
      pages: {
        files: [{
          src: <span class="md-code-string">&apos;http://ponyfoo.com&apos;</span>,
        }],
        options: {
          thresholds: {
            weight: <span class="md-code-number">500</span>,
            speed: <span class="md-code-number">5000</span>,
            score: <span class="md-code-number">90</span>,
            requests: <span class="md-code-number">15</span>
          }
        }
      }
    }
  });
};
</code></pre> <p>Then you&#x2019;re all set, just run the command below and you&#x2019;ll get the measurements right in your command line!</p> <pre class="md-code-block"><code class="md-code md-lang-bash">grunt yslow
</code></pre> <figure><img alt="YSlow in your terminal using Grunt" title="YSlow test results using Grunt" class="" src="https://i.imgur.com/APY8f2y.png"><figcaption>YSlow in your terminal using Grunt</figcaption></figure> <p>While the automated Grunt plugin is <strong>great at getting a YScore score in a pinch</strong>, it doesn&#x2019;t produce <em>the same level of detail</em> provided by the browser extension, which is why I&#x2019;d recommend using the extension at least once before attempting to automate the process using Grunt or some other automated task runner.</p> <p>That being said, using the Grunt plugin allows you to do a few things. First, you automate the process, meaning you won&#x2019;t be having to click your way through the browser extension anymore. You could run YSlow on every build now! Second, it allows you to set thresholds, meaning that you can define constraints such as <em>&#x201C;no more than 15 requests&#x201D;</em>, or &#x201C;the page must load in under 5 seconds&#x201D;. If one of those thresholds is exceeded, then the Grunt task will fail, <em>causing the build to fail</em>, stopping the deployment <em>(in case you&#x2019;re doing <a href="http://bevacqua.io/buildfirst" target="_blank" aria-label="JavaScript Application Design: A Build First Approach">automated deployments</a>)</em>.</p> <h4 id="yslow-in-your-command-line">YSlow in your command-line</h4> <p>You can use a combination of <a href="http://phantomjs.org/" target="_blank" aria-label="PhantomJS is a headless web browser">PhantomJS</a> and the <a href="http://yslow.org/yslow-phantomjs-3.1.8.zip" target="_blank" aria-label="yslow for PhantomJS">yslow.js script</a> in order to run YSlow from the command-line. You can choose from a few different output formats <em>(such as JSON or plain text)</em>, verbosity, and more. Here&#x2019;s how to invoke it.</p> <pre class="md-code-block"><code class="md-code md-lang-bash">phantomjs yslow.js --info basic --format plain ponyfoo.com
</code></pre> <p>The output should look something like the screenshot below.</p> <figure><img alt="YSlow CLI test results" class="" src="https://i.imgur.com/BLu38RA.png"><figcaption>YSlow CLI test results</figcaption></figure> <p>In this day and age, the test suite provided by YSlow might seem all too basic. PageSpeed can probably help you better understand your performance issues.</p> <h2 id="using-google-pagespeed-insights">Using Google PageSpeed Insights</h2> <p>PageSpeed Insights offers a good mix of rules and suggestions for mobile web development, tweaked for both mobile and desktop connections. They offer a screenshot so that you can see what Google is looking at, and every rule comes with a detailed description which explains <em>how to implement a fix</em>, and the reasoning why your site was marked as insufficiently optimized in that regard.</p> <p>PageSpeed provides <a href="http://www.webpagetest.org/" target="_blank" aria-label="WebPageTest.org helps test a website&apos;s performance">a super simple web interface</a> where you type in an URL, wait a minute, and see your score plus some suggestions. Here&#x2019;s an example.</p> <figure><img alt="PageSpeed test results" class="" src="https://i.imgur.com/DmkgPDk.png"><figcaption>PageSpeed test results</figcaption></figure> <p>It&#x2019;s great, it let&#x2019;s you in on many secrets, and it heavily implores you to optimize your images, inline assets and get non-critical content out of the critical rendering path. PageSpeed is also content-aware, and it has the ability to tell you whether your content fits on the device viewport, whether you are using a legible font size, and suggest that you eliminate rendering-blocking JavaScript and above the fold CSS.</p> <p>We&#x2019;ll take a harder look at these optimizations in a future article, for now let&#x2019;s focus on the PageSpeed tool on Grunt, Gulp, and as a CLI.</p> <h4 id="pagespeed-in-your-command-line-via-psi">PageSpeed in your command-line via <code class="md-code md-code-inline">psi</code></h4> <p>Google provides <a href="https://github.com/addyosmani/psi/" target="_blank" aria-label="addyosmani/psi on GitHub">a package called psi</a> for interacting with PageSpeed Insights. You can use that package as a CLI or a programmatic API. The CLI is super easy to use.</p> <pre class="md-code-block"><code class="md-code md-lang-bash">npm install -g psi
psi http://ponyfoo.com
</code></pre> <p>You can optionally configure it with an API key provided by Google, in order to avoid throttling. Here&#x2019;s how the output looks in your terminal.</p> <figure><img alt="PageSpeed Insights in your terminal" class="" src="https://i.imgur.com/Z9zLreY.png"><figcaption>PageSpeed Insights in your terminal</figcaption></figure> <p>My conclusions here are similar to those for YSlow: try it by hand in your browser first, then establish the automated tests in place to automate the measure-optimize feedback loop.</p> <h4 id="pagespeed-under-gulp">PageSpeed under Gulp</h4> <p>Here&#x2019;s a <code class="md-code md-code-inline">Gulpfile.js</code> to run PageSpeed over Gulp. You&#x2019;ll need to install <code class="md-code md-code-inline">psi</code> for this one again, but you&#x2019;ll be using its API this time.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> gulp = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;gulp&apos;</span>);
<span class="md-code-keyword">var</span> psi = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;psi&apos;</span>);
gulp.task(<span class="md-code-string">&apos;mobile&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(cb)</span> </span>{
  psi({
    nokey: <span class="md-code-string">&apos;true&apos;</span>,
    url: <span class="md-code-string">&apos;http://ponyfoo.com&apos;</span>,
    strategy: <span class="md-code-string">&apos;mobile&apos;</span>,
  }, cb);
});
</code></pre> <p>Grunt is similarly easy to configure!</p> <h4 id="pagespeed-in-grunt">PageSpeed in Grunt</h4> <p>You&#x2019;ll need <a href="https://github.com/jrcryer/grunt-pagespeed" target="_blank" aria-label="jrcryer/grunt-pagespeed on GitHub">grunt-pagespeed</a>, which uses psi under the hood to deliver the goods.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">module</span>.exports = <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(grunt)</span> </span>{
  grunt.loadNpmTasks(<span class="md-code-string">&apos;grunt-pagespeed&apos;</span>);
  grunt.initConfig({
    pagespeed: {
      production: {
        options: {
          nokey: <span class="md-code-literal">true</span>,
          url: <span class="md-code-string">&apos;http://ponyfoo.com&apos;</span>,
          locale: <span class="md-code-string">&apos;en_US&apos;</span>,
          strategy: <span class="md-code-string">&apos;desktop&apos;</span>,
          threshold: <span class="md-code-number">80</span>
        }
      }
    }
  });
};
</code></pre> <p>The last performance testing tool we&#x2019;ll be going over is <a href="http://www.webpagetest.org/" target="_blank" aria-label="WebPageTest.org helps test a website&apos;s performance">WebPageTest.org</a>.</p> <h2 id="using-webpagetestorg">Using <a href="http://webpagetest.org/" target="_blank">WebPageTest.org</a></h2> <p>WebPageTest is also maintained by Google, and its uniqueness comes from their detailed reviews of the TCP connection every step of the way. The screenshot below shows how they indicate how the browser is behaving under the hood. Are connections being reused <em>(keep-alive)</em>? What&#x2019;s the <strong>roundtrip latency</strong> for the connection? <strong>What&#x2019;s the time to first byte?</strong> How long until the page is <em>visually ready</em>?</p> <figure><img alt="Connection waterfall from WebPageTest.org" class="" src="https://i.imgur.com/uabEpUz.png"><figcaption>Connection waterfall from WebPageTest.org</figcaption></figure> <p>Another very interesting aspect of <strong>WPT</strong> is the <em>&#x201C;filmstrip view&#x201D;</em>. This view allows you to quickly identify issues with your web page on first load. In my case, for example, it sentences that I should probably do something about font loading, because it&#x2019;s blocking rendering longer than it should!</p> <p>These kinds of quick observations can be made by analyzing <strong>WPT</strong> test results. I guarantee that you&#x2019;ll find quite a few things wrong with your site!</p> <figure><img alt="Filmstrip view for Pony Foo on WebPageTest.org" class="" src="https://i.imgur.com/LwpIkoj.png"><figcaption>Filmstrip view for Pony Foo on WebPageTest.org</figcaption></figure> <p>When it comes to automation, we can use the <a href="https://github.com/marcelduran/webpagetest-api" target="_blank" aria-label="marcelduran/webpagetest-api on GitHub">webpagetest</a> package from npm, although it requires an API key. At the moment getting a WebPageTest API key is kind of awkward: you need to either host your own instance of WPT, or send the project owner an email and hope for the best.</p> <p>Once you have an API key, you could run it from your terminal like so:</p> <pre class="md-code-block"><code class="md-code md-lang-bash">webpagetest <span class="md-code-built_in">test</span> http://ponyfoo.com --key <span class="md-code-string">&apos;&lt;your-key&gt;&apos;</span>
</code></pre> <p>Similarly, there&#x2019;s <a href="https://github.com/sideroad/grunt-wpt" target="_blank" aria-label="sideroad/grunt-wpt on GitHub">grunt-wpt</a> if you belong to the Grunt caste.</p> <h1 id="further-learning">Further learning</h1> <p>I almost forgot to mention <a href="https://github.com/tkadlec/grunt-perfbudget" target="_blank" aria-label="tkadlec/grunt-perfbudget on GitHub">grunt-perfbudget</a>! It lets you define <a href="http://timkadlec.com/2014/05/performance-budgeting-with-grunt/" target="_blank" aria-label="Performance budgeting with Grunt">a performance budget</a> for your application, something you definitely should take a look at! The plugin offers a bunch of options to measure things like how long the page takes to load, how fat it is, speed index, and many more. You can even configure the type of connection you&#x2019;d like to test it on <em>(DSL, 3G, <strong>LTE</strong>, <sub>dial-up</sub>, etc)</em>.</p> <p>Ooh, have you checked out <a href="http://perf.fail/" target="_blank" aria-label="perf.fail: do, learn, fail forward.">perf.fail</a>? It&#x2019;s a pretty amazing blog chock-full of case-studies about companies doing performance research and their findings, and companies not focusing resources on performance <em>(and the abysmal implications)</em>.</p> <p>If you already haven&#x2019;t, also watch <a href="http://addyosmani.com/" target="_blank" aria-label="Pay a visit to Addy&apos;s blog, too!">Addy</a>&#x2019;s <a href="https://www.youtube.com/watch?v=FEs2jgZBaQA" target="_blank" aria-label="CSS Performance Tooling by Addy Osmani">CSS Performance Tooling</a> talk at CSSConf EU 2014.</p></div>
