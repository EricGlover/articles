<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/gulp-grunt-whatever">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/gulp-grunt-whatever"><div></div></a>

<h1>Gulp, Grunt, Whatever</h1>

<p><kbd>build</kbd> <kbd>grunt</kbd> <kbd>gulp</kbd> <kbd>npm</kbd></p>

<blockquote><p><a href="http://gulpjs.com/" target="_blank">Gulp</a> is a recently spawned streaming build system which shows a lot of promise. It brings <a href="https://github.com/gulpjs/gulp/" target="_blank">a really terse code-base</a> to the table, which you can actually walk through <em>in &#x2026;</em></p></blockquote>

<div><p><a href="http://gulpjs.com/" target="_blank">Gulp</a> is a recently spawned streaming build system which shows a lot of promise. It brings <a href="https://github.com/gulpjs/gulp/" target="_blank">a really terse code-base</a> to the table, which you can actually walk through <em>in under ten minutes</em>. That&#x2019;s a lot to say when pitching it against Grunt, which is <a href="https://github.com/gruntjs/grunt" target="_blank">quite larger</a> than that.</p></div>

<blockquote></blockquote>

<div><p>Remember Grunt? I&#x2019;ve <a href="https://ponyfoo.com/search/tagged/grunt">blogged about it extensively</a> in the past, and I&#x2019;m <a href="http://bevacqua.io/buildfirst" target="_blank">even writing a book</a> which features Grunt as its go-to build tool. It&#x2019;s an awesome <em>tool</em>, you should try it some time.</p> <p><a href="http://www.100percentjs.com/just-like-grunt-gulp-browserify-now/" target="_blank">Some people</a> claim that Grunt will eventually be gulped by Gulp, and surely more will follow. I find this to be <a href="http://www.youtube.com/watch?v=kRhW_zMlf0Y" target="_blank">outrageous, egregious, preposterous</a>. It&#x2019;s not as clear cut, Grunt has <em>a lot of benefits</em> over Gulp, and so does Gulp over Grunt.</p> <p>In this article I aim to <strong>introduce Gulp</strong>, as it&#x2019;s fairly new, having been released <em>around 6 months ago</em>. Then, <em>I&#x2019;ll compare it with Grunt</em>, pointing out which tool does what better, and why.</p> <p><a href="http://gulpjs.com/" target="_blank"><img src="https://i.imgur.com/yFeBvMO.png" alt="gulp.png" title="gulp.png"></a></p></div>

<div><h1 id="introducing-gulp-1">Introducing <a href="http://gulpjs.com/" target="_blank" aria-label="Gulp Streaming Build System">Gulp</a></h1> <p>You might want to kick things off by <a href="https://github.com/gulpjs/gulp/" target="_blank" aria-label="gulpjs/gulp on GitHub">going through the README</a>, although I would reccomend you skim through the source code, as there aren&#x2019;t really a lot of surprises there, just some well thought-out, and concise code.</p> <p>As you might&#x2019;ve read while skimming over their documentation, installing Gulp is very reminiscent of what you had to do with Grunt.</p> <ul> <li>Have a <code class="md-code md-code-inline">package.json</code></li> <li><code class="md-code md-code-inline">npm install -g gulp</code></li> <li><code class="md-code md-code-inline">npm install --save-dev gulp</code></li> <li>Create a <code class="md-code md-code-inline">gulpfile.js</code></li> <li><code class="md-code md-code-inline">gulp</code></li> </ul> <p>At this point, the main difference with Grunt is that they didn&#x2019;t take their <strong>CLI</strong> out of core <em>(at least not yet)</em>, which might confuse you if you don&#x2019;t <a href="http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/" target="_blank" aria-label="npm 1.0: Global vs Local installation">understand global installs</a> in <code class="md-code md-code-inline">npm</code>.</p> <p>Before heading to a sample gulpfile, let&#x2019;s look at how the API looks like. There&#x2019;s five methods, and that&#x2019;s all you need. That&#x2019;s awesome, a concise API really helps keep the module focused on just what it&#x2019;s good at, processing build tasks.</p> <ul> <li><code class="md-code md-code-inline">.src(globs[, options])</code> takes a <a href="https://github.com/isaacs/node-glob" target="_blank" aria-label="isaacs/node-glob on GitHub">glob</a> and returns an input stream</li> <li><code class="md-code md-code-inline">.dest(path)</code> takes a path and returns an output stream</li> <li><code class="md-code md-code-inline">.task(name[, deps], fn)</code> defines a task</li> <li><code class="md-code md-code-inline">.run(tasks...[, cb])</code> runs tasks</li> <li><code class="md-code md-code-inline">.watch(glob [, opts], cb)</code> watches the file system</li> </ul> <p>I must say, that API is just awesome. Let&#x2019;s look at a simple task to compile Jade templates, taken from Gulp&#x2019;s documentation. Here, <code class="md-code md-code-inline">jade()</code> and <code class="md-code md-code-inline">minify()</code> are Gulp plugins, we&#x2019;ll get to those in a minute.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">gulp.src(<span class="md-code-string">&apos;./client/templates/*.jade&apos;</span>)
  .pipe(jade())
  .pipe(minify())
  .pipe(gulp.dest(<span class="md-code-string">&apos;./build/minified_templates&apos;</span>));
</code></pre> <p>There isn&#x2019;t much boilerplate code involved, due to the fact that we&#x2019;re just writing code as opposed to putting together a configuration object.</p> <p>In Grunt you&#x2019;d need some boilerplate to get this thing going, such as loading <code class="md-code md-code-inline">npm</code> modules with a rather weird <code class="md-code md-code-inline">grunt.loadNpmTasks</code> method, creating a task alias that combines the required tasks, and configuring each of them to do what you need. One of the issues with Grunt which is solved by Gulp is that a single monolithic configuration object forces you to jump through hoops in order to achieve the results you want. If you have a workflow which copies a file and minifies something else, and another one which copies an unrelated file, the <code class="md-code md-code-inline">copy</code> task configuration ends up with two completely unrelated <code class="md-code md-code-inline">copy</code> operations, albeit under different targets.</p> <p>Gulp does a good job of showing how code over configuration can help prevent such an scenario where configuration ends up being confusing and hard to digest.</p> <h2 id="savoring-a-gulp">Savoring a <code class="md-code md-code-inline">gulp</code></h2> <p>Consider this short sample <code class="md-code md-code-inline">gulpfile.js</code>, adapted from what&#x2019;s on the docs for Gulp.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> gulp = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;gulp&apos;</span>);
<span class="md-code-keyword">var</span> uglify = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;gulp-uglify&apos;</span>);

gulp.task(<span class="md-code-string">&apos;scripts&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">()</span> </span>{
  <span class="md-code-comment">// Minify and copy all JavaScript (except vendor scripts)</span>
  gulp.src([<span class="md-code-string">&apos;client/js/**/*.js&apos;</span>, <span class="md-code-string">&apos;!client/js/vendor/**&apos;</span>])
    .pipe(uglify())
    .pipe(gulp.dest(<span class="md-code-string">&apos;build/js&apos;</span>));

  <span class="md-code-comment">// Copy vendor files</span>
  gulp.src(<span class="md-code-string">&apos;client/js/vendor/**&apos;</span>)
    .pipe(gulp.dest(<span class="md-code-string">&apos;build/js/vendor&apos;</span>));
});

<span class="md-code-comment">// The default task (called when you run `gulp`)</span>
gulp.task(<span class="md-code-string">&apos;default&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">()</span> </span>{
  gulp.run(<span class="md-code-string">&apos;scripts&apos;</span>);

  <span class="md-code-comment">// Watch files and run tasks if they change</span>
  gulp.watch(<span class="md-code-string">&apos;client/js/**&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">(event)</span> </span>{
    gulp.run(<span class="md-code-string">&apos;scripts&apos;</span>);
  });
});
</code></pre> <p>Even if you don&#x2019;t know Node streams, this is pretty readable, right? I&#x2019;d argue it&#x2019;s more readable than a <code class="md-code md-code-inline">Gruntfile.js</code> which does the same things, because in this case we&#x2019;re simply following the code, and guessing what it does becomes much easier then. Take out comments stating the obvious, and you&#x2019;ve got yourself a terse <code class="md-code md-code-inline">gulpfile.js</code>.</p> <p>The fact that Gulp provides a reasonable <code class="md-code md-code-inline">.watch</code> implementation as part of their core API is also encouraging, as that&#x2019;s a key piece of functionality which gives a lot of value to a build system during development. Support for <a href="https://github.com/gulpjs/gulp#async-task-support" target="_blank" aria-label="Asynchronous Task Support in Gulp">asynchronous task development</a> feels much more integrated in Gulp than it does in Grunt, where targets really complicate matters when passing values to tasks.</p> <p>Generally speaking, the API provided by Gulp makes more sense and is easier to use than that in Grunt. That&#x2019;s more or less the argument for Gulp. A <strong>clean, concise, and awesome</strong> API. Simple plugins which do <strong>one thing very well</strong>, and not whatever they feel like, as witnessed in many Grunt tasks. Not everything is pink roses for Gulp, though, and there are a few downsides to it as well.</p> <h2 id="dissecting-gr-u-nt-lp">Dissecting <code class="md-code md-code-inline">/Gr?u(nt|lp)/</code></h2> <p>Let&#x2019;s see where the comparison between both task runners breaks down. Gulp is streams all the way down, almost as if you were shell scripting. That is, if you &#x201C;get&#x201D; <a href="http://www.youtube.com/watch?v=lQAV3bPOYHo" target="_blank" aria-label="Harnessing the awesome power of streams">Node streams</a>. Otherwise, you&#x2019;re going to have a bad time.</p> <p><a href="http://www.youtube.com/watch?v=lQAV3bPOYHo" target="_blank" aria-label="Harnessing the awesome power of streams"><img alt="streams.jpg" class="" src="https://i.imgur.com/pnEIqGO.jpg"></a></p> <p>That being said, if you&#x2019;re a Node person, it&#x2019;s hard to ignore the audacity with which Gulp has you set up a build flow using code, rather than configuration, like Grunt does. This is, however, an undeniable drawback of Gulp. Some people will just never get streams. They might be PHP workers, or some other server-side voodoo like Ruby, or Python, and not be familiar at all with Node streams and buffers. They might know Common.JS, but that&#x2019;s as far as they&#x2019;ll ever get from their comfort zone. For those people, Gulp will never be a choice over Grunt.</p> <blockquote> <p>While Gulp is easier to read, Grunt is easier to write, and sometimes that&#x2019;s more valuable.</p> </blockquote> <p>Gulp is oriented to do build stuff, and more specifically, things which <em>deal in files</em>. That&#x2019;s pretty much the bottom-line of their &#x201C;In, Out, Watch&#x201D; API. This is good, bad, and something else. It&#x2019;s good because it focuses on doing one thing. Builds. That&#x2019;s it, you have some inputs, and then you have some outputs, using some transforms which help shape them. It&#x2019;s bad because doing non-build stuff is harder with <em>such a precise API</em>, sending out <a href="https://npmjs.org/package/grunt-winston" target="_blank" aria-label="grunt-winston can log data over different transports">build notifications</a>, or spinning up <a href="https://github.com/bevacqua/grunt-ec2" target="_blank" aria-label="grunt-ec2 creates, deploys to, and shuts down Amazon EC2 instances">Amazon EC2 instances</a> goes against what Gulp is designed to deliver.</p> <p>Gulp is <strong>extremely new</strong> and we&#x2019;ll have to see <em>how its ecosystem evolves</em>, but I don&#x2019;t expect deployment Gulp tasks to gain significant adoption over what already exists in Grunt. I think that&#x2019;s a good thing, I don&#x2019;t believe Gulp could &#x201C;beat&#x201D; Grunt in CI and deployment circles, whereas I think it&#x2019;ll completely take over simpler workflows which don&#x2019;t involve much more than building client-side assets and pushing to Heroku.</p> <h2 id="gulp-won-t-sip-out-grunt">Gulp <em>won&#x2019;t sip out</em> Grunt</h2> <p>There are a few reasons why I believe Gulp won&#x2019;t push Grunt to the brink of dehydration out in the desert. If anything, it&#x2019;ll bring more attention to it, by pushing the boundaries of what JavaScript task runners can do. First off, Gulp won&#x2019;t &#x201C;beat&#x201D; Grunt because it isn&#x2019;t anyone&#x2019;s goal for that to happen, certainly not that of industry leaders.</p> <blockquote class="twitter-tweet"><p>Grunt vs. Gulp: both serve different needs &amp; can coexist happily. See: <a href="http://t.co/fQ5G8HDNwl">http://t.co/fQ5G8HDNwl</a> &amp;&amp; <a href="https://t.co/joUVeRqj8T">https://t.co/joUVeRqj8T</a>. We&apos;ll support both</p>&#x2014; Addy Osmani (@addyosmani) <a href="https://twitter.com/addyosmani/statuses/420870024379637760">January 8, 2014</a></blockquote> <p>This might come as news, but it shouldn&#x2019;t come as a surprise. A lot of effort went into the current state of Grunt, and it wouldn&#x2019;t make a lot of sense laying waste to that by porting it all out to the latest hot chick in town, you have to make a choice. Stick to what you&#x2019;ve got, or go out chasing the popular blonde of mystery.</p> <p>Secondly, like I&#x2019;ve mentioned earlier, <strong>Gulp introduces a barrier of entry that doesn&#x2019;t exist in Grunt</strong>, non-Noders will have a hard time dealing with streams, pipes, buffers, asynchronous JavaScript in general <em>(promises, callbacks, whatever)</em>, and I just don&#x2019;t see how it can strive amongst non-Noders looking for a front-end build system, considering those conditions.</p> <p>Furthermore, Gulp <strong>doesn&#x2019;t solve any new problems</strong> really. The API is awesome and straightforward, but it does complicate non-build tasks, and Grunt has the upper hand in this one. It boasts <a href="http://gruntjs.com/plugins" target="_blank" aria-label="Grunt Plugin Listing">over 2000 plugins</a> registered on <code class="md-code md-code-inline">npm</code>, against the <a href="http://gratimax.github.io/search-gulp-plugins/" target="_blank" aria-label="Search for Gulp Plugins">~200-ish</a> going for Gulp. That being said, it&#x2019;d be interesting to see the ability to straight up run Grunt tasks in Gulp, but I don&#x2019;t think it would ever stick. I doubt using <code class="md-code md-code-inline">/Gr?u(nt|lp)/</code> would make your life any easier, no matter what. If you need both, that&#x2019;s <em>probably a sign that you should just stick with Grunt</em>.</p> <p><img alt="regex.png" title="To generate #1 albums, &apos;jay --help&apos; recommends the -z flag." class="" src="https://i.imgur.com/Ih0Y1Zw.png"></p> <p>There&#x2019;s also a <em>speed factor</em> involved. I&#x2019;ll leave the merits of such speed gains for you to mull over. The important take-away here should be that there isn&#x2019;t a one-size-fits-all answer. Gulp might be faster, Grunt might be more &#x201C;all-encompassing&#x201D;, but at the end of the day, you&#x2019;ll have to choose one over the other. Don&#x2019;t use both in the same application. Don&#x2019;t be <em>that guy</em>.</p> <blockquote class="twitter-tweet"><p>just switched a project from <a href="https://twitter.com/search?q=%23gruntjs&amp;src=hash">#gruntjs</a> to <a href="https://twitter.com/search?q=%23gulpjs&amp;src=hash">#gulpjs</a> - simpler code, &amp; build time on save during watch from 3-5sec to 10-20ms. I kid you not.</p>&#x2014; Andy Joslin (@andytjoslin) <a href="https://twitter.com/andytjoslin/statuses/416424985662468097">December 27, 2013</a></blockquote> <p>Something else we might need to factor in is the case of <em>Grunt not really grunting</em> all that much these days. This is a worrysome factor you should also be taking into account.</p> <h2 id="the-boar-is-becoming-kind-of-stale">The boar is becoming kind of stale</h2> <p>Grunt might <em>drown on its own</em>. It sat on <code class="md-code md-code-inline">0.4.1</code> for ages, before moving to an unimpressive <code class="md-code md-code-inline">0.4.2</code> release, and it doesn&#x2019;t seem to be going places now, either. Activity on the <a href="https://twitter.com/gruntjs" target="_blank" aria-label="@gruntjs on Twitter">@gruntjs</a> Twitter account is kind of flat-lining these days, and that&#x2019;s not a good sign, either.</p> <p>I&#x2019;m really hoping this is just transitional as planning for <code class="md-code md-code-inline">0.5.0</code> is underway, but I feel like the team moved on to other projects. While I wouldn&#x2019;t consider it abandoned, it&#x2019;s a concern that I haven&#x2019;t seen raised yet. What I&#x2019;d love to see is an eventual <code class="md-code md-code-inline">1.0.0</code> release with a re-imagined configuration structure that deals with <em>the problems we&#x2019;ve experimented thus far</em>. Easier plugin loading, a watch mechanism in core similar to what Gulp did, simpler file description semantics, and a reduced overhead for configuring tasks in general.</p> <p>Of course, it&#x2019;s easy to <em>want</em> those things, but it&#x2019;s hard to implement them without breaking most of the existing 2000 plugins. Considering the plugin ecosystem is one of Grunt&#x2019;s most valuable assets, it&#x2019;ll be hard to get right a release plan that&#x2019;s both sensible and meaningful. We&#x2019;ll just have to sit and wait, or you might want to <a href="https://github.com/gruntjs/grunt/issues?milestone=7" target="_blank" aria-label="Grunt issues for the 0.5.0 milestone">go ahead and propose something</a> to be implemented in <code class="md-code md-code-inline">0.5.0</code>.</p> <h2 id="the-case-for-doing-nothing">The case for doing nothing</h2> <p>Right wing UNIX extremists have <a href="http://substack.net/task_automation_with_npm_run" target="_blank" aria-label="task automation with npm run">time</a> and <a href="https://gist.github.com/substack/8313379" target="_blank" aria-label="introducing ./task.js, THE new javascript task runner automation framework">again</a> suggested doing nothing. Forget about Gulp, Grunt, whatever. Just do nothing. I don&#x2019;t agree with this sort of extremism, you might just be more comfortable writing everything in JavaScript. It does, however, hold some merit in its premise. In the case of Gulp, I do consider the <code class="md-code md-code-inline">npm run</code> approach as a valid questioning of its purpose.</p> <p>Gulp is pretty close to doing &#x201C;nothing&#x201D;, a la <code class="md-code md-code-inline">npm run</code>, while at the same time it kind of does &#x201C;something&#x201D;, like Grunt does. I think Gulp provides value in providing Windows support, but it does introduce a certain amount of complexity, so it&#x2019;s really a trade-off. You need to ask yourself what you&#x2019;re looking for. If it&#x2019;s just the simplicity, you might be better off just using <code class="md-code md-code-inline">npm run</code>!</p> <p>The case for Windows support might not hold a lot of meaning within the Node community itself, since most of us seem to be working on <em>*nix</em>, but it does become a factor in other communities, which Grunt <a href="https://npmjs.org/search?q=grunt-php" target="_blank" aria-label="although I&apos;ve no factual information to support that claim">seems to be penetrating</a>. I agree you should use some flavor of <code class="md-code md-code-inline">bash</code> for Windows, it&#x2019;s still a pain doing just about anything in the command-line, and there isn&#x2019;t really much to say in favor of <em>not using</em> Grunt on Windows.</p> <p><a href="http://www.youtube.com/watch?v=EQnaRtNMGMI" target="_blank" aria-label="The Nothing Pitch"><img alt="nothing.png" class="" src="https://img.youtube.com/vi/EQnaRtNMGMI/0.jpg"></a></p> <p>So use Gulp, use Grunt, <em>whatever</em>.</p> <h2 id="whatever-but">Whatever, <em>But</em></h2> <p>Grunt wins at teaching people how to do builds, and even then, it&#x2019;s pretty hard to put it <a href="http://24ways.org/2013/grunt-is-not-weird-and-hard/" target="_blank" aria-label="Grunt for People Who Think Things Like Grunt are Weird and Hard">in terms anyone can understand</a>, but it fails at keeping it short. Gulp wins at being terse and having a gorgeous API, but it fails at the entry level, because of streams being hard to grasp at first. In the low-risk low-gain corner we have <code class="md-code md-code-inline">npm run</code>. It wins at not doing anything, resulting in no overhead, but it fails at being cross-platform, if that&#x2019;s something that worries you.</p> <p>Make a choice by yourself, don&#x2019;t just pick something <em>because XYZ said so</em>. Pick the tool which works for you. The one you understand, are comfortable with. Above all, the one <strong>that fits your needs</strong>. Don&#x2019;t go blindly chasing the latest fad because someone else tells you to. Similarly, don&#x2019;t get stuck with monolithic jQuery applications <em>(just to give out an example)</em>, try something else. Innovate. Be the change you want to see in the world.</p> <blockquote> <p><strong>Be the change you want to see in the world.</strong></p> </blockquote> <p>I need a drink.</p></div>
