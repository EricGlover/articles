<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/master/contributing.markdown"><code>contributing.markdown</code></a> for details.</sub>

<a href="https://ponyfoo.com/articles/modularizing-your-front-end"><div></div></a>

<h1>Modularizing Your Front-End</h1>

<p><kbd>ponyfoo</kbd> <kbd>front-end</kbd> <kbd>modules</kbd> <kbd>browserify</kbd> <kbd>npm-run</kbd> <kbd>gulp</kbd></p>

<blockquote><p>In the past <a href="https://ponyfoo.com/2014/03/07/a-less-convoluted-event-emitter-implementation">I&#x2019;ve wrote</a> about a small alternative to <a href="https://github.com/caolan/async" target="_blank"><code>async</code></a>, named <a href="https://github.com/bevacqua/contra" target="_blank"><code>contra</code></a>, which is <em>barely over 2kb</em>, and has the browser at its heart. It comes with the usual &#x2026;</p></blockquote>

<div><p>In the past <a href="https://ponyfoo.com/2014/03/07/a-less-convoluted-event-emitter-implementation">I&#x2019;ve wrote</a> about a small alternative to <a href="https://github.com/caolan/async" target="_blank"><code class="md-code md-code-inline">async</code></a>, named <a href="https://github.com/bevacqua/contra" target="_blank"><code class="md-code md-code-inline">contra</code></a>, which is <em>barely over 2kb</em>, and has the browser at its heart. It comes with the usual suspects, allowing you to craft asynchronous flows in series or concurrently, as well as a few functional methods, an event emitter implementation, and a queue which powers most of the library.</p></div>

<div></div>

<div><p><a href="https://github.com/bevacqua/contra" target="_blank"><img src="https://raw.github.com/bevacqua/contra/master/resources/contra.png" alt="contra.png"></a></p> <p>I&#x2019;ve also discussed <a href="https://github.com/bevacqua/campaign" target="_blank">campaign</a>, where I modularized <a href="https://ponyfoo.com/2014/01/07/email-sending-done-right">email sending and templating</a>. That was really mostly a port of what was already in Pony Foo&#x2019;s code base, and thus <a href="https://github.com/bevacqua/ponyfoo" target="_blank">open-source</a>, but written in a more portable way that could be used across other projects or efforts. In that occasion I explained the motives for developing the library as well, which mostly revolved around having a reusable email sender that was easier to bring into a Node application than the existing alternatives.</p> <p>In this article I&#x2019;ll <strong>describe the development process, choices I&#x2019;ve made, and contents of my latest open-source</strong> projects. In lieu with Pony Foo&#x2019;s humble, <a href="https://ponyfoo.com/2012/12/25/pony-foo-begins"><em>humble beginnings</em></a>, I&#x2019;ve decided to continue on the path set forth back when I wrote <a href="https://github.com/bevacqua/campaign" target="_blank">campaign</a>, and <a href="https://github.com/bevacqua/ponyfoo/tree/redo" target="_blank">re-do Pony Foo from scratch</a>. The difference is that this time I&#x2019;ve been putting more of a <strong>focus on modularity</strong>, basing off of what I&#x2019;ve learned over the last year <em>(and from the glaring mistakes I made implementing the original blog engine)</em>.</p> <ul> <li><a href="https://github.com/bevacqua/flexarea" target="_blank"><code class="md-code md-code-inline">flexarea</code></a> is a tiny library that helps humans resize <code class="md-code md-code-inline">&lt;textarea&gt;</code> elements</li> <li><a href="https://github.com/bevacqua/hint" target="_blank"><code class="md-code md-code-inline">hint</code></a> is a pure CSS implementation of the tooltips you can see today on <strong>Pony Foo</strong></li> <li><a href="https://github.com/bevacqua/taunus" target="_blank"><code class="md-code md-code-inline">taunus</code></a> is a <em>micro MVC</em> framework <strong>I feel extremely excited about</strong></li> </ul> <p>Caution: This article contains words about <a href="https://github.com/substack/node-browserify" target="_blank">Browserify</a>, <a href="http://substack.net/task_automation_with_npm_run" target="_blank"><code class="md-code md-code-inline">npm run</code></a>, <a href="https://github.com/gulpjs/gulp" target="_blank">Gulp</a>, framework-less JavaScript, and ponies. <strong>Reader discretion is advised.</strong> Also, not all of it might make sense.</p></div>

<div><p>If you&#x2019;ve glanced over the projects, you&#x2019;ll realize that both <a href="https://github.com/bevacqua/flexarea" target="_blank" aria-label="Pretty flexible textareas"><code class="md-code md-code-inline">flexarea</code></a> and <a href="https://github.com/bevacqua/hint" target="_blank" aria-label="Awesome tooltips at your fingertips"><code class="md-code md-code-inline">hint</code></a> are quite simple. However, they are also highly reusable, and it&#x2019;d be interesting to share</p> <h1 id="flexible-textarea-elements">Flexible <code class="md-code md-code-inline">&lt;textarea&gt;</code> elements</h1> <p>Flexarea just provides a little grip you can drag to resize a <code class="md-code md-code-inline">&lt;textarea&gt;</code>, and nothing else. This is how it currently looks like.</p> <p><a href="https://github.com/bevacqua/flexarea" target="_blank" aria-label="Pretty flexible textareas"><img alt="flexarea.png" class="" src="https://camo.githubusercontent.com/57839a85a2dbc4571da5243a30f51db24426ce2f/687474703a2f2f692e696d6775722e636f6d2f5a5770414875312e706e67"></a></p> <p>The API is fairly simple. <code class="md-code md-code-inline">flexarea</code> is a function, it takes a DOM node, surrounds it with a wrapper element, and appends the &#x201C;grip&#x201D; element to the wrapper. The grip is what&#x2019;s on the bottom of the <code class="md-code md-code-inline">&lt;textarea&gt;</code> shown in the picture above. As you can <a href="https://github.com/bevacqua/flexarea/blob/master/src/flexarea.js" target="_blank" aria-label="flexarea.js on GitHub">see in the repository</a>, I used a Common.JS module for the component, meaning that I need Browserify in a compile step to try the component out, as well as during releases. For local development I deeply recommend you to familiarize yourself with <a href="https://www.npmjs.org/doc/cli/npm-link.html" target="_blank" aria-label="npm link documentation"><code class="md-code md-code-inline">npm link</code></a> if you&#x2019;re a package author, as it&#x2019;ll <strong>considerably speed up</strong> your development productivity.</p> <h2 id="gulp-npm-run-whatever">Gulp, <code class="md-code md-code-inline">npm run</code>, Whatever</h2> <p>There&#x2019;s a very similar <a href="https://github.com/bevacqua/flexarea/blob/master/gulpfile.js" target="_blank" aria-label="Gulpfile for bevacqua/flexarea">Gulpfile</a> to the one I detailed in <a href="https://ponyfoo.com/2014/01/27/my-first-gulp-adventure" aria-label="My First Gulp Adventure">My First Gulp Adventure</a>. The &#x201C;big&#x201D; difference in the Gulpfile is that I run Browserify, given I&#x2019;m using Common.JS in my source code. Browserify takes a little dancing in Gulp. Here&#x2019;s how it ends up looking like, after removing some of the cruft, getting us just the core idea.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> gulp = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;gulp&apos;</span>);
<span class="md-code-keyword">var</span> streamify = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;gulp-streamify&apos;</span>);
<span class="md-code-keyword">var</span> rename = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;gulp-rename&apos;</span>);
<span class="md-code-keyword">var</span> uglify = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;gulp-uglify&apos;</span>);
<span class="md-code-keyword">var</span> source = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;vinyl-source-stream&apos;</span>);
<span class="md-code-keyword">var</span> browserify = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;browserify&apos;</span>);

gulp.task(<span class="md-code-string">&apos;build&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> browserify(<span class="md-code-string">&apos;./src/flexarea.js&apos;</span>)
    .bundle({ debug: <span class="md-code-literal">true</span>, standalone: <span class="md-code-string">&apos;flexarea&apos;</span> })
    .pipe(source(<span class="md-code-string">&apos;flexarea.js&apos;</span>))
    .pipe(gulp.dest(<span class="md-code-string">&apos;./dist&apos;</span>))
    .pipe(streamify(rename(<span class="md-code-string">&apos;flexarea.min.js&apos;</span>)))
    .pipe(streamify(uglify()))
    .pipe(gulp.dest(<span class="md-code-string">&apos;./dist&apos;</span>));
});
</code></pre> <p>The code above would compile my source code into <a href="https://github.com/umdjs/umd" target="_blank" aria-label="Universal Module Definition">a UMD module</a> (also read <a href="http://addyosmani.com/writing-modular-js/" target="_blank" aria-label="Writing Modular JavaScript">Writing Modular JavaScript</a> by <a href="https://twitter.com/addyosmani" target="_blank" aria-label="@addyosmani on Twitter">Addy Osmani</a> while you&#x2019;re at it). That is pretty awesome. You write CJS code, with all the benefits that that implies, such as no implicit globals and no <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank" aria-label="Immediately Invoked Function Expressions">IIFE</a> hell, and you get a module that can be run and included pretty much everywhere you can run JavaScript! Except there&#x2019;s no way in hell compiling a single file into two distributions should involve around 15 lines of code. Aren&#x2019;t you using a library to simplify things? Compare that to using <code class="md-code md-code-inline">npm run</code> and the <a href="https://github.com/substack/node-browserify#usage" target="_blank" aria-label="Browserify CLI Usage"><code class="md-code md-code-inline">browserify</code> CLI</a>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">browserify src/flexarea.js -s flexarea -o dist/flexarea.js -d
browserify src/flexarea.js -s flexarea -o dist/flexarea.min.js -t uglifyify
</code></pre> <p><em>Anyways.</em> Lately I&#x2019;ve been leaning more and more into <a href="https://ponyfoo.com/2014/01/09/gulp-grunt-whatever" aria-label="Gulp, Grunt, Whatever">the &#x201C;whatever&#x201D; camp</a>. I find that it&#x2019;s much leaner to just use <code class="md-code md-code-inline">npm run</code>, and <a href="https://github.com/bevacqua/ponyfoo/blob/redo/build/release" target="_blank" aria-label="Release build file on ponyfoo@redo">putting together a build file</a> is incredibly faster if you aren&#x2019;t dealing with a formal build system such as Grunt, or Gulp. The pretty awesome part of <code class="md-code md-code-inline">npm run</code> some people are surprised about is that you get access to <code class="md-code md-code-inline">node_modules</code> for free. Meaning that rather than having to do something weird like <code class="md-code md-code-inline">node_modules/browserify/bin/browserify {args}</code>, <code class="md-code md-code-inline">npm</code> figures all of that out for you.</p> <h2 id="you-were-saying">You Were Saying</h2> <p>Right. So. The <code class="md-code md-code-inline">flexarea</code> thing. The code itself is irrelevant to this article, but I want to focus on two aspects of how I put it together.</p> <h2 id="nico-style-css">&#x201C;nico-style&#x201D; CSS</h2> <p>I&#x2019;ve come up with a <strong>CSS naming convention</strong> similar to <a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/" target="_blank" aria-label="MindBEMding &#x2013; getting your head &#x2019;round BEM syntax">BEM</a>, but without all of the weird dashes (for the most part). Rather than splitting your CSS declarations in blocks, elements, and modifiers, I&#x2019;ve come up with something arguably more pragmatic. You should start with a unique namespace for your component, preferably 2 to 4 characters long, such as <code class="md-code md-code-inline">fa</code> in the case of <em><strong>f</strong>lex<strong>a</strong>rea</em>. Then you can use as many words as you&#x2019;d like to name classes associated with that component. You might decide to have <code class="md-code md-code-inline">fa-container</code>, <code class="md-code md-code-inline">fa-items</code>, <code class="md-code md-code-inline">fa-item</code>, and <code class="md-code md-code-inline">fa-item-selected</code>, or just <code class="md-code md-code-inline">fa-selected</code>. In practice it won&#x2019;t matter all that much as long as the class names are reasonable and you don&#x2019;t use a single namespace for various components.</p> <p>Indeed, sometimes you&#x2019;ll find yourself in need of slightly changing a component in a particular view or maybe when it&#x2019;s inside of another component. The preferred approach here is to <strong>duplicate the class name but keep the parent namespace</strong>. Suppose you have a <code class="md-code md-code-inline">fa</code> component in the <code class="md-code md-code-inline">at</code> (accounting) view, and you want to change the bottom margin for <code class="md-code md-code-inline">fa-item</code> in the accounting view. Where possible, the second approach is preferred, but it&#x2019;s also decent to have one or two levels of selector nesting.</p> <pre class="md-code-block"><code class="md-code md-lang-css"><span class="md-code-class">.at-container</span> <span class="md-code-class">.fa-item</span> <span class="md-code-rules">{
  <span><span class="md-code-attribute">margin-bottom</span>:<span class="md-code-value"> <span class="md-code-number">5px</span></span></span>;
<span>}</span></span>
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-css"><span class="md-code-class">.at-item</span> <span class="md-code-rules">{
  <span><span class="md-code-attribute">margin-bottom</span>:<span class="md-code-value"> <span class="md-code-number">5px</span></span></span>;
<span>}</span></span>
</code></pre> <p>If you are interested in this pattern, you might find it useful to check out the <a href="https://github.com/bevacqua/ponyfoo/tree/redo/client/css" target="_blank" aria-label="CSS at ponyfoo@redo on GitHub">Stylus files in ponyfoo@redo</a>. Note how I also keep components one per file, and modularize the style rules as aggressively as possible. Files are cheap, but a 2000 line stylesheet is every front-end developer&#x2019;s nightmare. Raise your hand if you&#x2019;ve seen one of those written in LESS, SASS, or Stylus, containing <strong>rules over six nesting levels deep</strong>. I have. It&#x2019;s <strong>not pretty</strong>.</p> <p><em>Disclaimer: I didn&#x2019;t dub it <em><strong>&#x201C;nico-style&#x201D;</strong></em>, but I didn&#x2019;t bother to give the convention a better name either.</em></p> <h2 id="framework-less-development">Framework-less Development</h2> <p>The other aspect of <code class="md-code md-code-inline">flexarea</code> that I think is worth mentioning is that it&#x2019;s framework-less. It has every reason to be. Why would you make a commitment to <a href="https://ponyfoo.com/2013/07/09/getting-over-jquery" aria-label="Getting Over jQuery">a large library like jQuery</a> just to provide a little bit of functionality such as a resizer? Would you add <strong>jQuery UI</strong> to that? Where does it end? How much did you really gain by adding all those extra constraints? It must be a lot, because on the flip side, you are getting bigger, and more importantly, you are limiting your project to <strong>&#x201C;nerds who use jQuery in their application&#x201D;</strong>, where you could just be writing code for <strong>&#x201C;any nerd with a browser&#x201D;</strong>. If your code didn&#x2019;t really depend on the DOM API, like in the case of <a href="https://github.com/bevacqua/contra" target="_blank" aria-label="Asynchronous flow control with a functional taste to it"><code class="md-code md-code-inline">contra</code></a>, then you could be targeting just about anyone with a JavaScript interpreter.</p> <p>Okay sure, so you need promises, and jQuery provides an implementation, oh &#x2013; how convenient! Well, you certainly didn&#x2019;t have to include all of jQuery for that. You could <em>at least try</em> and <a href="https://github.com/jquery/jquery#how-to-build-your-own-jquery" target="_blank" aria-label="How to Build Your Own jQuery">use a custom build</a>. Or you could also find yourself a Promise library which only does promises (and is closer to the ES6 Promise spec), such as <a href="https://github.com/tildeio/rsvp.js" target="_blank" aria-label="A lightweight library that provides tools for organizing asynchronous code">rsvp</a>. That sounds great! At least, you won&#x2019;t be turning down users who don&#x2019;t have jQuery in their projects.</p> <p>I believe jQuery is becoming less relevant, and that <strong>a polyfill-oriented approach should be preferred over using jQuery</strong>. This is not just insano-purist talk, jQuery damages mobile web performance. jQuery UI annihilates it. Before you go ahead and post a comment, I&#x2019;m not just talking about the size of these libraries. <strong>jQuery takes a long time to be interpreted in mobile devices.</strong> This happens on every request, regardless of how aggressively jQuery gets cached. That&#x2019;ll bite your page load times, making them slower every time.</p> <blockquote> <p>A <strong>polyfill-oriented</strong> approach should be preferred over using jQuery</p> </blockquote> <p><a href="http://remysharp.com/2010/10/08/what-is-a-polyfill/" target="_blank" aria-label="What is a Polyfill?">Polyfills</a>. Indeed, my mention of <a href="https://github.com/tildeio/rsvp.js" target="_blank" aria-label="A lightweight library that provides tools for organizing asynchronous code">rsvp</a> was just auxiliary to introducing <a href="https://github.com/jakearchibald/es6-promise" target="_blank" aria-label="A polyfill for ES6-style Promises">es6-promises</a>, a Promise polyfill <em>based</em> on <strong>rsvp</strong>. The awesomeness in <em>ponyfills</em> is that they <strong>aren&#x2019;t opinionated</strong> about the feature&#x2019;s API. If you want to use a feature, and there&#x2019;s a native implementation coming to most browsers, it makes sense using a polyfill because it&#x2019;s a drop-in fix for browsers where it&#x2019;s <em>not yet implemented</em>. You are also theoretically able to remove the polyfill cleanly once you deem it no longer necessary, based on the analysis of user agents coming your way. You just remove the reference and you are done. There&#x2019;s no large commitment, which would result in anxious keyboard pounding and long afternoons tediously refactoring your way out of an opinionated library&#x2019;s API.</p> <p><img alt="time.png" title="I&apos;d have to change all these files, ain&apos;t nobody got time fo dat!" class="" src="https://i.imgur.com/LkMiobQ.jpg"></p> <p><strong>TL;DR</strong> If there&#x2019;s a polyfill that already does what you need, then <strong>always prefer that over a library</strong> that forces you to adopt their own API. <a href="https://github.com/remy/polyfills" target="_blank" aria-label="Collection of Polyfills by Remy Sharp">Here&#x2019;s a few you can use</a> to bring browsers up to speed by enabling features like <code class="md-code md-code-inline">dataset</code>, <code class="md-code md-code-inline">classList</code>, and others.</p> <h1 id="hint">Hint</h1> <p>Hint made an even happier Pony. Remember the little tooltips that you get when hovering something in <strong>Pony Foo</strong>? Come on. <a href="https://github.com/bevacqua/hint" target="_blank" aria-label="Awesome tooltips at your fingertips">They&#x2019;re everywhere!</a>. <em>Here&#x2019;s another.</em></p> <p><a href="https://github.com/bevacqua/hint" target="_blank" aria-label="Awesome tooltips at your fingertips"><img alt="hint.png" class="" src="https://camo.githubusercontent.com/e7fef05529a194b8238efd6a7df9f0a16c65daef/687474703a2f2f692e696d6775722e636f6d2f454650356a34452e706e67"></a></p> <p>The hint in the figure shown above, though, isn&#x2019;t in production but rather using the <code class="md-code md-code-inline">hint</code> micro-library. I feel particularly good about <code class="md-code md-code-inline">hint</code> because I&#x2019;ve removed all JS from it, making it into a pure-CSS solution. All you have to do is add the stylesheet to your page, and then you can create hints with a very reasonable piece of markup. It&#x2019;s quite semantic, and you don&#x2019;t have to waste time telling a JavaScript library <strong>when</strong> it should be turning your attributes into the thing you want.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">a</span> <span class="md-code-attribute">data-hint</span>=<span class="md-code-value">&apos;The draft will be deleted&apos;</span>&gt;</span>Discard Draft<span class="md-code-tag">&lt;/<span class="md-code-title">a</span>&gt;</span>
</code></pre> <p>The cute thing about <code class="md-code md-code-inline">hint</code> is that I wrote it in <a href="http://learnboost.github.io/stylus/" target="_blank" aria-label="Expressive, dynamic, robust CSS">Stylus</a>, but I still provide a CSS distribution that gets <em>rebuilt during releases</em>. Certainly, it involves <a href="https://github.com/bevacqua/hint/blob/master/gulpfile.js" target="_blank" aria-label="Gulpfile for hint on GitHub">a bit of Gulp</a> work, but it&#x2019;s not as bad as with the <a href="https://github.com/substack/node-browserify" target="_blank" aria-label="browser-side require() the node.js way">Browserify</a> example we saw earlier.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">gulp.task(<span class="md-code-string">&apos;build&apos;</span>, [<span class="md-code-string">&apos;clean&apos;</span>], <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> gulp.src(<span class="md-code-string">&apos;./src/hint.styl&apos;</span>)
    .pipe(stylus())
    .pipe(gulp.dest(<span class="md-code-string">&apos;./dist&apos;</span>))
    .pipe(rename(<span class="md-code-string">&apos;hint.min.css&apos;</span>))
    .pipe(minifyCSS())
    .pipe(size())
    .pipe(gulp.dest(<span class="md-code-string">&apos;./dist&apos;</span>));
});
</code></pre> <p>That being said, <code class="md-code md-code-inline">npm run stylus</code> would definitely be <strong>leaner and clearer</strong>. I guess that <em>copying and pasting</em> did win this battle on behalf of Gulp, though.</p> <pre class="md-code-block"><code class="md-code md-lang-bash">stylus src/hint.styl -o dist/hint.css
stylus src/hint.styl -o dist/hint.min.css --compress
wc -c dist/hint.min.css
</code></pre> <p>That&#x2019;s as far as builds go, but <strong>what about the component?</strong> I&#x2019;ve managed to turn the solution into a pure CSS one by getting rid of assumption that <code class="md-code md-code-inline">hint</code> cared about whether or not the attribute was empty. It&#x2019;d check that the hint wasn&#x2019;t empty and provide an API to either enable or disable a <code class="md-code md-code-inline">hint</code> tooltip. Oh, also, <a href="https://github.com/bevacqua/ponyfoo/blob/3a1bfc51a48d06db5868ab638df5c922e02e4afc/src/frontend/js/ext/jquery.ui.js#L4-L29" target="_blank" aria-label="$.hints in ponyfoo@3a1bfc51">that code was written in jQuery</a>. I decided that that validation was better left to the consumer, who can decide exactly when and how to apply <code class="md-code md-code-inline">data-hint</code> attributes on their DOM elements, and got rid of the JavaScript code.</p> <p>I mentioned Stylus, so I think it&#x2019;s also worth mentioning how easy it is to include <code class="md-code md-code-inline">hint</code> in your project provided that you are already using Stylus yourself. <a href="https://github.com/bevacqua/ponyfoo/blob/redo/client/css/components/data-hint.styl" target="_blank" aria-label="data-hint on ponyfoo@redo">This is how I do it</a> on <strong>ponyfoo@redo</strong>. There&#x2019;s <strong>no extra build step</strong> involved, because Stylus takes care of dependency resolution, much like Browserify does.</p> <pre class="md-code-block"><code class="md-code md-lang-css"><span class="md-code-at_rule">@<span class="md-code-keyword">import</span> <span class="md-code-string">&apos;node_modules/hint/src/hint&apos;</span>
</span></code></pre> <h5 id="that-s-it">That&#x2019;s it!</h5> <p>I&#x2019;ll leave <a href="https://github.com/bevacqua/taunus" target="_blank" aria-label="Taunus on GitHub">Taunus</a> for next week! I think it deserves its own article. <em>(and a little more polish!)</em></p></div>
