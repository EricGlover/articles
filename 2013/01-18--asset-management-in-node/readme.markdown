<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/asset-management-in-node">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/asset-management-in-node"><div><img src="https://i.imgur.com/QjEuYcm.jpg" alt="Asset Management in Node"></div></a>

<h1>Asset Management in Node</h1>

<p><kbd>ponyfoo</kbd> <kbd>nodejs</kbd> <kbd>npm</kbd> <kbd>assetify</kbd></p>

<blockquote><p>Client-side asset management reveals a series of issues with <strong>Node.JS</strong> and <strong>npm</strong> today:</p><ul> <li>Node.JS is just a few years old (it was born in <em>2009</em>)</li> <li>Some areas, such as client-side &#x2026;</li></ul></blockquote>

<div><p>Client-side asset management reveals a series of issues with <strong>Node.JS</strong> and <strong>npm</strong> today:</p></div>

<div></div>

<div><ul> <li>Node.JS is just a few years old (it was born in <em>2009</em>)</li> <li>Some areas, such as client-side asset managers, don&#x2019;t have a well defined <strong>best library</strong></li> <li>Publishing packages on <a href="https://npmjs.org/" target="_blank">npm</a> is astonishingly easy</li> <li>Large amounts of packages are available</li> </ul></div>

<div><p>This wouldn&#x2019;t be an issue if <strong>npm</strong> made it possible to <em>visualize</em> which packages are <em>most actively</em> being developed, maintained, and <strong>widely used</strong>. When looking for an asset manager, I found out there were <em>at least</em> five different asset managers I just <em>had</em> to try. But their interfaces felt clunky enough I ended up deciding to contribute to the mess with <a href="https://npmjs.org/package/assetify" target="_blank" aria-label="assetify on npm">yet another asset manager package</a>.</p> <h1 id="features">Features</h1> <p>I wanted an asset manager that was:</p> <ul> <li><strong>Easy to configure</strong>, I didn&#x2019;t want to spend <em>hours</em> figuring out what the package source was doing, or <em>supposed</em> to be doing</li> <li>I wanted to be able to create different <strong>profiles</strong>, yet manage everything the exact same way</li> <li>I wanted it to support <strong>pre-processing</strong>, such as compiling <em>SASS</em> or <em>CoffeeScript</em></li> <li><strong>Extensible</strong>, so that if it didn&#x2019;t support something out of the box, I could extend it intuitively to get the behavior I expected</li> <li><strong>Bundling and minification</strong> was also a must, but I wanted to be able to control this.</li> </ul> <p>And besides the above, I wanted the package to also deal with rendering the <code class="md-code md-code-inline">&lt;script&gt;</code> and <code class="md-code md-code-inline">&lt;link&gt;</code> tags. And I wanted it to do this in the <em>same order</em> I passed to the asset manager configuration, since <strong>order matters</strong>.</p> <h1 id="introducing-node-assetify-https-githubcom-bevacqua-node-assetify-node-assetify-on-github">Introducing <a href="https://github.com/bevacqua/node-assetify" target="_blank" aria-label="node-assetify on GitHub">node-assetify</a></h1> <p>I attempted to cover most of <strong>assetify</strong>&#x2019;s functionality in its <a href="https://github.com/bevacqua/node-assetify/blob/master/README.md" target="_blank" aria-label="node-assetify documentation">documentation</a> on <strong>GitHub</strong>.</p> <p>I think I did a good job of keeping the interface assetify exposes clean and simple. It supports a similar API on the server-side, through the <code class="md-code md-code-inline">require(&apos;assetify&apos;)</code> module as it does on view contexts, through <code class="md-code md-code-inline">res.locals.assetify</code>.</p> <p>I built it in such a way that allows you to switch between <em>development</em> and <em>production</em> modes just by turning a boolean, something I couldn&#x2019;t accomplish with the packages I&#x2019;ve tried out.</p> <p>My most recent addition to it (currently version <strong>0.0.8</strong>) was <strong>dynamic asset management</strong>, which, even though I didn&#x2019;t need for <a href="https://github.com/bevacqua/ponyfoo" target="_blank">Pony Foo</a>, I felt this was a feature that couldn&#x2019;t be missing in <strong>assetify</strong>.</p> <p>A useful pattern in web architecture is to decompose views into smaller chunks, or <em>partial views</em>. One of the <em>drawbacks</em> of such modularization, is handling script blocks. If you&#x2019;re <em>a purist</em>, you&#x2019;ll irrevocably want your script blocks <strong>grouped together at the bottom of the page</strong>. But you&#x2019;ll also want to <em>declare them in the same partial view</em> where you are going to be needing them.</p> <h3 id="dynamic-assets-to-the-rescue">Dynamic assets to the rescue</h3> <p>With assetify, you can use <code class="md-code md-code-inline">res.locals.assetify.js.add</code>, or just <code class="md-code md-code-inline">assetify.js.add</code> in view contexts, to keep your partials tidy and your scripts grouped. This method is just a glorified way of pushing the source code passed to the <code class="md-code md-code-inline">add</code> function into an array in the request object. Then, when the time comes to <code class="md-code md-code-inline">.emit()</code> your script blocks, dynamic asset blocks will be emitted as well, right after compiled static assets, where they <em>belong</em>.</p></div>
