<h1>The Micro Library Phenomenon</h1>

<p><kbd>js</kbd> <kbd>nodejs</kbd> <kbd>politics</kbd> <kbd>micro-library</kbd></p>

<blockquote><p>As of late, there seems to be a <em>steady trend</em> towards minimalist <a href="https://developer.mozilla.org/en/docs/DOM" target="_blank">DOM</a> (and <strong>BOM</strong>) abstractions, these micro-libraries generally trade <em>functionality and flexibility</em> for <em>&#x2026;</em></p></blockquote>

<div><p>As of late, there seems to be a <em>steady trend</em> towards minimalist <a href="https://developer.mozilla.org/en/docs/DOM" target="_blank">DOM</a> (and <strong>BOM</strong>) abstractions, these micro-libraries generally trade <em>functionality and flexibility</em> for <em>performance boosts.</em></p></div>

<div></div>

<div><p>The two most <em>common benefits</em> of using this kind of modules are:</p> <ul> <li>Dramatic <strong>performance boosts</strong>, sometimes by <em>a factor of ten</em>, or similar</li> <li><strong>Lightweight</strong> footprints. Less functionality translates into <em>less bandwidth going to waste</em></li> </ul> <p>You can browse for micro libraries <a href="http://microjs.com/" target="_blank">here</a>. I&#x2019;ll examine a couple, and then <em>theorize</em> on the subject.</p></div>

<div><h2 id="thindom">ThinDOM</h2> <p>The first example that pops to mind is <a href="https://github.com/jacobgreenleaf/ThinDOM" target="_blank" aria-label="ThinDOM by imgur, on GitHub">ThinDOM</a>, as it only came to light a little over <a href="http://imgur.com/blog/2013/05/21/tech-tuesday-jquery-dom-performance/" target="_blank" aria-label="jQuery DOM performance - imgur blog">a week ago</a>.</p> <p>ThinDOM is a thin <strong>DOM</strong> wrapper out-classes <a href="https://github.com/jquery/jquery" target="_blank" aria-label="jQuery on GitHub">jQuery</a> when it comes to <strong>DOM</strong> manipulation. It provides only <em>a few methods</em>, which are conveniently named like their jQuery counterparts:</p> <ul> <li><code class="md-code md-code-inline">.append()</code> is a blisteringly fast alternative to <code class="md-code md-code-inline">$.append</code></li> <li><code class="md-code md-code-inline">.css()</code> doesn&#x2019;t do any validation, or value transformation, <a href="https://github.com/jquery/jquery/blob/master/src/css.js#L111-L132" target="_blank" aria-label="$.css source on GitHub">like $.css does</a></li> <li><code class="md-code md-code-inline">.html()</code> doesn&#x2019;t provide any safety, no parsing, nothing. <a href="https://github.com/jquery/jquery/blob/master/src/manipulation.js#L124-L161" target="_blank" aria-label="$.html source on GitHub">$.html</a> is a tad slower</li> <li><code class="md-code md-code-inline">.attr()</code> just sets attribute values. That&#x2019;s it. Here&#x2019;s <a href="https://github.com/jquery/jquery/blob/master/src/attributes.js#L288-L334" target="_blank" aria-label="$.attr source on GitHub">$.attr</a>&#x2019;s take</li> <li><code class="md-code md-code-inline">.get()</code> unwraps the element wrapped under <strong>ThinDOM</strong></li> </ul> <p>Their API is <em>kind of clunky</em>. Their example isn&#x2019;t the prettiest.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> captionDOM = <span class="md-code-keyword">new</span> ThinDOM(<span class="md-code-string">&apos;div&apos;</span>).attr(<span class="md-code-string">&apos;class&apos;</span>, <span class="md-code-string">&apos;caption&apos;</span>)
    .append(<span class="md-code-keyword">new</span> ThinDOM(<span class="md-code-string">&apos;div&apos;</span>).attr(<span class="md-code-string">&apos;class&apos;</span>, <span class="md-code-string">&apos;votes&apos;</span>)
            .append(<span class="md-code-keyword">new</span> ThinDOM(<span class="md-code-string">&apos;a&apos;</span>).attr({<span class="md-code-string">&apos;class&apos;</span>: <span class="md-code-string">&apos;up&apos;</span>, <span class="md-code-string">&apos;href&apos;</span>: <span class="md-code-string">&apos;#&apos;</span>}))
            .append(<span class="md-code-keyword">new</span> ThinDOM(<span class="md-code-string">&apos;a&apos;</span>).attr({<span class="md-code-string">&apos;class&apos;</span>: <span class="md-code-string">&apos;down&apos;</span>, <span class="md-code-string">&apos;href&apos;</span>: <span class="md-code-string">&apos;#&apos;</span>})))
    .append(<span class="md-code-keyword">new</span> ThinDOM(<span class="md-code-string">&apos;div&apos;</span>).attr(<span class="md-code-string">&apos;class&apos;</span>, <span class="md-code-string">&apos;meta&apos;</span>)
            .append(<span class="md-code-keyword">new</span> ThinDOM(<span class="md-code-string">&apos;span&apos;</span>).text(author + <span class="md-code-string">&apos; - &apos;</span>))
            .append(<span class="md-code-keyword">new</span> ThinDOM(<span class="md-code-string">&apos;span&apos;</span>).text(points + <span class="md-code-string">&apos; point&apos;</span> + plural)))
    .append(<span class="md-code-keyword">new</span> ThinDOM(<span class="md-code-string">&apos;p&apos;</span>).html(body)).get();
</code></pre> <p>But&#x2026; if <em>it&#x2019;s performance</em> you need, then it definitely wins out.</p> <h2 id="zepto">Zepto</h2> <p>This library started out as an alternative to jQuery for the <em>mobile browser</em>. They didn&#x2019;t need to support IE in mobile browsers, so they cut that from what jQuery offers. To further expand this <em>footprint gap</em>, you can choose to leave out the sub-modules you don&#x2019;t need, in order to make the footprint <em>even lighter</em>.</p> <p>jQuery is currently sporting a <strong>32kB</strong> footprint, <a href="http://zeptojs.com/" target="_blank" aria-label="ZeptoJS lightweight jQuery alternative">Zepto</a> is a lightweight alternative, currently sitting at a maximum of <strong>9.7kB</strong> minified and gzipped.</p> <p>Zepto offers <strong>no support for IE</strong>, they recommend you to <em>fall back to jQuery</em> in IE.</p> <p>In conclusion, Zepto is awesome. If you can get away with it.</p> <p>There are thousands of micro-libraries like these, and probably even more so in the world of Node and <a href="https://ponyfoo.com/npmjs.org" aria-label="Node Package Manager">npm</a>.</p> <h1 id="why-is-any-of-this-relevant">Why is any of this relevant?</h1> <p>It&#x2019;s about philosophy. <em>Design philosophy</em>. And I think we owe this, in part, to Node. Most <a href="https://ponyfoo.com/npmjs.org" aria-label="Node Package Manager">npm</a> modules are very compact, determined to fill that little hole and become the <strong>de-facto tool</strong> for that <em>super-specific purpose</em>.</p> <blockquote> <p><strong>All of them are open-source</strong>. More people should realize how <strong>huge</strong> that is. It&#x2019;s huge because it means you can learn how the best, successfull frameworks and libraries do it. It&#x2019;s true that open-source is gaining a lot of traction. Ever since <strong>GitHub</strong> came out in 2008, and then <strong>Node</strong> in 2009. In the world of JavaScript, the concept of closed-source is something that you can&#x2019;t even begin to fathom, and that <em>encourages</em> open-source.</p> </blockquote> <p>Since we were talking about imgur, let&#x2019;s look at the <a href="https://npmjs.org/search?q=imgur" target="_blank" aria-label="npm search results">search results in npm for the keyword &#x201C;imgur&#x201D;</a>. There are <em>around ten</em> imgur related modules. Many of these, <em>just upload</em> to imgur. Such is the case of <a href="https://github.com/kaimallea/node-imgur" target="_blank" aria-label="node-imgur on GitHub">node-imgur</a>.</p> <p>Sure, micro comes with <em>a cost</em>. Everyone wants to write their own modules. Generally speaking, though, the best ones prevail. The others fall off into oblivion.</p> <p>In the end, having many alternative frameworks that do the same thing, gives you <strong>choice</strong>, albeit <em>a tough one</em> sometimes. But, I&#x2019;d much rather have to pick from a ton of micro-frameworks that, potentially, do what I want. It beats having to use a <em>giant library</em> that can do everything but it&#x2019;s <strong>exaggeratedly complicated</strong>, or heavily undocumented.</p> <h2 id="identifying-the-source">Identifying the Source</h2> <p>Granted, taking your pick can be <a href="https://ponyfoo.com/2013/01/18/asset-management-in-node" aria-label="Asset Management in Node">tedious at first</a>. But if you are not content with what the existing solutions do, you can always <a href="https://ponyfoo.com/2013/01/23/publishing-nodejs-packages-with-npm" aria-label="Publishing Node.JS packages with npm">roll out your own</a>, and help the next guy in the process.</p> <p>When I first wrote about rolling my own packages, I was just getting started in the world of Node, and I considered the <strong>vastity</strong> of choice <em>an issue</em>. I changed my mind about that.</p> <p>Micro-frameworks in JavaScript are a phenomenon that we hardly ever see in other communities, and therefore, it&#x2019;s a hard thing to wrap our head around.</p> <p>We have tons of packages for handling parallelism in regular code, not just for ocassional and complicated multi-threaded services. But it doesn&#x2019;t just end with parallelism. We have utility libraries for just about anything. And we owe a large portion of that to the fact that Node is largely unopinionated.</p> <blockquote> <p><strong>Node barely does anything</strong>. It just provides a <em>layer of abstraction</em> over the operating system. Other than that, you&#x2019;ll probably have to rely in someone&#x2019;s package, or write your own.</p> </blockquote> <p>Some packages are <a href="https://github.com/bminer/node-static-asset" target="_blank" aria-label="static-asset on GitHub">absurdly specific</a>. Most other communities <em>don&#x2019;t even bother</em> to create modules that small.</p> <blockquote> <p>It&#x2019;s like the <a href="https://ponyfoo.com/npmjs.org" aria-label="Node Package Manager">npm</a> community discovered <em>a new sub-atomic particle</em>!</p> </blockquote></div>
