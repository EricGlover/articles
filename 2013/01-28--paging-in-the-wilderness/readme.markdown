<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/paging-in-the-wilderness">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/paging-in-the-wilderness"><div><img src="https://i.imgur.com/BKhw4VW.jpg" alt="Paging in the Wilderness"></div></a>

<h1>Paging in the Wilderness</h1>

<p><kbd>ux</kbd> <kbd>front-end</kbd></p>

<blockquote><p>Traditionally, lists on websites have been paged to allow data to be <em>chunked</em> rather than sent out all at once, when the user might not need all of it <em>right away</em>, &#x2026;</p></blockquote>

<div><p>Traditionally, lists on websites have been paged to allow data to be <em>chunked</em> rather than sent out all at once, when the user might not need all of it <em>right away</em>, improving both <em>overall performance</em> and <em>perceived speed</em>, both of which are very important to <strong>web usability</strong>.</p></div>

<blockquote></blockquote>

<div><h1 id="traditional-paging">Traditional Paging</h1> <p>Something along these lines is what traditionally is done in order to <em>implement</em> a paged list:</p> <ul> <li>First of all, the list is <strong>sorted</strong></li> <li>The first page of the list is provided</li> <li>A <strong>pager</strong>, or list of pages is presented</li> <li>When the user <strong>clicks</strong> on a page, a new page is loaded</li> </ul> <p>![traditional-pager.png][1]</p> <h3 id="what-s-so-wrong-with-paging">What&#x2019;s so wrong with paging?</h3> <p>This implementation of a paged list is rather <strong>rudimentary</strong>. The major flaw of traditional paged lists, is the <em>typically</em> <strong>incorrect assumption</strong> that the user really cares about <em>a particular page</em>, or which particular page they are <em>looking at</em>.</p> <p>Have you ever wanted to go to a <strong>particular</strong> page in a list on a website?<br> How about, for a reason <em>other than <strong>&#x201C;because I figure the result should be more or less around&#x2026; here&#x201D;</strong></em>?</p> <blockquote> <p>Page numbers are, in the <em>vast majority</em> of cases, an <strong>implementation detail</strong>. And they should be treated as such.</p> </blockquote> <p>Another, and often <em>overlooked</em>, issue with traditional pagers, is the fact that you have to actually <strong>click</strong> on a button <em>every time</em> you want to see another page of results. If for some reason you are sifting through a list, clicking every time you want to see more results becomes pretty obnoxious.</p> <p>To make matters <em>worse</em>, paging usually performs a <strong>full page reload</strong>. This, coupled with clicking, sums up a rather <em>frustrating experience</em>.</p> <p>In summary, traditional paging is bad because:</p> <ul> <li>It assumes page indexes are <em>somehow relevant</em></li> <li>It <em>requires user action</em> to navigate</li> <li>It takes <em>too long</em></li> </ul> <p>What&#x2019;s a good alternative?</p></div>

<div><h3 id="an-alternative-approach">An alternative approach</h3> <blockquote> <p>It&#x2019;s easy to complain about something existent and proven, but how to <em>make it better</em>?</p> </blockquote> <blockquote> <p>Pretty easy, actually. Getting rid of all the issues I ranted about.</p> </blockquote> <ul> <li>Don&#x2019;t care about <em>indexes</em>? <strong>Remove them</strong> altogether.</li> <li><strong>Clicks</strong> have a <em>negative impact on UX</em>? Find a more <strong>natural</strong> way to do paging.</li> <li><strong>Reloads</strong> are <em>slow and inefficient</em>? Go <strong>AJAX</strong>.</li> </ul> <h2 id="unobtrusive-paging">Unobtrusive Paging</h2> <p>Instead of a pager, we&#x2019;ll use a footer at the end of our page, and when the user scrolls past the footer, the next page will be loaded, through an AJAX request and some JavaScript code.</p> <figure><img alt="unobtrusive-pager.png" title="The unobtrusive way" class="" src="https://i.imgur.com/61NF6fE.png"></figure> <p>Now <strong>all you have to do</strong> is:</p> <ol> <li>Go to step two if the list is depleted, otherwise skip to step three</li> <li>Use a <strong>&#x201C;No more content&#x201D;</strong> footer when the list is depleted</li> <li>Use the paging footer when the list has more items</li> <li>Bind <code class="md-code md-code-inline">click</code> and <code class="md-code md-code-inline">scroll</code> events to the paging footer</li> <li>Append new contents, go <em>back to step one</em></li> </ol> <p>I won&#x2019;t go into the implementation of all of these steps, I&#x2019;ll leave that <em>up to you</em>. However, here&#x2019;s a snippet laying out an example of how you could implement the <em>scrolling</em> functionality:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> win = $(<span class="md-code-built_in">window</span>),
   pager = $(<span class="md-code-string">&apos;.pager&apos;</span>);
   
<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">more</span><span class="md-code-params">()</span></span>{
   win.off(<span class="md-code-string">&apos;scroll.paging&apos;</span>);
   pager.off(<span class="md-code-string">&apos;click.paging&apos;</span>);
   pagingEvent(pager, data);
}

win.on(<span class="md-code-string">&apos;scroll.paging&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">()</span></span>{
   <span class="md-code-keyword">var</span> allowance = <span class="md-code-number">80</span>,
       target = pager.position().top + pager.height() - allowance,
       y = win.scrollTop() + win.height();

   <span class="md-code-keyword">if</span> (y &gt; target){
       more();
   }
});

pager.on(<span class="md-code-string">&apos;click.paging&apos;</span>, more);
</code></pre> <p>Make sure to set an <code class="md-code md-code-inline">allowance</code> that lets your pager <em>scroll into view</em>, but doesn&#x2019;t force the user to go <em>all the way down</em> to the bottom of the page.</p> <p>After that, you should implement <code class="md-code md-code-inline">pagingEvent</code> to fetch the <strong>next page</strong> and append it to what you currently have, remove the existing pager, and then figure out whether you are going to display a <strong>&#x201C;No more results&#x201D;</strong> element, or <strong>another pager</strong> (you could set this up <em>recursively</em>).</p> <p>This provides a <strong>frictionless</strong> experience, where the user can sift through your paged list <em>just by scrolling down</em> the page, or using <kbd>PgDown</kbd>.</p> <blockquote> <p>It also avoids the <em>need for an unnecessary clickfest</em>, and <strong>feels more natural</strong> overall, which is <strong>the essence</strong> of designing an <em><strong>enjoyable user experience</strong></em>.</p> </blockquote> <p>So there you have it, sometimes it&#x2019;s nice to look at everyday things we take for <em>granted</em>, and review how they could be <strong>improved</strong> to deliver a better product.</p></div>
