<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/master/contributing.markdown"><code>contributing.markdown</code></a> for details.</sub>

<a href="https://ponyfoo.com/articles/defensive-design"><div></div></a>

<h1>Defensive Design</h1>

<p><kbd>ux</kbd> <kbd>front-end</kbd> <kbd>book-review</kbd></p>

<blockquote><p>I&#x2019;ve recently read the book <a href="http://www.amazon.com/dp/073571410X" target="_blank">Defensive Design for the Web</a>, and I felt compelled to write about it here. I guess it&#x2019;s a good starting point for writing my &#x2026;</p></blockquote>

<div><p>I&#x2019;ve recently read the book <a href="http://www.amazon.com/dp/073571410X" target="_blank">Defensive Design for the Web</a>, and I felt compelled to write about it here. I guess it&#x2019;s a good starting point for writing my thoughts about <em>designing a reasonable user experience</em>.</p></div>

<div></div>

<div><h2 id="summary">Summary</h2> <p>To summarize, this is a book about <em>user experience</em>, focused on concisely and consistently displaying error messages, warnings, and validation notices that clearly define the issue at hand.</p> <p>I agree with <strong>most</strong> of what the authors have to say. Some of it, is just common sense. I&#x2019;ll try to highlight the <em>key points</em> about <strong>defensive design</strong> in this article.</p></div>

<div><p><a href="http://www.amazon.com/dp/073571410X" target="_blank" aria-label="Defensive Design for the Web"><img alt="defensive-design.png" class="" src="https://i.imgur.com/JxkQ02e.png"></a></p> <h3 id="put-yourself-in-the-user-s-shoes">Put yourself in the user&#x2019;s shoes</h3> <p>Some of the things they mention have to do with how users react to the <strong>UX</strong> you provide. Don&#x2019;t overwhelm your users with more information than they need. Realize <em>your users don&#x2019;t know the internals of your application</em>. They don&#x2019;t know nor care <em>exactly why something went wrong</em>, they care about how to solve that. Be human, <strong>technical blabber will drive them away in droves</strong>.</p> <blockquote> <p>Don&#x2019;t scare your users away from your site by telling them something like &#x201C;Something went terribly wrong&#x201D;, try and be helpful instead, mention how to work around the issue, or provide an alternative, or prompt them to try again later. Don&#x2019;t just tell them that <em>your site blew up</em>. They&#x2019;ll leave and <strong>never come back again</strong>.</p> </blockquote> <p><img alt="ysod.gif" title="ASP.NET Yellow Screen of Death" class="" src="https://i.imgur.com/CGA63nm.gif"></p> <p>As a rule of thumb, tell your users <em>what went wrong</em>, but be as general as possible, while still being helpful. The only exception to this should be errors as the result of <em>ill intended behavior</em>, such as manipulating AJAX requests to your site. In those cases, it&#x2019;s fine to be a <em>little more obtuse</em>.</p> <h3 id="as-a-security-concern">As a Security Concern</h3> <p>Being too helpful about exactly what went wrong and how it happened, can go a long way in helping a malicious user gain access to your servers. You should never serve end users with detailed error descriptions, stack traces, server logs, or the like. But I guess, this again, is just common sense. Who&#x2019;s going to serve a full stack trace to the end users of a website, <em>right?</em></p> <h3 id="be-nice-and-generic-yet-concise-and-consistent">Be nice and generic, yet <em>concise</em> and <em>consistent</em></h3> <p>Make an effort to display error messages in <strong>a consistent way</strong> across your entire experience. Keep your error handling logic in <em>one place</em>, and it should be easy for your whole application to handle and display error messages in the same way. Not doing so certainly won&#x2019;t help your user in thinking your brand is unified and working as a unit.</p> <p>If each independent submodule of your application displays error messages in a different way, or at <em>noticeably different levels of detail</em>, users will have a hard time feeling your product isn&#x2019;t merely a <em>bunch of modules mashed together</em>, and probably an unstable mess which will crumble in the presence of the smallest hiccup.</p> <p>If your error messages are <strong>consistent</strong>, this will portray a message of <em>unity and cohesion</em> which will go a long way towards <strong>building trust</strong> towards your application.</p> <p>Obviously that&#x2019;s not the <em>only</em> factor in building trust, but honest error messaging is <em>a start</em>.</p> <p><strong>Be concise</strong>. Tell your users what the problem is, and how to fix it.</p> <blockquote> <p>&#x201C;Try again&#x201D; just won&#x2019;t cut it, the user will <em>become frustrated</em> and not know what you mean by that. Did you mean for them their login credentials were invalid? Did you mean the servers are overloaded right now and they should try again later? Did you mean the username they picked is already in use? <strong>Be specific</strong>.</p> </blockquote> <p><img alt="frustrated.png" title="Don&apos;t frustrate your users" class="" src="https://i.imgur.com/CQVskxL.png"></p> <p>Use <strong>meaningful</strong> messages. &#x201C;Invalid credentials&#x201D;, &#x201C;Username in use. Pick another one&#x201D;. Explain to your user how to <em>get out of this situation gracefully</em>.</p> <p><strong>Don&#x2019;t <em>inflict panic</em> upon your users</strong>.</p> <h3 id="about-that">About that&#x2026;</h3> <p>The book stresses that you should convey error messages in <em>red <strong>bold</strong> text on yellow backgrounds</em>. I disagree on this count. While you should certainly make your error messages <em>stand out</em>, you shouldn&#x2019;t make them scary, the user should feel that you are <em>merely informing</em> them about something that <em>can happen on ocasion</em>, rather than sounding so alarmed about it.</p> <blockquote> <p><strong>OMG!</strong> YOU MADE A <em>TERRIBLE</em> MISTAKE!</p> </blockquote> <p>The psychological impact of such error messaging is <strong>negative</strong>, you should try to convey your message as a <em>warning</em>, or just <em>a notice</em>, rather than an error that can&#x2019;t be salvaged. Also, <strong>never put the blame on the user</strong>. <em>Admit mistakes</em> when internal errors turn up, <strong>don&#x2019;t tell lame excuses</strong>.</p> <blockquote> <p>Embrace your flaws and your users will embrace you.</p> </blockquote> <p>In doing so, you are telling your users <em>you care about them</em>, people like that.</p></div>
