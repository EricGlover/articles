<h1>Organizing your CSS with Bootstrap</h1>

<div><kbd>css</kbd> <kbd>front-end</kbd> <kbd>bootstrap</kbd></div>

<blockquote><p>Now that we&#x2019;ve laid <a href="https://ponyfoo.com/2013/06/24/css-for-dummies">the basics</a> in the cascading land of awesomeness that is CSS, it&#x2019;s time to move forward and take a deeper look at <em>organization and &#x2026;</em></p></blockquote>

<div><p>Now that we&#x2019;ve laid <a href="https://ponyfoo.com/2013/06/24/css-for-dummies">the basics</a> in the cascading land of awesomeness that is CSS, it&#x2019;s time to move forward and take a deeper look at <em>organization and tooling</em>.</p></div>

<div></div>

<div><p>Any decently-sized codebase, even CSS, needs some sort of organization in order to keep us from going insane. Pre-processing, and a few ground rules for style writing, will help us achieve the <em>level of organization <strong>required</strong> in higher level applications</em>.</p></div>

<div><h2 id="organization">Organization</h2> <p>Before we jump onto template scaffolding with bootstrap, I wanted to go over some tips to improve the organization in the way we write our CSS code. Take these as general rules, apply them <em>as you deem necessary</em>.</p> <ul> <li>Use classes for styling. Whenever possible, <em>avoid using element IDs</em>, attribute values, and tag names</li> <li>Try not to nest style rules <em>too deeply</em>. To prevent complexity, limit yourself to <em>one or two levels</em> of nesting</li> <li>Avoid <em>magic pseudo-selectors</em> such as <code class="md-code md-code-inline">:nth-child</code> or <code class="md-code md-code-inline">:nth-of-type</code>. Use an extra class in your markup, instead</li> <li>Don&#x2019;t overqualify selectors. i.e: <code class="md-code md-code-inline">div.foo.bar</code>, when you could use <code class="md-code md-code-inline">.foo</code></li> <li>Prefix classes with <code class="md-code md-code-inline">js-</code> when referenced by JavaScript code</li> <li>Avoid styling <code class="md-code md-code-inline">js-</code> classes</li> <li>Toy with the idea to use <code class="md-code md-code-inline">box-sizing: border-box</code> <a href="http://www.paulirish.com/2012/box-sizing-border-box-ftw/" target="_blank" aria-label="* { box-sizing: border-box; } FTW">everywhere</a></li> <li>Attempt separating layout styling concerns from design concerns. Keep <em>separate stylesheets</em></li> </ul> <p>These are just a few ground rules, feel free to add your own or <em>adapt</em> these to your own needs. You might want to use <a href="http://smacss.com/" target="_blank" aria-label="SMACSS Style Guide">SMACSS</a> as your <em>guiding light</em>.</p> <h3 id="lint-your-css">Lint your CSS!</h3> <p>If you have a large enough project, CSS can get out of hand as easily as JavaScript, or even more so, because developers seldom pay attention to CSS. You are <a href="https://ponyfoo.com/2013/03/22/managing-code-quality-in-nodejs" aria-label="Managing Code Quality in NodeJS">already using JSHint</a>, which is great. If you really want to take your codebase to the next level, you should <em>at least consider</em> linting the CSS, too.</p> <p>Currently, you can use <a href="https://github.com/stubbornella/csslint" target="_blank" aria-label="CSSLint on GitHub">CSSLint</a> as your lint tool. If you are using LESS, you are in luck! <a href="https://github.com/twitter/recess" target="_blank" aria-label="Twitter RECESS on GitHub">RECESS</a> will let you lint your LESS code directly.</p> <p><strong>Ideally</strong>, you should include a <em>lint task</em> for CSS in your <a href="https://ponyfoo.com/2013/05/22/understanding-build-processes" aria-label="Understanding Build Processes">build process</a>.</p> <h2 id="pre-processors">Pre-processors</h2> <p>Pre-processors allow us to keep our stylesheets <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" aria-label="Don&apos;t Repeat Yourself Principle">DRY</a>. They also let us perform calculations in our layout measurements, or do color shifting.</p> <p>Quite probably though, the most useful feature of CSS pre-processors is the ability to use mixins, reusable functions that allow us to write cross-browser styles without having to type them time and again, risking typos and duplicating our code.</p> <p>The most popular flavors of CSS pre-processing probably are:</p> <ul> <li><a href="http://sass-lang.com/" target="_blank" aria-label="Syntactically Awesome Stylesheets">SASS</a>, from the universe of Ruby and <a href="http://coffeescript.org/" target="_blank" aria-label="CoffeScript language">CoffeeScript</a></li> <li><a href="http://learnboost.github.io/stylus/" target="_blank" aria-label="Stylus pre-processor">Stylus</a>, from the awesome <a href="https://github.com/LearnBoost" target="_blank" aria-label="LearnBoost on GitHub">LearnBoost</a></li> <li><a href="http://lesscss.org/" target="_blank" aria-label="LESS CSS language">LESS</a>, still rocking it</li> </ul> <p>Lets do a quick comparison of the three:</p> <table> <thead> <tr> <th></th> <th>SASS</th> <th>Stylus</th> <th>LESS</th> </tr> </thead> <tbody> <tr> <td>Syntax</td> <td>CSS-like</td> <td>Customizable</td> <td>CSS-like</td> </tr> <tr> <td>Compiler</td> <td>Ruby gem</td> <td>Node package</td> <td>JavaScript</td> </tr> <tr> <td>Verbosity</td> <td>Higher</td> <td>Lowest</td> <td>Regular</td> </tr> <tr> <td>Source</td> <td><a href="https://github.com/nex3/sass" target="_blank" aria-label="SASS on GitHub">GitHub</a></td> <td><a href="https://github.com/learnboost/stylus" target="_blank" aria-label="Stylus on GitHub">GitHub</a></td> <td><a href="https://github.com/cloudhead/less.js" target="_blank" aria-label="LESS on GitHub">GitHub</a></td> </tr> <tr> <td>Framework</td> <td><a href="http://compass-style.org/" target="_blank" aria-label="Compass CSS Authoring Framework">Compass</a></td> <td><a href="https://github.com/InkSpeck/fluidity" target="_blank" aria-label="Fluidity Framework">Fluidity</a></td> <td><a href="https://ponyfoo.com/twitter.github.com/bootstrap/" aria-label="Twitter Bootstrap">Bootstrap</a></td> </tr> </tbody> </table> <p>All three pre-processors share similar syntax and features when it comes to color functions, mixins, and variables. You can find a more detailed, <em>feature by feature</em> comparison <a href="http://net.tutsplus.com/tutorials/html-css-techniques/sass-vs-less-vs-stylus-a-preprocessor-shootout/" target="_blank" aria-label="SASS vs LESS vs Stylus">here</a>.</p> <p>I should mention <em>all three</em> are readily available as grunt tasks on npm.</p> <blockquote> <p>In my opinion, it depends on what you want to do. If you are going to use a full-fledged CSS framework, I&#x2019;d go with LESS, because Bootstrap is <em>a clear winner</em> in the field.</p> </blockquote> <blockquote> <p>If you are going to use the framework as is, or not going to use one, you could probably do with Stylus. It&#x2019;s clean looking syntax is <a href="https://gist.github.com/paulmillr/2005644" target="_blank" aria-label="Gist showing simplicity of Stylus">really appealing</a>.</p> </blockquote> <p>SASS used to be regarded as <em>a superior language</em> than LESS. Today, they are <em>very similar</em>. SASS feels a <em>little more verbose</em>, though. That, coupled with the fact that <strong>Bootstrap</strong> is powered by LESS, makes me choose <em>LESS over SASS</em> with little hesitation.</p> <h2 id="twitter-bootstrap">Twitter Bootstrap</h2> <p><img alt="bootstrap.png" title="Twitter Bootstrap CSS Framework" class="" src="https://i.imgur.com/TTMpDxW.png"></p> <p><a href="http://twitter.github.io/bootstrap/" target="_blank" aria-label="Twitter Bootstrap Framework">Bootstrap</a> is a CSS framework, which <em>encompasses</em> a lot of the practices we mentioned earlier. It does:</p> <h3 id="rapid-prototyping">Rapid Prototyping</h3> <p>We&#x2019;ve all been there before. Trying to get a design right, but instead, we <em>wasted our time</em> dealing with <code class="md-code md-code-inline">float</code> issues, with margins, paddings, and footers that wouldn&#x2019;t stick to the bottom of our page.</p> <p>Bootstrap provides an <a href="http://twitter.github.io/bootstrap/scaffolding.html" target="_blank" aria-label="Bootstrap Scaffolding">scaffolding module</a> that allows us to very quickly set up the basics for our layout. The scaffolding module provides us with a grid system that allows us to quickly place elements on our designs with ease.</p> <p>At this point, you&#x2019;ll be probably better off <a href="http://twitter.github.io/bootstrap/assets/bootstrap.zip" target="_blank" aria-label="Download bootstrap.zip">downloading Bootstrap</a> and playing around with it for a while. But I&#x2019;ll try my best to give you a reasonable example.</p> <p>This grid system uses 12 columns. These columns have a fixed width, and allow you to quickly throw together a multi-column layout:</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">link</span> <span class="md-code-attribute">href</span>=<span class="md-code-value">&quot;/css/bootstrap.css&quot;</span> <span class="md-code-attribute">rel</span>=<span class="md-code-value">&quot;stylesheet&quot;</span>&gt;</span>

<span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;row&quot;</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;span3&quot;</span>&gt;</span>Menu<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;span9&quot;</span>&gt;</span>Content!<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
</code></pre> <p><a href="http://cdpn.io/mtgsj" target="_blank" aria-label="Basic Layout Example">Pen here</a>.</p> <p>You can also nest these columns, and it will still work, just make sure to use <em>a new row element</em>:</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;row&quot;</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;span3&quot;</span>&gt;</span>Menu<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;span9&quot;</span>&gt;</span>
        <span class="md-code-tag">&lt;<span class="md-code-title">h1</span>&gt;</span>Articles<span class="md-code-tag">&lt;/<span class="md-code-title">h1</span>&gt;</span>
        <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;row&quot;</span>&gt;</span>
            <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;span6&quot;</span>&gt;</span>Article 1<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
            <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;span6&quot;</span>&gt;</span>Article 2<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
        <span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
        <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;row&quot;</span>&gt;</span>
            <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;span6&quot;</span>&gt;</span>Article 3<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
            <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;span6&quot;</span>&gt;</span>Article 4<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
        <span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
    <span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
</code></pre> <p><a href="http://cdpn.io/yegbn" target="_blank" aria-label="Nested Layout Example">Pen here</a>.</p> <p>As you can see, laying out your design is <em>almost trivial now</em>. All we need to do, is fill up the template with <em>actual content</em>. Keep in mind we should <em>always wrap our templates</em> in a container like this:</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;container&quot;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
</code></pre> <h3 id="responsive-layouts">Responsive Layouts</h3> <p><img alt="devices.png" title="Different Media Devices" class="" src="https://i.imgur.com/3hTIoim.png"></p> <p>Bootstrap also offers <a href="http://twitter.github.io/bootstrap/scaffolding.html#fluidGridSystem" target="_blank" aria-label="Fluid Grid System">fluid layouts</a> which, rather than <em>having a fixed width</em> for each column, assign each column <em>a percentage</em> of the viewport real estate instead.</p> <p>Adding an <a href="http://twitter.github.io/bootstrap/scaffolding.html#responsive" target="_blank" aria-label="Enabling responsive features">additional stylesheet</a>, you&#x2019;ll enable responsive design features.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">meta</span> <span class="md-code-attribute">name</span>=<span class="md-code-value">&quot;viewport&quot;</span> <span class="md-code-attribute">content</span>=<span class="md-code-value">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">link</span> <span class="md-code-attribute">href</span>=<span class="md-code-value">&quot;/css/bootstrap-responsive.css&quot;</span> <span class="md-code-attribute">rel</span>=<span class="md-code-value">&quot;stylesheet&quot;</span>&gt;</span>
</code></pre> <p>When you include the responsive stylesheet, styles will be added so that when the viewport size is adjusted, the layout adjusts itself to it, providing <em>a more flexible user experience</em> that works better across multiple platforms.</p> <p>This is achieved using <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries" target="_blank" aria-label="CSS media queries">media queries</a>. Here are some media query examples:</p> <pre class="md-code-block"><code class="md-code md-lang-css"><span class="md-code-at_rule">@<span class="md-code-keyword">media</span> (max-width: <span class="md-code-number">600px</span>) </span>{
    <span class="md-code-comment">/* styles enabled when the viewport is at most 600px wide */</span>
}

<span class="md-code-at_rule">@<span class="md-code-keyword">media</span> (min-width: <span class="md-code-number">700px</span>) and (orientation: landscape) </span>{
    <span class="md-code-comment">/* styles enabled when the viewport is at least 700px wide
       AND in landscape orientation, too
     */</span>
}
</code></pre> <p>Media queries allow CSS to be applied <strong>exclusively</strong> if the media matches the query, at any given time. Usually, a few media query breakpoints are carefully picked. This allows you to <em>plan your layout</em> for two or three of the expected media devices used when visiting your application.</p> <p><a href="http://css-tricks.com/snippets/css/media-queries-for-standard-devices/" target="_blank" aria-label="Media queries for standard devices">Here</a> is a pretty comprehensive list of media queries.</p> <p>I will surely come back to the subject in later articles, but for now, I&#x2019;ll recommend you two really good books about responsive design.</p> <h4 id="responsive-web-design-http-wwwamazoncom-dp-098444257x-responsive-web-design-by-ethan-marcotte"><a href="http://www.amazon.com/dp/098444257X" target="_blank" aria-label="Responsive Web Design by Ethan Marcotte">Responsive Web Design</a></h4> <p>This book covers <em>responsive web design in depth</em>, showing you lots of examples. It is a very good resource to introduce you to the fantastic world of responsive design for today&#x2019;s web. A <strong>must read</strong> if you&#x2019;re <em>even faintly interested</em> in RWD.</p> <h4 id="mobile-first-http-wwwamazoncom-dp-1937557022-mobile-first-by-luke-wroblewski"><a href="http://www.amazon.com/dp/1937557022" target="_blank" aria-label="Mobile First by Luke Wroblewski">Mobile First</a></h4> <p>Closely related, Mobile First introduces you to a new way of thinking about design. Rather than trying to cram a critical mass of ads in your mobile designs, Luke suggests to start with the small screens instead. Only presenting the essential content first, and building from there. Adding content as we hit breakpoints, instead of removing it.</p> <p>This may seem like a very subtle difference from traditional web development, and it is. But it induces a new way of thinking about what&#x2019;s important to the user, and it helps you cut features and content you didn&#x2019;t really want there, nor even need.</p> <h3 id="more-bootstrapping">More Bootstrapping</h3> <p>Its features don&#x2019;t just end with scaffolding. A comprehensive list of <a href="http://twitter.github.io/bootstrap/base-css.html" target="_blank" aria-label="Fundamental HTML Styles">basic styles</a> for tables, forms, buttons, and images, is also included. Right out the box!</p> <p>These are <em>pretty straightforward</em>, so I won&#x2019;t go into detail, how hard can it be to <em>create a large button</em>?</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">button</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;btn btn-large btn-primary&quot;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">button</span>&gt;</span>
</code></pre> <p>That&#x2019;s <em>it</em>.</p> <p>Bootstrap also offers an <a href="http://twitter.github.io/bootstrap/base-css.html#icons" target="_blank" aria-label="Glyphicons in Bootstrap">icon set</a> you could use <em>without any further customization</em>.</p> <h3 id="components-and-javascript">Components and JavaScript</h3> <p>Twitter also offers a decent amount of <a href="http://twitter.github.io/bootstrap/components.html" target="_blank" aria-label="Reusable components in Bootstrap">components</a>, and widgets that require just <a href="http://twitter.github.io/bootstrap/javascript.html" target="_blank" aria-label="JavaScript in Bootstrap">a little of JavaScript</a> to get them going.</p> <p>You should <em>make sure to check those out</em> before embarking yourself in a <strong>component-creating fiesta</strong> and not even realizing someone else <em>already did all the work for you</em>.</p></div>
