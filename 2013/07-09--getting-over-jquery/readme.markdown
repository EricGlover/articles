<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/master/contributing.markdown"><code>contributing.markdown</code></a> for details.</sub>

<a href="https://ponyfoo.com/articles/getting-over-jquery"><div></div></a>

<h1>Getting Over jQuery</h1>

<p><kbd>js</kbd> <kbd>js-native</kbd> <kbd>jquery</kbd> <kbd>front-end</kbd> <kbd>best-practices</kbd> <kbd>dom</kbd></p>

<blockquote><p>We&#x2019;ve looked at doing some of the things that you can do in native code. So far, we&#x2019;ve covered AJAX, event handling, event delegation, DOM querying, and &#x2026;</p></blockquote>

<div><p>We&#x2019;ve looked at doing some of the things that you can do in native code. So far, we&#x2019;ve covered AJAX, event handling, event delegation, DOM querying, and DOM manipulation. If you haven&#x2019;t <em>already</em> read that, you <a href="https://ponyfoo.com/2013/06/10/uncovering-the-native-dom-api"><em>probably should</em></a>.</p></div>

<div></div>

<div><p>Why do we <em>really</em> use jQuery? Sure, it simplifies things. But do we really need <em>all those abstractions</em>? Can&#x2019;t we get away with just a few of <em>the most basic of them</em>? In this article I&#x2019;ll examine the most frequently used portions of its API, and look at the different ways we can <em>rewrite</em> those everyday utilities <em>using <strong>plain JavaScript</strong></em>.</p></div>

<div><p><img alt="jquery.jpg" title="jQuery" class="" src="https://i.imgur.com/8wWcU19.jpg"></p> <p>If we look at their <a href="http://api.jquery.com/" target="_blank" aria-label="jQuery API Documentation">API documentation</a>, we can <em>quickly categorize</em> the features we use most frequently.</p> <ul> <li>AJAX</li> <li>Attributes, CSS, <code class="md-code md-code-inline">.data</code></li> <li>Effects, Animations</li> <li>Events</li> <li>DOM Querying, Selectors</li> <li>DOM Manipulation</li> <li><strong>Plugins</strong></li> </ul> <p>That certainly <em>looks like</em> a lot. Lets break it down, and attempt to arrive at the same functionality, but <em>without jQuery</em>. Our aim in doing so, isn&#x2019;t just getting rid of jQuery for the sake of doing so, but thinking about why we&#x2019;d want it <em>in the first place</em>. Furthermore, we will be gaining insight into how jQuery operates, what is needed, what is not, and maybe even more importantly, understanding and becoming capable of performing these operations on our own.</p> <h2 id="scope">Scope</h2> <p>I previously mentioned the <a href="http://microjs.com/" target="_blank" aria-label="Fantastic Micro Frameworks and Libraries">micro library movement</a>, which is awesome, too. Here, though, we will <em>pick a few battles</em> of our own, and have a shot at resolving them without resorting to external dependencies. Other than <em>what browsers provide</em>, that is.</p> <p>Keep browser support in mind. In each of my solutions, I&#x2019;ll tell you what the browser support is for that particular approach. I will mostly speak about <em>future-proof solutions</em>, but most of what I&#x2019;ll be talking about <em>probably won&#x2019;t work in IE 6</em>. So keep an eye on that.</p> <blockquote> <p>Even if you are working in a project that must support older browsers, for whatever reason, I think you&#x2019;ll still find value in these excerpts. Maybe they aren&#x2019;t that useful to you <em>today</em>, maybe they are. One thing is certain though, <em>the benefit of learning the underlying browser API won&#x2019;t be going away anytime soon</em>.</p> </blockquote> <h2 id="ajax">AJAX</h2> <p>I wanted to give you an update on AJAX. We&#x2019;ve already <em><a href="https://ponyfoo.com/2013/06/10/uncovering-the-native-dom-api" aria-label="Uncovering the Native DOM API">somewhat covered</a></em> how to write native requests, but lets take it up a notch.</p> <p>At this point, I think I should introduce you to <a href="http://www.html5rocks.com/en/tutorials/file/xhr2/" target="_blank" aria-label="New Tricks in XMLHttpRequest2">XHR2</a>. Lets start by talking about <a href="http://caniuse.com/xhr2" target="_blank" aria-label="Can I Use XHR2?">browser support</a>. As you can see, XHR2 support includes anything that&#x2019;s not <code class="md-code md-code-inline">IE &lt; 10 || Android &lt; 3.0</code>. That&#x2019;s <em>not very encouraging</em>, but it&#x2019;s workable.</p> <p>The fun in XHR2 comes from being able to set a <code class="md-code md-code-inline">responseType</code>. Here is a table of possible values, adapted from what can be <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#responseType" target="_blank" aria-label="responseType values - MDN">found on MDN</a>.</p> <blockquote> <table> <thead> <tr> <th>Value</th> <th><code class="md-code md-code-inline">response</code> data type</th> </tr> </thead> <tbody> <tr> <td><code class="md-code md-code-inline">&apos;text&apos;</code></td> <td><code class="md-code md-code-inline">String</code> (this is the <em>default</em>, too)</td> </tr> <tr> <td><code class="md-code md-code-inline">&apos;arraybuffer&apos;</code></td> <td><code class="md-code md-code-inline">ArrayBuffer</code></td> </tr> <tr> <td><code class="md-code md-code-inline">&apos;blob&apos;</code></td> <td><code class="md-code md-code-inline">Blob</code></td> </tr> <tr> <td><code class="md-code md-code-inline">&apos;document&apos;</code></td> <td><code class="md-code md-code-inline">Document</code></td> </tr> <tr> <td><code class="md-code md-code-inline">&apos;json&apos;</code></td> <td>JSON <code class="md-code md-code-inline">object</code></td> </tr> </tbody> </table> <p><strong>Note</strong> that the <code class="md-code md-code-inline">&apos;json&apos;</code> value is currently <em>only supported by Firefox and Opera</em>. If you want to fetch JSON data in a cross-browser manner, your best bet is setting <code class="md-code md-code-inline">responseType = &apos;text&apos;</code>, and then parsing the response like so: <code class="md-code md-code-inline">JSON.parse(xhr.response)</code>.</p> </blockquote> <p>From the resources listed above, we can gather that <code class="md-code md-code-inline">Blob</code> is a great representation if we want to fetch <em>images, or any other binary file</em>. <code class="md-code md-code-inline">&apos;document&apos;</code> should be used for XML. <code class="md-code md-code-inline">json</code> of parsed <code class="md-code md-code-inline">&apos;text&apos;</code> for JSON, and <code class="md-code md-code-inline">&apos;text&apos;</code> for <em>pretty much everything else</em>.</p> <p>As far as sending data to the server goes, there are a few options. we could stick to using a simple <code class="md-code md-code-inline">String</code> value.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> xhr = <span class="md-code-keyword">new</span> XMLHttpRequest();
xhr.open(<span class="md-code-string">&apos;POST&apos;</span>, <span class="md-code-string">&apos;/api&apos;</span>, <span class="md-code-literal">true</span>);
xhr.onload = <span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">(e)</span></span>{
    <span class="md-code-keyword">if</span>(<span class="md-code-keyword">this</span>.status === <span class="md-code-number">200</span>){
        <span class="md-code-built_in">console</span>.log(<span class="md-code-keyword">this</span>.response);
    }
};
xhr.send(<span class="md-code-string">&apos;data!&apos;</span>);
</code></pre> <p>But we&#x2019;re already used to doing <em>that</em>. What&#x2019;s new is we can send <em>form-like</em> data using <code class="md-code md-code-inline">FormData</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> formData = <span class="md-code-keyword">new</span> FormData();
formData.append(<span class="md-code-string">&apos;username&apos;</span>, <span class="md-code-string">&apos;carlos&apos;</span>);
formData.append(<span class="md-code-string">&apos;email&apos;</span>, <span class="md-code-string">&apos;cslim@geocities.com&apos;</span>);
formData.append(<span class="md-code-string">&apos;dob&apos;</span>, <span class="md-code-number">1940</span>);

<span class="md-code-keyword">var</span> xhr = <span class="md-code-keyword">new</span> XMLHttpRequest();
xhr.open(<span class="md-code-string">&apos;POST&apos;</span>, <span class="md-code-string">&apos;/register&apos;</span>, <span class="md-code-literal">true</span>);
xhr.onload = <span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">(e)</span></span>{
    <span class="md-code-keyword">if</span>(<span class="md-code-keyword">this</span>.status === <span class="md-code-number">200</span>){
        <span class="md-code-built_in">console</span>.log(<span class="md-code-keyword">this</span>.response);
    }
};
xhr.send(formData);
</code></pre> <p>We don&#x2019;t <em>necessarily</em> have to create the <code class="md-code md-code-inline">FormData</code> from scratch, either. Suppose we had a form.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">form</span> <span class="md-code-attribute">id</span>=<span class="md-code-value">&apos;registration&apos;</span> <span class="md-code-attribute">name</span>=<span class="md-code-value">&apos;registration&apos;</span> <span class="md-code-attribute">action</span>=<span class="md-code-value">&apos;/register&apos;</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">input</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;text&apos;</span> <span class="md-code-attribute">name</span>=<span class="md-code-value">&apos;username&apos;</span> <span class="md-code-attribute">value</span>=<span class="md-code-value">&apos;carlos&apos;</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">input</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;email&apos;</span> <span class="md-code-attribute">name</span>=<span class="md-code-value">&apos;email&apos;</span> <span class="md-code-attribute">value</span>=<span class="md-code-value">&apos;cslim@geocities.com&apos;</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">input</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;number&apos;</span> <span class="md-code-attribute">name</span>=<span class="md-code-value">&apos;dob&apos;</span> <span class="md-code-attribute">value</span>=<span class="md-code-value">&apos;1940&apos;</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">input</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;submit&apos;</span> <span class="md-code-attribute">onclick</span>=<span class="md-code-value">&apos;return sendForm(this.form);&apos;</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">form</span>&gt;</span>
</code></pre> <p>Then we could derive our AJAX request data <em>off of it</em>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">sendForm</span><span class="md-code-params">(form)</span> </span>{
    <span class="md-code-keyword">var</span> formData = <span class="md-code-keyword">new</span> FormData(form);
    formData.append(<span class="md-code-string">&apos;csrf&apos;</span>, <span class="md-code-string">&apos;e69a18d7db1286040586e6da1950128c&apos;</span>);

    <span class="md-code-keyword">var</span> xhr = <span class="md-code-keyword">new</span> XMLHttpRequest();
    xhr.open(<span class="md-code-string">&apos;POST&apos;</span>, form.action, <span class="md-code-literal">true</span>);
    xhr.onload = <span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">(e)</span> </span>{
        <span class="md-code-comment">// ...</span>
    };
    xhr.send(formData);

    <span class="md-code-keyword">return</span> <span class="md-code-literal">false</span>; <span class="md-code-comment">// we&apos;re already submitting the form through AJAX.</span>
}

<span class="md-code-keyword">var</span> form = <span class="md-code-built_in">document</span>.querySelector(<span class="md-code-string">&apos;#registration&apos;</span>);
sendForm(form);
</code></pre> <p>Similarly to responses, <code class="md-code md-code-inline">.send()</code> supports passing <code class="md-code md-code-inline">Blob</code> data, if we need to perform <em>asynchronous file uploads</em>.</p> <p>In older browsers, lots of different methods are used to upload files asynchronously. Flash, <code class="md-code md-code-inline">iframe</code>s, anything goes. Other than file uploads or otherwise <em>using form data directly</em>, though, we are just fine doing AJAX in older browsers, as long as we don&#x2019;t pretend to use the <strong>XHR2 API</strong>. This API mostly improves our asynchronous file upload capabilities, but we are otherwise fine without it.</p> <h2 id="attributes-css-and-data">Attributes, CSS, and <code class="md-code md-code-inline">.data</code></h2> <p>Not everything has to be as complicated as AJAX is, and <code class="md-code md-code-inline">Element</code> attributes are never <em>reason enough</em> to warrant the inclusion of a heavy-weight library such as jQuery.</p> <p>Lets look at all of these in turn.</p> <p><code class="md-code md-code-inline">.attr(name, val)</code> is just sugar. Once we have an element, presumably obtained using something similar to <code class="md-code md-code-inline">document.querySelector(&apos;main&apos;)</code>, we can use <code class="md-code md-code-inline">.setAttribute(name, val)</code> to set the attribute, or <code class="md-code md-code-inline">getAttribute(name)</code> to retrieve its value.</p> <p><code class="md-code md-code-inline">.prop(name, val)</code> does pretty much the same thing, except there are some parse hooks in place to return booleans or numbers, rather than always returning strings. Which is nice, but <em>that doesn&#x2019;t justify an enormous footprint</em> either.</p> <p>When it comes to CSS, it pains me to read the source code of jQuery plugins and find out that they set up tens of different styles directly in their JavaScript code, why not use classes instead? That&#x2019;s what they are for! Unless you are writing CSS that depends on the dynamic calculations you are performing in your JS code, there is <em>no reason not to use a class</em>, instead.</p> <p>Once that&#x2019;s out of the picture, we&#x2019;re left with two applications for manipulating classes within JS code: logic to <em>hide or display</em> DOM components, and logic to <em>add or remove classes</em> from our nodes.</p> <p>You should be ashamed to even think of using jQuery for the former. These would be all you need to type to get that working:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-comment">// display</span>
element.style.display = <span class="md-code-string">&apos;block&apos;</span>;

<span class="md-code-comment">// hide</span>
element.style.display = <span class="md-code-string">&apos;none&apos;</span>;
</code></pre> <p>When it comes to the latter, we can use <a href="https://developer.mozilla.org/en-US/docs/Web/API/element.classList" target="_blank" aria-label="element.classList - MDN">classList</a>, which doesn&#x2019;t have <a href="http://caniuse.com/classlist" target="_blank" aria-label="Can I Use classList?">great support</a>, or we can simply use <code class="md-code md-code-inline">className</code>. If we find ourselves in need to add or remove classes, then we will have to resort to using <a href="https://ponyfoo.com/2013/05/27/learn-regular-expressions" aria-label="Learn Regular Expressions">regular expressions</a> to figure out how to remove classes from our elements.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">!<span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">(exports)</span></span>{
    <span class="md-code-keyword">var</span> class_list = !!<span class="md-code-built_in">document</span>.body.classList;
    <span class="md-code-keyword">var</span> s = <span class="md-code-string">&apos;(\\s|^)&apos;</span>; <span class="md-code-comment">// space or start</span>
    <span class="md-code-keyword">var</span> e = <span class="md-code-string">&apos;(\\s|$)&apos;</span>; <span class="md-code-comment">// space or end</span>

    <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">getRegex</span><span class="md-code-params">(className)</span></span>{
        <span class="md-code-keyword">return</span> <span class="md-code-keyword">new</span> <span class="md-code-built_in">RegExp</span>(s + className + e, <span class="md-code-string">&apos;g&apos;</span>);
    }

    exports.addClass = <span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">(element, className)</span></span>{
        <span class="md-code-keyword">if</span>(class_list){
            element.classList.add(className);
        }<span class="md-code-keyword">else</span>{
            element.className += <span class="md-code-string">&apos; &apos;</span> + className;
        }
    };

    exports.removeClass = <span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">(element, className)</span></span>{
        <span class="md-code-keyword">if</span>(class_list){
            element.classList.remove(className);
        }<span class="md-code-keyword">else</span>{
            <span class="md-code-keyword">var</span> rclass = getRegex(className);
            element.className = element.className.replace(rclass, <span class="md-code-string">&apos;&apos;</span>);
        }
    };

    exports.hasClass = <span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">(element, className)</span></span>{
        <span class="md-code-keyword">if</span>(class_list){
            <span class="md-code-keyword">return</span> element.classList.contains(className);
        }<span class="md-code-keyword">else</span>{
            <span class="md-code-keyword">var</span> rclass = getRegex(className);
            <span class="md-code-keyword">return</span> element.className.match(rclass);
        }
    };
}(<span class="md-code-built_in">window</span>);
</code></pre> <p>That wasn&#x2019;t that hard, either. As we are on the subject, let me give you some <em>added value</em>, and talk about <a href="https://developer.mozilla.org/en-US/docs/Web/API/window.getComputedStyle" target="_blank" aria-label="window.getComputedStyle - MDN">getComputedStyle</a>. Supported in every browser <a href="http://caniuse.com/getcomputedstyle" target="_blank" aria-label="Can I Use getComputedStyle?">except</a> for <code class="md-code md-code-inline">IE &lt; 9</code>, <code class="md-code md-code-inline">getComputedStyle</code> returns the resulting value of <em>applying every style on an element</em>. The coolest feature of this method, though, is that it enables us to grab the computed _pseudo-element styles. For example, we could grab the <code class="md-code md-code-inline">::after</code> styles on a <code class="md-code md-code-inline">&lt;blockquote&gt;</code> element.</p> <p>Here you have an example taken from <strong>MDN</strong>:</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">style</span>&gt;</span><span>
    <span class="md-code-tag">h3</span><span class="md-code-pseudo">:after</span> <span class="md-code-rules">{
        <span><span class="md-code-attribute">content</span>:<span class="md-code-value"> <span class="md-code-string">&apos; rocks!&apos;</span></span></span>;
    <span>}</span></span>
</span><span class="md-code-tag">&lt;/<span class="md-code-title">style</span>&gt;</span>

<span class="md-code-tag">&lt;<span class="md-code-title">h3</span>&gt;</span>generated content<span class="md-code-tag">&lt;/<span class="md-code-title">h3</span>&gt;</span> 

<span class="md-code-tag">&lt;<span class="md-code-title">script</span>&gt;</span><span>
    <span class="md-code-keyword">var</span> h3 = <span class="md-code-built_in">document</span>.querySelector(<span class="md-code-string">&apos;h3&apos;</span>);
    <span class="md-code-keyword">var</span> result = getComputedStyle(h3, <span class="md-code-string">&apos;:after&apos;</span>).content;

    <span class="md-code-comment">// &gt; &apos; rocks!&apos;</span>
    <span class="md-code-built_in">console</span>.log(<span class="md-code-string">&apos;the generated content is: &apos;</span>, result);
</span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>
</code></pre> <p>Before we move forward, there&#x2019;s <em>one more attribute accessor</em> we might want to talk about. The <code class="md-code md-code-inline">.data</code> API. Similarly to <code class="md-code md-code-inline">.prop</code>, it works by probing the value in your <code class="md-code md-code-inline">data-*</code> attributes, parsing <code class="md-code md-code-inline">true</code>, <code class="md-code md-code-inline">false</code>, numbers, and JSON <code class="md-code md-code-inline">object</code>s, or just returning a <code class="md-code md-code-inline">String</code>. One important difference here, is that <em>jQuery sets up a cache</em> for these values. This helps prevent querying the DOM time and again for stuff that <em>isn&#x2019;t going to change</em>. Under the assumption that <em>we are manipulating data attributes solely through their API</em>, that is.</p> <p>Other than that, a simplified data API might look like:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">data</span><span class="md-code-params">(element, name, value)</span></span>{
    <span class="md-code-keyword">if</span> (value === <span class="md-code-literal">undefined</span>){
        value = element.getAttribute(<span class="md-code-string">&apos;data-&apos;</span> + name);
        <span class="md-code-keyword">return</span> <span class="md-code-built_in">JSON</span>.parse(value);
    }<span class="md-code-keyword">else</span>{
        element.setAttribute(<span class="md-code-string">&apos;data-&apos;</span> + name, <span class="md-code-built_in">JSON</span>.stringify(value));
    }
}
</code></pre> <p>Keep in mind you might also want to use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset" target="_blank" aria-label="Element.dataset - MDN">dataset API</a>, but <code class="md-code md-code-inline">IE &lt; 11</code> doesn&#x2019;t support it.</p> <p>If you were to add a little cache to reduce DOM querying, you&#x2019;d have your own little awesome <code class="md-code md-code-inline">.data</code> API!</p> <h2 id="effects-animations">Effects, Animations</h2> <p>In this category, I&#x2019;ll get straight to the point. We&#x2019;ll want to <strong>use CSS for any kind of animations</strong>. If it&#x2019;s <em>fading effects</em> you are after, then you can resort to <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transition" target="_blank" aria-label="CSS Transitions - MDN">transitions</a>, instead.</p> <p>When it comes to animations, there is one more option, though. We could use <code class="md-code md-code-inline">setInterval</code> to set up a loop where we animate something, for example, if we want to move an element with absolute positioning all around our viewport.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">setInterval(<span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">()</span></span>{
    <span class="md-code-comment">// move it a bit</span>
}, delay);
</code></pre> <p>I always had problems with <code class="md-code md-code-inline">setInterval</code>. <strong>Personal problems</strong>. You see, the delay you apply as the second argument counts from the moment the function triggers, not the moment the execution ends. As a result, if your function takes <code class="md-code md-code-inline">400</code>, and you&#x2019;ve set a delay of <code class="md-code md-code-inline">600</code>, The calls will eventually overlap so much, making a mess of everything. For that reason, I prefer doing <em>a bit of extra work</em>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">loop</span><span class="md-code-params">(fn, interval)</span></span>{
    <span class="md-code-keyword">return</span> setTimeout(<span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">()</span></span>{
        fn(<span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">()</span></span>{
            loop(fn, interval);
        });
    }, interval);
}

loop(<span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">(done)</span></span>{
    <span class="md-code-comment">// do our trick</span>

    done(); <span class="md-code-comment">// continue our loop</span>
}, <span class="md-code-number">600</span>);
</code></pre> <p>The difference is subtle, but now, we can invoke <code class="md-code md-code-inline">done</code> whenever we are done, so our loop will run sequentially, not in parallel, which** makes no sense**. It&#x2019;s supposed to be an <em>interval</em>, right?</p> <h3 id="using-requestanimationframe">Using <code class="md-code md-code-inline">requestAnimationFrame</code></h3> <p>Enough with the <code class="md-code md-code-inline">setInterval</code> rant. We shouldn&#x2019;t have to use either of these when it comes to animations. A <em>better option</em> is available. Yes, I&#x2019;m talking about <a href="https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame" target="_blank" aria-label="requestAnimationFrame - MDN">requestAnimationFrame</a>. No, it has pretty <a href="http://caniuse.com/requestanimationframe" target="_blank" aria-label="Can I Use requestAnimationFrame?">bad browser support</a>. Android doesn&#x2019;t support it <em>at all</em>. <code class="md-code md-code-inline">IE &lt; 10</code> doesn&#x2019;t care about it either.</p> <p><code class="md-code md-code-inline">requestAnimationFrame</code> allows us to perform a <code class="md-code md-code-inline">setInterval</code>-like operation just before every repaint. This method takes a callback, our operation, and passes our callback an argument, with a <code class="md-code md-code-inline">timestamp</code>, so we don&#x2019;t have to make assumptions about the time elapsed.</p> <p>Here is an usage example, forked from the example on <strong>MDN</strong>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">!<span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">(w, raf)</span> </span>{
    w[raf] = w[raf] ||
             w.mozRequestAnimationFrame ||
             w.webkitRequestAnimationFrame ||
             w.msRequestAnimationFrame;           
}(<span class="md-code-built_in">window</span>, <span class="md-code-string">&apos;requestAnimationFrame&apos;</span>);

<span class="md-code-keyword">var</span> start = <span class="md-code-built_in">Date</span>.now();

<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">step</span><span class="md-code-params">(timestamp)</span> </span>{
    <span class="md-code-keyword">var</span> progress = timestamp - start;
    d.style.left = <span class="md-code-built_in">Math</span>.min(progress / <span class="md-code-number">10</span>, <span class="md-code-number">200</span>) + <span class="md-code-string">&apos;px&apos;</span>;
    <span class="md-code-keyword">if</span> (progress &lt; <span class="md-code-number">2000</span>) {
        requestAnimationFrame(step);
    }
}

requestAnimationFrame(step);
</code></pre> <p><strong>Chris Coyier</strong> also provides a few, <a href="http://css-tricks.com/using-requestanimationframe/" target="_blank" aria-label="Using requestAnimationFrame">nice usage examples</a>, on his blog.</p> <h2 id="events">Events</h2> <p><em>A lot has improved</em> in the jQuery <strong>event API</strong> over time. It used to be all over the place, nowadays we mostly have the <code class="md-code md-code-inline">.on</code> and <code class="md-code md-code-inline">.off</code> methods, and those handle <em>pretty much everything</em> we need.</p> <p>So what are the strong points for jQuery in event handling? Well, they make it really easy to perform <em>event delegation</em>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">$(<span class="md-code-string">&apos;ul&apos;</span>).on(<span class="md-code-string">&apos;click&apos;</span>, <span class="md-code-string">&apos;li&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">()</span></span>{
    <span class="md-code-built_in">console</span>.log(<span class="md-code-string">&apos;li clicked!&apos;</span>, <span class="md-code-keyword">this</span>);
});
</code></pre> <p>This seemingly innocent handler will be triggered whenever we click on <em>any</em> <code class="md-code md-code-inline">&lt;li&gt;</code>, yet the event handler will be on the parent <code class="md-code md-code-inline">&lt;ul&gt;</code>. The way this works is that whenever an <code class="md-code md-code-inline">&lt;li&gt;</code> is clicked, the event will <a href="http://www.quirksmode.org/js/events_order.html" target="_blank" aria-label="Event Order in JavaScript">bubble up</a> to the <code class="md-code md-code-inline">&lt;ul&gt;</code>. The <code class="md-code md-code-inline">&lt;ul&gt;</code> will have an special handler, provided by jQuery, which will trigger <em>our</em> handler <code class="md-code md-code-inline">.apply</code>ing the <code class="md-code md-code-inline">&lt;li&gt;</code> as <code class="md-code md-code-inline">this</code>.</p> <p>If you are just realizing <em>how complicated this is</em> to grasp, that&#x2019;s probably because how powerful the abstraction is. The implications of this might not be obvious at a glance, but the end result is that you get a much more performant experience. Rather than setting up an event handler for each <code class="md-code md-code-inline">&lt;li&gt;</code>, which could <em>potentially be thousands</em>, you are setting a single <code class="md-code md-code-inline">&lt;ul&gt;</code> event listener instead.</p> <p>Other than event delegation, their API is once again really easy to implement by hand, and you might want to check out my <a href="https://ponyfoo.com/2013/06/10/uncovering-the-native-dom-api" aria-label="Uncovering the Native DOM API">previous post</a> on the subject to wrap your head around that.</p> <p>If you want to try <em>going native</em>, a suggested approach consists of <strong>barely two lines of code</strong>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> $ = <span class="md-code-built_in">document</span>.querySelectorAll.bind(<span class="md-code-built_in">document</span>);
Element.prototype.on = Element.prototype.addEventListener;
</code></pre> <p>Once our <em>ridiculously small library</em> is in place, we can attach event handlers using our new API.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">$(<span class="md-code-string">&apos;#featured&apos;</span>)[<span class="md-code-number">0</span>].on(<span class="md-code-string">&apos;keyup&apos;</span>, handleKeyUp);
</code></pre> <p>Concise enough.</p> <h2 id="dom-querying-selectors">DOM Querying, Selectors</h2> <blockquote> <p>One of the most important mechanisms in browsers is querying the DOM to obtain a reference to HTML nodes. Yet, <code class="md-code md-code-inline">querySelector</code>, by far the best option to perform such requests, is relatively unknown to the average developer. It&#x2019;s as if they&#x2019;re stuck with either <code class="md-code md-code-inline">getElementById</code>, or <em>using jQuery</em>.</p> </blockquote> <p>Truth is, <code class="md-code md-code-inline">querySelector</code> and <code class="md-code md-code-inline">querySelectorAll</code> are <a href="http://caniuse.com/queryselector" target="_blank" aria-label="Can I Use querySelector?">broadly</a> supported in all major browsers, with the exception of <code class="md-code md-code-inline">IE &lt; 8</code>. That is <em>really good</em> browser support. That is, in fact, one of the major reasons jQuery decided to <em>drop support</em> for <code class="md-code md-code-inline">IE &lt; 9</code> in <a href="http://blog.jquery.com/2013/04/18/jquery-2-0-released/" target="_blank" aria-label="jQuery 2.0 Released">their v2 branch</a>.</p> <p>With <code class="md-code md-code-inline">querySelector</code> being implemented across all browsers, the novelty in jQuery is reduced to <em>the ability to extend the selector engine</em> by adding your own, <em>custom selectors</em>. This just adds to the confusion and isn&#x2019;t really necessary. <em>I&#x2019;d recommend staying away from <a href="http://james.padolsey.com/javascript/extending-jquerys-selector-capabilities/" target="_blank" aria-label="Extending jQuery&apos;s Selector Capabilities">that</a></em>.</p> <h2 id="dom-manipulation">DOM Manipulation</h2> <p>There isn&#x2019;t a lot left to cover about DOM manipulation that wasn&#x2019;t covered in the other topics we&#x2019;ve been discussing. If we look at the <a href="http://api.jquery.com/category/manipulation/" target="_blank" aria-label="Manipulation - jQuery API Documentation">API documentation</a> once again, you&#x2019;ll notice we&#x2019;ve accounted for most of the methods in the category. The ones we didn&#x2019;t mention are mostly measure computations, DOM altering methods, or methods such as <code class="md-code md-code-inline">.val()</code>, <code class="md-code md-code-inline">.text()</code> and <code class="md-code md-code-inline">.html()</code>, which <em>don&#x2019;t really abstract any cross-browser limitations away</em>.</p> <p>When it comes to altering the DOM, the native methods can be <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node#Methods" target="_blank" aria-label="Node Methods - MDN">found on MDN</a>. Once we know about those, all jQuery really does is <em>build on top</em> of the <code class="md-code md-code-inline">Node</code> API, providing us with some <a href="http://en.wikipedia.org/wiki/Syntactic_sugar" target="_blank" aria-label="Syntactic Sugar">syntactic sugar</a>, such as <code class="md-code md-code-inline">insertAfter</code> does.</p> <h2 id="plugins"><strong>Plugins</strong></h2> <p><img alt="plugins.jpg" title="Sad, sad plugins" class="" src="https://i.imgur.com/rl2URLW.jpg"></p> <p>Ah, plugins! Do we really need <em>everything</em> to be a <a href="http://net.tutsplus.com/tutorials/javascript-ajax/14-reason-why-nobody-used-your-jquery-plugin/" target="_blank" aria-label="14 Reasons Why Nobody Used Your jQuery Plugin">jQuery plugin</a>? I get <em>ecstatic</em> whenever I find a small library, which performs its intended objectives really well, has a <em>succint API</em>, and <strong>doesn&#x2019;t freaking depend on jQuery for <em>absolutely no reason</em></strong>.</p> <p>I guess my point is, make it a <em>conscious decision</em>. Don&#x2019;t mindlessly turn your <em>ten line miracle worker</em> into a jQuery plugin just because you want to use <code class="md-code md-code-inline">.hide()</code> and <code class="md-code md-code-inline">.show()</code>. Write native code instead. You&#x2019;ll probably learn to <em>write better code</em> while at it, and more people will be able to use it, <em>to boot</em>.</p> <blockquote> <p>Oh, and <strong>stay the hell away from <a href="http://jqueryui.com/" target="_blank" aria-label="jQuery User Interface">jQuery UI</a></strong>, too. <em>Thank you</em>.</p> </blockquote> <p>Unless you are really <em>using it extensively</em>. If you only need the dialogs, you can get away with <a href="http://raventools.com/blog/create-a-modal-dialog-using-css-and-javascript/" target="_blank" aria-label="Create a Modal Dialog Using CSS and JavaScript">just a few lines</a> of CSS code!</p> <h5 id="need-a-talk">Need a Talk?</h5> <p>Below is an excellent talk on jQuery, by <a href="http://remysharp.com/" target="_blank" aria-label="Remy Sharp&apos;s Blog">Remy Sharp</a>. He addresses a lot of important points, and raises some very good questions. He also presents a minimal library called <a href="https://github.com/remy/min.js" target="_blank" aria-label="min.js on GitHub">min.js</a>, which I think shows <em>a lot</em> of promise. In this half hour <em>ish</em> talk, you&#x2019;ll learn how you can actually write native BOM pretty effortlessly, without having to resort to a jQuery-like library.</p> <p><a href="http://vimeo.com/68910118" target="_blank" aria-label="So you know jQuery. Now what?"><img alt="remy-on-jquery" class="" src="https://i.imgur.com/nORxT86.jpg"></a></p> <h5 id="in-conclusion">In Conclusion</h5> <blockquote> <p>I don&#x2019;t expect you to <em>shelf</em> jQuery right away. I&#x2019;m just attempting to enlighten you, <em>there is another way to do things</em>. jQuery is great and all, but it&#x2019;s been around for <em>almost ten years</em>, so it&#x2019;s <em>understandable</em> that it lost some value along the way. It is good if you are actually using many of its features, but <em>you should ponder</em> about whether this is a fact for you, or if you are simply using it because, <em>hey, it&#x2019;s already there</em>.</p> </blockquote> <p>And it&#x2019;s not <em>jQuery&#x2019;s fault</em>, but rather, we should be <em>complimenting the browsers</em> for this change. Going forward, IE11 is finally <a href="http://www.nczonline.net/blog/2013/07/02/internet-explorer-11-dont-call-me-ie/" target="_blank" aria-label="Internet Explorer 11: Don&apos;t call me IE">putting an end</a> to all the non-sense set forth by it&#x2019;s predecessors. They&#x2019;re really trying hard this time to set it apart from &#x201C;old IE&#x201D; distributions.</p> <p>Now that all major browsers offer automatic updates, jQuery will <em>steadily decline in value</em>. The ultimate purpose of the library, dealing with the <strong>multitude of cross browser issues</strong> present in older browsers, is <em>subsiding</em>. In its current state, jQuery will eventually become a library that just provides a somewhat nicer API than native browser JavaScript does.</p> <blockquote> <p>If you think there is a topic I didn&#x2019;t uncover, please <em>let me know</em>, and I&#x2019;ll consider it for a future blog post.</p> </blockquote> <p><strong>Happy experimenting!</strong></p></div>
