<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/css-for-dummies">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/css-for-dummies"><div><img src="https://i.imgur.com/WSy36xI.png" alt="CSS For Dummies"></div></a>

<h1>CSS For Dummies</h1>

<p><kbd>css</kbd> <kbd>front-end</kbd> <kbd>learning</kbd></p>

<blockquote><p>Web design today is hard to get right. I&#x2019;ve been meaning to talk about front-end design for a while, but I couldn&#x2019;t get the subject <em>quite right</em>. Seeing how &#x2026;</p></blockquote>

<div><p>Web design today is hard to get right. I&#x2019;ve been meaning to talk about front-end design for a while, but I couldn&#x2019;t get the subject <em>quite right</em>. Seeing how detailing the <a href="https://ponyfoo.com/2013/06/10/uncovering-the-native-dom-api">underlying browser technology</a> in JavaScript, I figured I&#x2019;d do the same for <a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets" target="_blank">CSS</a>.</p></div>

<blockquote></blockquote>

<div><p>I&#x2019;ll be taking a different approach, though. Rather than explain what libraries do, I&#x2019;ll try explaining why a need for them was born, and walk you through the most basic stuff, such as selectors, and follow up by tackling complex topics such as fonts, <a href="http://twitter.github.io/bootstrap/" target="_blank">Bootstrap</a>, pre-processing, and more.</p></div>

<div><h2 id="fundamentals">Fundamentals</h2> <p>CSS was born out of necessity. The necessity to <em>separate content from presentation</em>. The idea was to put behind stuff like <code class="md-code md-code-inline">&lt;body bgcolor=&apos;black&apos;&gt;</code>, and work towards a more layered approach. DOM elements would get CSS classes (more on that later), and in our CSS, we would define style rules, such as <code class="md-code md-code-inline">background-color</code>, or <code class="md-code md-code-inline">font-size</code>.</p> <p>The previous example would be redefined as:</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">head</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">style</span>&gt;</span><span>
    <span class="md-code-tag">body</span> <span class="md-code-rules">{
      <span><span class="md-code-attribute">background-color</span>:<span class="md-code-value"> black</span></span>;
    <span>}</span></span>
    </span><span class="md-code-tag">&lt;/<span class="md-code-title">style</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">head</span>&gt;</span>

<span class="md-code-tag">&lt;<span class="md-code-title">body</span>&gt;</span>
</code></pre> <p>The CSS is contained in a <code class="md-code md-code-inline">&lt;style&gt;</code> block, or it can be alternatively be placed in an external stylesheet. Like so:</p> <pre class="md-code-block"><code class="md-code md-lang-css"><span class="md-code-comment">/* style.css */</span>

<span class="md-code-tag">body</span> <span class="md-code-rules">{
  <span><span class="md-code-attribute">background-color</span>:<span class="md-code-value"> black</span></span>;
<span>}</span></span>
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">head</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">link</span> <span class="md-code-attribute">rel</span>=<span class="md-code-value">&apos;stylesheet&apos;</span> <span class="md-code-attribute">href</span>=<span class="md-code-value">&apos;style.css&apos;</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">head</span>&gt;</span>
    
<span class="md-code-tag">&lt;<span class="md-code-title">body</span>&gt;</span>
</code></pre> <p>Alternatively, you can set styles in DOM attributes, or through JavaScript. The former is hardly ever recommended, with an <em>exception</em> being made in the case of <em>HTML emails</em>. The latter is sometimes useful when <em>calculations are needed</em>, but it&#x2019;s generally bad practice otherwise. JavaScript is useful for toggling (adding and removing) CSS classes on DOM elements, to denote a change in state.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">body</span> <span class="md-code-attribute">style</span>=<span class="md-code-value">&apos;background-color: black;&apos;</span>&gt;</span>
</code></pre> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">document</span>.body.backgroundColor = <span class="md-code-string">&apos;black&apos;</span>;
</code></pre> <p>Note how the notation changes in JS. As a general rule, style properties are <a href="http://en.wikipedia.org/wiki/CamelCase" target="_blank" aria-label="Camel Casing - Wikipedia">camel-cased</a> in JavaScript, and hyphenated in CSS.</p> <h4 id="classes">Classes</h4> <p>We mentioned <em>classes</em> earlier. Classes can be styled in CSS style sheets by prefixing them with a dot.</p> <pre class="md-code-block"><code class="md-code md-lang-css"><span class="md-code-class">.my-class</span> <span class="md-code-rules">{
  <span><span class="md-code-attribute">background-color</span>:<span class="md-code-value"> black</span></span>;
<span>}</span></span>
</code></pre> <p>They can be added to DOM elements using the <code class="md-code md-code-inline">class</code> attribute. <em>Multiple classes</em> can be added to each element.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">body</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;my-class&apos;</span>&gt;</span>

<span class="md-code-tag">&lt;<span class="md-code-title">body</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;my-class that-one another&apos;</span>&gt;</span>
</code></pre> <h4 id="the-cascading-aspect">The Cascading Aspect</h4> <p>Thus far, we&#x2019;ve been discussing <em>Style Sheets</em>, but remember, these are also <strong>Cascading</strong>, hence CSS. So what does <em>cascading</em> imply?</p> <p>Cascading means that <strong>order matters</strong>. That is to say, styles follow a <a href="http://www.w3.org/TR/CSS2/cascade.html" target="_blank" aria-label="Cascading and Inheritance in CSS - W3">convoluted</a> order of precedence rule-set. This order of precedence can be overridden appending <code class="md-code md-code-inline">!important</code> to the end of our style values, but <em>this is a hack</em>, and <strong>not recommended</strong>.</p> <p>Instead, we should design our style sheets so that our rules cascade into each other. If we find ourselves resetting a bunch of properties from a <em>less specific selector</em>, in a more specific one, that should signal trouble (more on selectors in a minute).</p> <h4 id="selectors">Selectors</h4> <p>Selectors are what we use in CSS to identify the elements we want to style with a particular set of rules. If you are a JavaScript developer, you probably already used selectors with jQuery, or with the <a href="https://ponyfoo.com/2013/06/10/uncovering-the-native-dom-api" aria-label="Uncovering the Native DOM API">native methods</a> that underline its selector engine.</p> <p>A quick overview of selectors:</p> <pre class="md-code-block"><code class="md-code md-lang-css"><span class="md-code-comment">/* elements with the given id */</span>
<span class="md-code-id">#element-id</span> <span class="md-code-comment">/* matches &lt;anything id=&apos;element-id&apos; /&gt; */</span>

<span class="md-code-comment">/* elements with the given class name */</span>
<span class="md-code-class">.class-name</span> <span class="md-code-comment">/* matches &lt;anything class=&apos;class-name&apos; /&gt; */</span>

<span class="md-code-comment">/* span DOM elements */</span>
<span class="md-code-tag">span</span> <span class="md-code-comment">/* matches &lt;span/&gt; */</span>

<span class="md-code-comment">/* elements with an href attribute */</span>
<span class="md-code-attr_selector">[href]</span> <span class="md-code-comment">/* matches &lt;anything href /&gt; */</span>

<span class="md-code-comment">/* data-foo property with value equal to &apos;bar&apos; */</span>
<span class="md-code-attr_selector">[data-foo=bar]</span> <span class="md-code-comment">/* matches &lt;anything data-foo=&apos;bar&apos; /&gt; */</span>

<span class="md-code-comment">/* &apos;star selector&apos;, matches everything */</span>
* <span class="md-code-comment">/* matches &lt;anything /&gt; */</span>

<span class="md-code-comment">/* the currently focused element */</span>
<span class="md-code-pseudo">:focus</span> <span class="md-code-comment">/* matches &lt;anything /&gt;, when active */</span>

<span class="md-code-comment">/* elements that are under your mouse pointer */</span>
<span class="md-code-pseudo">:hover</span> <span class="md-code-comment">/* matches &lt;anything /&gt;, when you mouse over it */</span>

<span class="md-code-comment">/* selectors can be chained using spaces or special characters */</span>

<span class="md-code-comment">/* strong tag, one of its parents is an span */</span>
<span class="md-code-tag">span</span> <span class="md-code-tag">strong</span>

<span class="md-code-comment">/* strong tag, its immediate parent is an span */</span>
<span class="md-code-tag">span</span> &gt; <span class="md-code-tag">strong</span>

<span class="md-code-comment">/* span tag immediately following a .title element */</span>
<span class="md-code-class">.title</span> + <span class="md-code-tag">span</span> 
</code></pre> <p>You can go deeper into selectors looking at the <a href="http://www.w3.org/TR/CSS21/selector.html" target="_blank" aria-label="CSS 2.1 Selectors - W3">W3 recommendation</a>, but these should be more than enough to get you going.</p> <ul> <li>Keep your selectors as simple as possible. This will make them easy to read and interpret later on</li> <li>You&#x2019;ll want to use <em>classes</em> to style your elements</li> <li>Try and <em>avoid nesting styles too deeply</em></li> <li>Following an <a href="http://css-tricks.com/css-style-guides/" target="_blank" aria-label="CSS Style Guides - CSS-Tricks">style guide</a> might prove useful</li> </ul> <h4 id="css-properties">CSS Properties</h4> <p>If you want to learn the different CSS properties you can apply, I&#x2019;ll recommend a few links.</p> <ul> <li><a href="http://www.w3.org/TR/CSS21/propidx.html" target="_blank" aria-label="CSS 2.1 Full Property Table - W3">CSS 2.1 properties</a> in the W3 recommendation</li> <li><a href="http://www.css3files.com/" target="_blank" aria-label="CSS3 Files">css3files.com</a> explains what&#x2019;s new in CSS 3</li> <li><a href="http://css3please.com/" target="_blank" aria-label="CSS3 Please!">css3please.com</a> contains some cross-browser CSS rules</li> </ul> <p>Honestly, <em>the best way to learn CSS from scratch</em>, other than the fundamentals I describe in this blog post, is <strong>by googling</strong>. You want to style something in a particular way? Just google it. In all likelyhood, someone <em>had</em> that question before, and someone else <em>answered it</em>.</p> <p>You can always learn more about CSS by subscribing to sites such as <a href="http://css-tricks.com/" target="_blank" aria-label="CSS Tricks by Chris Coyier">css-tricks.com</a>.</p> <h4 id="cascading-issues">Cascading Issues</h4> <p>Earlier on I mentioned cascading should be <em>natural</em>. Lets look at an unnatural example.</p> <pre class="md-code-block"><code class="md-code md-lang-css"><span class="md-code-class">.button</span> <span class="md-code-rules">{
    <span><span class="md-code-attribute">border</span>:<span class="md-code-value"> <span class="md-code-number">3px</span> solid <span class="md-code-hexcolor">#ffc</span></span></span>;
    <span><span class="md-code-attribute">border-radius</span>:<span class="md-code-value"> <span class="md-code-number">5px</span></span></span>;
    <span><span class="md-code-attribute">text-shadow</span>:<span class="md-code-value"> <span class="md-code-hexcolor">#999</span> <span class="md-code-number">0</span> <span class="md-code-number">1px</span></span></span>;
    <span><span class="md-code-attribute">background-color</span>:<span class="md-code-value"> <span class="md-code-hexcolor">#fcc</span></span></span>;
    <span><span class="md-code-attribute">padding</span>:<span class="md-code-value"> <span class="md-code-number">8px</span></span></span>;
    <span><span class="md-code-attribute">color</span>:<span class="md-code-value"> <span class="md-code-hexcolor">#f00</span></span></span>;
<span>}</span></span>

<span class="md-code-class">.button</span><span class="md-code-class">.flat</span> <span class="md-code-rules">{
    <span><span class="md-code-attribute">border-radius</span>:<span class="md-code-value"> none</span></span>;
    <span><span class="md-code-attribute">text-shadow</span>:<span class="md-code-value"> none</span></span>;
<span>}</span></span>
</code></pre> <p>Generally speaking, we&#x2019;d be better off declaring this using <em>a more natural approach</em>.</p> <pre class="md-code-block"><code class="md-code md-lang-css"><span class="md-code-class">.button</span> <span class="md-code-rules">{
    <span><span class="md-code-attribute">border</span>:<span class="md-code-value"> <span class="md-code-number">3px</span> solid <span class="md-code-hexcolor">#ffc</span></span></span>;
    <span><span class="md-code-attribute">background-color</span>:<span class="md-code-value"> <span class="md-code-hexcolor">#fcc</span></span></span>;
    <span><span class="md-code-attribute">padding</span>:<span class="md-code-value"> <span class="md-code-number">8px</span></span></span>;
    <span><span class="md-code-attribute">color</span>:<span class="md-code-value"> <span class="md-code-hexcolor">#f00</span></span></span>;
<span>}</span></span>

<span class="md-code-class">.button</span><span class="md-code-class">.rounded</span> <span class="md-code-rules">{
    <span><span class="md-code-attribute">border-radius</span>:<span class="md-code-value"> <span class="md-code-number">5px</span></span></span>;
    <span><span class="md-code-attribute">text-shadow</span>:<span class="md-code-value"> <span class="md-code-hexcolor">#999</span> <span class="md-code-number">0</span> <span class="md-code-number">1px</span></span></span>;
<span>}</span></span>
</code></pre> <p>If the reason for this isn&#x2019;t immediately apparent, try thinking about this in a broader scope, where you have <em>tons</em> of overriding classes and many of them <em>don&#x2019;t want the 3D appearance</em>.</p> <h2 id="history-of-css">History of CSS</h2> <p>Now that we know the basics about <em>what CSS is</em>, and how to apply it to <em>style the web</em>, lets dive into a <strong>history lesson</strong> for a while. Or, at the very least, a few milestones in CSS history, so that we better understand the current state of the web.</p> <p>In the beginning, different kinds of browsers started emerging. <a href="http://www.iecss.com/" target="_blank" aria-label="UA Style Sheets">User agent stylesheets</a>, shipped with each browser, presented different basic styles, and that represented a problem for web designers who wanted their site to look the same on every navigator. As a solution to this problem, the CSS reset concept was conceived.</p> <h4 id="css-reset">CSS Reset</h4> <p>The main issue was with paddings, and margins. A first, naive fix for this problem, was to use the star selector, and simply reset padding and margin styles for every single element.</p> <pre class="md-code-block"><code class="md-code md-lang-css">* <span class="md-code-rules">{
    <span><span class="md-code-attribute">margin</span>:<span class="md-code-value"> <span class="md-code-number">0</span></span></span>;
    <span><span class="md-code-attribute">padding</span>:<span class="md-code-value"> <span class="md-code-number">0</span></span></span>;
<span>}</span></span>
</code></pre> <p>This, however, raised <a href="http://www.stevesouders.com/blog/2009/03/10/performance-impact-of-css-selectors/" target="_blank" aria-label="Performance Impact of CSS Selectors"><em>performance concerns</em></a>, and imposed unwanted resets on some elements, such as <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Consistent_list_indentation" target="_blank" aria-label="Consistent List Indentation - MDN">lists</a>.</p> <p>Thus, a better approach was born, and eventually prevailed. Eric Meyer created the <a href="http://meyerweb.com/eric/tools/css/reset/" target="_blank" aria-label="CSS Reset Stylesheet">CSS Reset</a>, which is an improvement over the former. It resets more than just margins and paddings. It avoids using the star selector, but instead <em>explicitly declares</em> the tags it resets.</p> <figure><img alt="reset.png" title="reset.css in web dev tools" class="" src="https://i.imgur.com/IlF1a3X.png"><figcaption>reset.png</figcaption></figure> <p>In my mind, the main issue with <code class="md-code md-code-inline">reset.css</code>, is the fact that it makes it really hard inspecting an element&#x2019;s styling, since really long reset statements are added on almost every single element, making it hard to read.</p> <p>A more modern approach exists today.</p> <h4 id="normalizecss">Normalize.css</h4> <blockquote> <p>A modern, HTML5-ready alternative to CSS resets</p> </blockquote> <p>Rather than reset everything, <a href="http://necolas.github.io/normalize.css/" target="_blank" aria-label="Normalize.css alternative to resets">Normalize</a> resets <em>specific styles</em>, in <em>specific elements</em>, and is <a href="http://necolas.github.io/normalize.css/2.1.2/normalize.css" target="_blank" aria-label="normalize.css source">thoroughly documented</a>.</p> <figure><img alt="normalize.png" title="normalize.css in web dev tools" class="" src="https://i.imgur.com/ePrmACd.png"><figcaption>normalize.png</figcaption></figure> <p>This has the <em>added advantage</em> of avoiding the long lists of CSS reset styles we see in our HTML inspectors when resorting to a CSS reset. As you can see, normalize offers <em>a cleaner approach</em>.</p> <h4 id="browser-inconsistencies">Browser inconsistencies</h4> <p>As you might know from JavaScript, browsers don&#x2019;t always implement things the same way, or at the same time. This is <em>particularly nefarious</em> when it comes to CSS 3 properties. As a result, some rules have to be written in several different ways if we want to maximize our <a href="http://caniuse.com/" target="_blank" aria-label="Can I Use">browser support</a>. For example, we might need to write <code class="md-code md-code-inline">border-radius</code>, to give a rounded border to an element, like this:</p> <pre class="md-code-block"><code class="md-code md-lang-css"><span class="md-code-tag">-webkit-border-radius</span>: 5<span class="md-code-tag">px</span>;
<span class="md-code-tag">-moz-border-radius</span>: 5<span class="md-code-tag">px</span>;
<span class="md-code-tag">border-radius</span>: 5<span class="md-code-tag">px</span>;
</code></pre> <p>We should avoid doing this kind of repetitive, and <em>error-prone</em> task by hand, and resort to a <em>pre-processor</em> such as <a href="http://sass-lang.com/" target="_blank" aria-label="SASS pre-processor">SASS</a>, or <a href="http://lesscss.org/" target="_blank" aria-label="LESS pre-processor">LESS</a>, to help us keep our code DRY and concise. We&#x2019;ll go deeper into these topics in a later post.</p> <h4 id="css-grids">CSS Grids</h4> <p>On another level, frameworks have been looming over CSS for a while now <em>(more on frameworks in a future post!)</em>, with different end goals.</p> <p>There are quite a few different <em>grid systems</em> such as <a href="http://960.gs/" target="_blank" aria-label="960 Grid System">960.gs</a> and <a href="http://semantic.gs/" target="_blank" aria-label="Semantic Grid System">semantic.gs</a>, to name a few.</p> <p>Grid systems basically consist of a bundle of classes that help you rapidly prototype a website&#x2019;s layout using the classes provided by the framework. These classes help you define how many columns each element takes up in a grid&#x2019;s row. Here&#x2019;s an example taken from the <a href="http://960.gs/" target="_blank" aria-label="960 Grid System">960.gs</a> site:</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;container_12&quot;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;grid_7 prefix_1&quot;</span>&gt;</span>
      <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;grid_2 alpha&quot;</span>&gt;</span>
          ...
      <span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
      <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;grid_3&quot;</span>&gt;</span>
          ...
      <span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
      <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;grid_2 omega&quot;</span>&gt;</span>
          ...
      <span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&quot;grid_3 suffix_1&quot;</span>&gt;</span>
      ...
  <span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
</code></pre> <p>Before you jump on the grid system bandwagon, I&#x2019;d advise you to check out <a href="http://twitter.github.io/bootstrap/" target="_blank" aria-label="Twitter Bootstrap">Twitter Bootstrap</a>. Bootstrap is a <em>comprehensive</em> rapid prototyping solution for the front-end.</p> <p>I&#x2019;ll write more on bootstrap in a future post, but I wanted to introduce you to the magic world of CSS first.</p> <p>The next article regarding CSS will include topics such as:</p> <ul> <li>Intelligent ways to organize your CSS</li> <li>CSS pre-processor options available (what, and why <em>included</em>)</li> <li>A guide on what <a href="http://twitter.github.io/bootstrap/" target="_blank" aria-label="Twitter Bootstrap">Bootstrap</a> is, how to <em>use it</em>, and why it rocks</li> </ul> <p>Later on, I intend to write about more advanced topics</p> <ul> <li>Picking the right typeface for your site</li> <li>Responsive web design and mobile first</li> <li>Flat design!</li> </ul> <p>If you&#x2019;re interested in these topics, make sure you <em>subscribe</em> via <a href="http://blog.ponyfoo.com/rss/latest.xml" target="_blank" aria-label="RSS Feed for blog.ponyfoo.com">RSS feed</a> or through <em>email notifications</em>!</p></div>
