<h1>Upgraded Asset Management</h1>

<div><kbd>nodejs</kbd> <kbd>assetify</kbd> <kbd>grunt</kbd> <kbd>build</kbd></div>

<blockquote><p>Recently, I&#x2019;ve updated the documentation for <a href="https://github.com/bevacqua/node-assetify" target="_blank">assetify</a>, and <a href="https://github.com/bevacqua/grunt-assetify" target="_blank">grunt-assetify</a>. I wanted to share the usage patterns as well as my reasons for developing, and &#x2026;</p></blockquote>

<div><p>Recently, I&#x2019;ve updated the documentation for <a href="https://github.com/bevacqua/node-assetify" target="_blank">assetify</a>, and <a href="https://github.com/bevacqua/grunt-assetify" target="_blank">grunt-assetify</a>. I wanted to share the usage patterns as well as my reasons for developing, and maintaining <strong>assetify</strong>.</p></div>

<div></div>

<div><p>There aren&#x2019;t real contenders when it comes to static asset management solutions for Node, and the solutions out there were either too thin, too opinionated, or too careless.</p></div>

<div><p><img alt="static.jpg" title="Static Assets" class="" src="https://i.imgur.com/hpXE43e.jpg"></p> <h1 id="why-assetify">Why <code class="md-code md-code-inline">assetify</code>?</h1> <p>There are quite a few reasons, actually. The <a href="https://ponyfoo.com/2013/01/18/asset-management-in-node" aria-label="Asset Management in Node">first reason I had</a> still holds true. I don&#x2019;t think there are any comprehensive, simple, and <strong>sufficiently flexible</strong> alternatives to <code class="md-code md-code-inline">assetify</code> out there in the world of Node. You have to either deal with the <em>lame constraints</em> <a href="http://requirejs.org/" target="_blank" aria-label="Require.JS Asset Loader">Require.JS</a> enforces upon your code (and everyone else&#x2019;s), or with package managers such as Twitter&#x2019;s <a href="https://github.com/bower/bower" target="_blank" aria-label="bower Package Manager on GitHub">bower</a> which doesn&#x2019;t really do much more than what <code class="md-code md-code-inline">npm</code> does for Node. Except the needs for front-end asset management are <strong>way different</strong> than those of the Node ecosystem.</p> <p>We <strong>need</strong> ways to:</p> <ul> <li>Figure out which assets to serve</li> <li>Pre-process the multitude of languages that compile to JS and CSS</li> <li>Mash them together to prevent so many requests</li> <li>Minify their footprints. Both in code and using <a href="http://en.wikipedia.org/wiki/Gzip" target="_blank" aria-label="GZip Compression">GZip</a></li> <li>Slap <code class="md-code md-code-inline">Expires</code> headers onto as many static assets as possible</li> <li>Dynamically add snippets of CSS and JS to our responses</li> <li>Keep all of the above in the correct order, so dependencies work well</li> <li>Strictly separate the build process from executing the web server</li> <li>Avoid repeating ourselves when declaring the asset sources</li> <li>Do all of the above while being able to work with ease</li> </ul> <p>That&#x2019;s a lot of stuff we should be doing, yet, countless projects still serve their static assets straight from their development sources. This shouldn&#x2019;t be the prevalent case.</p> <h2 id="the-assetify-way">The <code class="md-code md-code-inline">assetify</code> Way</h2> <p>There are two distinct stages when working with assetify to manage static assets. The first step is processing the sources you developed, parsing LESS stylesheets, CoffeeScript files, bundling, minifying, etc. The second step involves serving the resulting files.</p> <h2 id="asset-processing">Asset Processing</h2> <p>With assetify, you work on your sources, and then generate output that is meant to be consumed by your users. <code class="md-code md-code-inline">assetify</code> is <strong>middleware-based</strong>, and you can <em>extend it with plugins</em> of your own.</p> <p>Here is a sample folder structure for your public static assets:</p> <p><img alt="assetify-structure.png" title="Directory structure of static assets" class="" src="https://i.imgur.com/huLcbuF.png"></p> <p><code class="md-code md-code-inline">assetify</code> will take your directory structure and produce a <em>build result</em>, which you&#x2019;ll then use to serve your static assets. Let&#x2019;s walk through a basic setup.</p> <p>We start off by installing <code class="md-code md-code-inline">assetify</code></p> <pre class="md-code-block"><code class="md-code md-lang-bash">$ npm install assetify --save
</code></pre> <h3 id="asset-configuration">Asset Configuration</h3> <p>This is a simple configuration file:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">{
    assets: {
        source: __dirname + <span class="md-code-string">&apos;/public&apos;</span>,
        bin: __dirname + <span class="md-code-string">&apos;/public/.bin&apos;</span>,
        js: [
            <span class="md-code-string">&apos;/js/app.js&apos;</span>,
            <span class="md-code-string">&apos;/js/foo.js&apos;</span>
        ],
        css: [
            <span class="md-code-string">&apos;/css/reset.css&apos;</span>
            <span class="md-code-string">&apos;/css/layout.less&apos;</span>,
            <span class="md-code-string">&apos;/css/design.less&apos;</span>
        ]
    }
}
</code></pre> <p>Let me explain these properties.</p> <h4 id="assetssource"># assets.source</h4> <p>The <code class="md-code md-code-inline">source</code> directory is the base directory where your static assets are. Don&#x2019;t worry, assetify supports referencing assets outside of this directory, but it will be used as the base directory for relatively referenced assets.</p> <h4 id="assetsbin"># assets.bin</h4> <p>The <code class="md-code md-code-inline">bin</code> directory is used to place the results of processing your static assets.</p> <h4 id="assetsjs-array"># assets.js [Array]</h4> <p>First of all: <code class="md-code md-code-inline">assets.css</code> works in the same way as <code class="md-code md-code-inline">assets.js</code>, some plugins run exclusively in the appropriate set of assets, though, so it&#x2019;s important to place them in the correct array. More on plugins later.</p> <h3 id="what-kind-of-elements-can-be-in-these-arrays">What kind of elements can be in these arrays?</h3> <p>Strings. Strings are syntactic sugar for an object like this: <code class="md-code md-code-inline">{ file: &apos;/the/string&apos; }</code>. So what kind of properties can these objects have?</p> <pre class="md-code-block"><code class="md-code md-lang-json">{
    &quot;<span class="md-code-attribute">file</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;/js/app.js&quot;</span></span>,
    &quot;<span class="md-code-attribute">glob</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;/js/service/*.js&quot;</span></span>,
    &quot;<span class="md-code-attribute">inline</span>&quot;: <span class="md-code-value"><span class="md-code-literal">false</span></span>,
    &quot;<span class="md-code-attribute">src</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;alert(&apos;foo&apos;);&quot;</span></span>,
    &quot;<span class="md-code-attribute">ext</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;</span></span>,
    &quot;<span class="md-code-attribute">test</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;window.jQuery&quot;</span></span>,
    &quot;<span class="md-code-attribute">profile</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;owner&quot;</span>
</span>}
</code></pre> <p>We obviously shouldn&#x2019;t be setting all these properties at once, let&#x2019;s go over them.</p> <h4 id="assetfile"># Asset.file</h4> <p>The path to the asset, relative to <code class="md-code md-code-inline">assets.bin</code>. This path can contain <code class="md-code md-code-inline">..</code> jumps to parent directories. <code class="md-code md-code-inline">assetify</code> concedes that the order you output your assets in is important, and it will respect the order you define for your assets to be exposed.</p> <h4 id="assetglob"># Asset.glob</h4> <p>This property isn&#x2019;t actually in assetify, but it comes bundled with <a href="https://github.com/bevacqua/grunt-assetify" target="_blank" aria-label="grunt-assetify task"><strong>grunt-assetify</strong></a>, which is a <code class="md-code md-code-inline">grunt</code> task that simplifies the compilation step.</p> <p>As you might have guessed, if you&#x2019;re familiar with <code class="md-code md-code-inline">grunt</code>, the <code class="md-code md-code-inline">glob</code> property is special in that it allows us to set a <a href="https://github.com/isaacs/node-glob" target="_blank" aria-label="node-glob">globbing pattern</a>. When it&#x2019;s expanded, resulting objects will have <code class="md-code md-code-inline">file</code> set to each matching file, and all the other properties will be preserved.</p> <h4 id="assetinline"># Asset.inline</h4> <p>Typically, files will be written to disk, and script tags will reference those files. However, if <code class="md-code md-code-inline">inline === true</code>, the script will be inlined. Resulting in HTML such as:</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">script</span>&gt;</span><span>
alert(<span class="md-code-string">&quot;foo&quot;</span>);
</span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>
</code></pre> <p>Also, assets that are <em>dynamically generated</em> will be inlined. More on these later.</p> <h4 id="assetsrc"># Asset.src</h4> <p>Usually, you&#x2019;ll be using <code class="md-code md-code-inline">file</code> to set the source code of your assets. If you need to provide the asset source code directly, you can use this property instead.</p> <h4 id="assetext"># Asset.ext</h4> <p>Sometimes, we want to reference assets in a CDN. We can do this using <code class="md-code md-code-inline">ext</code>. Generally, its recommended that you provide a fallback in case the CDN asset fails to load, you can do that by providing a test using the test property, for example, if <code class="md-code md-code-inline">window.jQuery</code> isn&#x2019;t set after we try to load jQuery from Google&#x2019;s CDN, we fall back to the local copy of jQuery (which should be set with <code class="md-code md-code-inline">file</code>).</p> <h4 id="assetprofile"># Asset.profile</h4> <p>Last but not least, <code class="md-code md-code-inline">profile</code>. This property allows us to set up different asset groups. You can specify a String with a single profile, or an array with multiple profiles. e.g: <code class="md-code md-code-inline">[&apos;anon&apos;, &apos;registered&apos;]</code>.</p> <p>The purpose of this property is to save time for our users by not making them download assets they are not going to need.</p> <h3 id="build-step">Build Step</h3> <p>Now that you know how to configure your assets hash, here&#x2019;s how you compile your assets.</p> <p>This step can be simplified with the aid of <a href="https://github.com/bevacqua/grunt-assetify" target="_blank" aria-label="grunt-assetify task"><strong>grunt-assetify</strong></a>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> assetify = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;assetify&apos;</span>).instance();

assetify.compile(options, <span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">(err)</span></span>{
    <span class="md-code-built_in">console</span>.log(<span class="md-code-string">&apos;assetify compilation done&apos;</span>);
});
</code></pre> <p>Compilation will generate all the required files that we will need to serve our static assets later on. Additionally, the assetify compiler will output an <code class="md-code md-code-inline">assetify.json</code> file that will contain some metadata that will be used to let the middleware know how to behave.</p> <p>Remember how I mentioned assetify is <strong>middleware-based</strong>? Well, if you don&#x2019;t add anything else, your &#x201C;compilation&#x201D; isn&#x2019;t doing anything, it will just be a glorified copy. The thing is, once you&#x2019;ve set up the asset options, adding functionality is really easy. Let me teach you by example.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> assetify = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;assetify&apos;</span>).instance();

assetify.use(assetify.plugins.less);
assetify.use(assetify.plugins.minifyCSS);
assetify.use(assetify.plugins.minifyJS);
assetify.use(assetify.plugins.bundle);
assetify.compile(options, <span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">(err)</span></span>{
    <span class="md-code-built_in">console</span>.log(<span class="md-code-string">&apos;assetify compilation done&apos;</span>);
});
</code></pre> <p>Just like that, your assets will be bundled together, your LESS stylesheets will be properly pre-processed, and everything will be minified.</p> <p>Here is a list of all the <em>compilation plugins</em> that come bundled with assetify.</p> <h5 id="pluginsbundle"># plugins.bundle</h5> <p>Instead of resulting in one output file as a result for each input file, you&#x2019;ll be getting one file as a result for each profile. If no profiles were specified, then a default, <code class="md-code md-code-inline">&apos;all&apos;</code> profile, will be used.</p> <h5 id="pluginsless"># plugins.less</h5> <p>Your LESS CSS stylesheet files will be pre-processed</p> <h5 id="pluginssass"># plugins.sass</h5> <p>Your SASS CSS (and SCSS) stylesheet files will be pre-processed</p> <h5 id="pluginscoffee"># plugins.coffee</h5> <p>Your CoffeeScript JS files will be pre-processed</p> <h5 id="pluginsjsn"># plugins.jsn</h5> <p>Your <a href="https://github.com/bevacqua/jsn" target="_blank" aria-label="jsn">jsn</a> JS files will be pre-processed</p> <h5 id="pluginsminifycss"># plugins.minifyCSS</h5> <p>Your CSS will be minified.</p> <h5 id="pluginsminifyjs"># plugins.minifyJS</h5> <p>Your JS will be minified</p> <h5 id="pluginsforward-opts-concat"># plugins.forward(opts, concat)</h5> <p>By default, images in the <code class="md-code md-code-inline">source</code> directory won&#x2019;t be forwarded to the compilation folder. If you want to keep all your public-facing static assets in one place, then you can forward images to the output directory.</p> <p><code class="md-code md-code-inline">plugins.forward</code> is a function you need to call to get the plugin. The first parameter takes an object and it&#x2019;s optional. It defaults to:</p> <pre class="md-code-block"><code class="md-code md-lang-json">{
    &quot;<span class="md-code-attribute">extnames</span>&quot;: <span class="md-code-value">[<span class="md-code-string">&quot;.ico&quot;</span>, <span class="md-code-string">&quot;.png&quot;</span>, <span class="md-code-string">&quot;.gif&quot;</span>, <span class="md-code-string">&quot;.jpg&quot;</span>, <span class="md-code-string">&quot;.jpeg&quot;</span>]
</span>}
</code></pre> <p>If you want to add more forwarded extensions, you could set <code class="md-code md-code-inline">concat</code> to true. It doesn&#x2019;t have to be limited to image extensions, they can be anything.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> fwd = assetify.plugins.forward({ extnames: [<span class="md-code-string">&apos;.woff&apos;</span>, <span class="md-code-string">&apos;.otf&apos;</span>, <span class="md-code-string">&apos;.ttf&apos;</span>] }, <span class="md-code-literal">true</span>);
assetify.use(fwd);
</code></pre> <p>Now you can very simply use <code class="md-code md-code-inline">NODE_ENV</code> to figure out whether you want to minify and bundle or not. It gets better, using <a href="https://github.com/bevacqua/grunt-assetify" target="_blank" aria-label="grunt-assetify task"><strong>grunt-assetify</strong></a> will make the compile step even easier to configure, by letting you tell it whether you&#x2019;re in production or not, and using a sensible defaults-based approach.</p> <h3 id="plugin-precedence">Plugin Precedence</h3> <p>Plugins don&#x2019;t just run in whatever order you pick, they do so <em>within the event they are bound to</em>. Events will be executed in series, not asynchronously. Each plugin will also run in series. This is required due to the nature of the compiler, and the fact that a plugin, such as the bundling plugin, might alter the very list of assets that are being processed.</p> <p>This is kind of an implementation detail, but you should know this if you want to roll your own plugins.</p> <h4 id="afterreadfile"><code class="md-code md-code-inline">&apos;afterReadFile&apos;</code></h4> <p>After reading input files, this event will be raised. At this point, language pre-processor plugins will run. Such as LESS, CoffeeScript, and jsn pre-processors. If you are including a custom pre-processor, this is the best fit.</p> <h4 id="beforebundle"><code class="md-code md-code-inline">&apos;beforeBundle&apos;</code></h4> <p>The <code class="md-code md-code-inline">beforeBundle</code> event is emitted once all plugins from the previous step have completed. The bundle plugin runs in this step.</p> <h4 id="afterbundle"><code class="md-code md-code-inline">&apos;afterBundle&apos;</code></h4> <p>Directly after the bundling step, <code class="md-code md-code-inline">afterBundle</code> plugins will trigger. This step includes the packed plugins for minification, and the <code class="md-code md-code-inline">&apos;forward&apos;</code> plugin.</p> <h4 id="afteroutput"><code class="md-code md-code-inline">&apos;afterOutput&apos;</code></h4> <p>The <code class="md-code md-code-inline">&apos;afterOutput&apos;</code> step is here in case we want to run any plugins after the output has been generated and written to disk. None of the distributed plugins run in this step, but you might want to develop a plugin to perform some task in this step.</p> <h4 id="beforerender"><code class="md-code md-code-inline">&apos;beforeRender&apos;</code></h4> <p>This step is special in that it runs whenever asset HTML tags are going to be emitted, typically before an incoming request is going to render them. This step is used by an special plugin I&#x2019;ll describe in short.</p> <h2 id="connect-middleware">Connect Middleware</h2> <blockquote> <p>The second piece of the assetify puzzle is serving the assets, to facilitate this, we&#x2019;ve provided a middleware you can tack onto <code class="md-code md-code-inline">connect</code> (or <code class="md-code md-code-inline">express</code>), very easily.</p> </blockquote> <p>Here is an example of how to integrate with <code class="md-code md-code-inline">express</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> express = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;express&apos;</span>),
    app = express(),
    bin = __dirname + <span class="md-code-string">&apos;/public/.bin&apos;</span>,
    assetify = <span class="md-code-built_in">require</span>(<span class="md-code-string">&apos;assetify&apos;</span>).instance();

assetify(app, express, bin);

<span class="md-code-comment">// routing, etc</span>
</code></pre> <p>We&#x2019;re basically passing assetify three things: the <code class="md-code md-code-inline">app</code>, so that we can tack a middleware onto it; <code class="md-code md-code-inline">express</code>, so we know how to use a few more configuration options, and <code class="md-code md-code-inline">bin</code>, which is the same <code class="md-code md-code-inline">bin</code> as the one we used in the compilation step.</p> <p>Your middleware won&#x2019;t do much. It will, however, set up a local variable in your <code class="md-code md-code-inline">res</code> objects, called <code class="md-code md-code-inline">assetify</code>. This object will have a <strong>very small API</strong>.</p> <h4 id="assetifycssemit-profile"># assetify.css.emit(profile)</h4> <p>This will emit all the CSS style tags you need in your view, in the order you chose, and using the assets that have been previously compiled through <code class="md-code md-code-inline">assetify</code>. The <code class="md-code md-code-inline">profile</code> can be omitted.</p> <p>In a Jade view:</p> <pre class="md-code-block"><code class="md-code md-lang-css">html
  head
    !=assetify.css.emit()

  body
    p Awesome!
</code></pre> <h4 id="assetifycssadd-code-before"># assetify.css.add(code, before)</h4> <p>Dynamically adding assets to particular requests is supported. The code will be inlined in the appropriate asset tag in the response. If <code class="md-code md-code-inline">before</code> is true, then the asset will be added before any statically compiled assets, rather than last.</p> <p>This API is repeated for JavaScript assets, in <code class="md-code md-code-inline">assetify.js</code>.</p> <p>The crucial take-away here is that we can compile and serve in two completely separate steps, and it would still work. This enables us to compile using <a href="https://github.com/bevacqua/grunt-assetify" target="_blank" aria-label="grunt-assetify task"><strong>grunt-assetify</strong></a> in a <code class="md-code md-code-inline">grunt</code> task, and then run our app just doing <code class="md-code md-code-inline">node app</code>.</p> <p>Why are we passing <code class="md-code md-code-inline">express</code> to create this middleware? Well, there are actually a few more options we can use with <code class="md-code md-code-inline">assetify</code>. These should also be passed to the options we&#x2019;ve described at the beginning.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">{
    compress: <span class="md-code-literal">true</span>,
    fingerprint: <span class="md-code-literal">true</span>,
    expires: <span class="md-code-regexp">/^\/img\//i</span>,
    assets: {
        favicon: <span class="md-code-string">&apos;/icon.ico&apos;</span>,
        host: <span class="md-code-string">&apos;http://localhost:3000&apos;</span>
    }
}
</code></pre> <p>Let&#x2019;s go over each of these, too!</p> <h5 id="optscompress"># opts.compress</h5> <p>Whether to use the <code class="md-code md-code-inline">connect.compress()</code> middleware.</p> <h5 id="optsfingerprint"># opts.fingerprint</h5> <p>If this is enabled, then we&#x2019;re going to use <a href="https://github.com/bminer/node-static-asset" target="_blank">static-asset</a> to produce fingerprints for our assets, sending them far into the future with expires headers. These fingerprints will only be set for assets you declare explicitly, and not for forwarded assets, since image references aren&#x2019;t in control of assetify.</p> <h5 id="optsexpires"># opts.expires</h5> <p>If this is set, then the regular expression provided will be used to give an <code class="md-code md-code-inline">Expires</code> header to any matching request. The <code class="md-code md-code-inline">favicon</code> will also receive this treatment.</p> <h5 id="optsassetsfavicon"># opts.assets.favicon</h5> <p>A favicon to use with <code class="md-code md-code-inline">connect.favicon(file)</code>.</p> <h5 id="optsassetshost"># opts.assets.host</h5> <p>Sometimes, it&#x2019;s convenient to have asset reference the absolute URL rather than a relative URL, in these cases, we can provide a host name using this property.</p> <p>That&#x2019;s about it when it comes to using <code class="md-code md-code-inline">assetify</code>.</p> <h1 id="extending-assetify">Extending <code class="md-code md-code-inline">assetify</code></h1> <p>You can include your own plugins using the following API:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">assetify.use(key, eventName, plugin);
</code></pre> <h4 id="usekey"># use.key</h4> <p>The <code class="md-code md-code-inline">key</code> can be either omitted, or filter our plugin to only run for the <code class="md-code md-code-inline">&apos;js&apos;</code> or <code class="md-code md-code-inline">&apos;css&apos;</code> pipe.</p> <h4 id="useeventname"># use.eventName</h4> <p>The <code class="md-code md-code-inline">eventName</code> is one of the event steps mentioned in the <strong>Plugin Precedence</strong> section.</p> <h4 id="useplugin-assets-config-context-done"># use.plugin(assets, config, context, done)</h4> <p>Your plugin. It will receive four parameters. The <code class="md-code md-code-inline">assets</code> will contain the list of assets that are currently being processed. You can manipulate them in any way. Keep in mind that if you modify the array, the next plugin will get your changes too.</p> <p>The <code class="md-code md-code-inline">config</code> object is the options hash that was passed to assetify when invoking the <code class="md-code md-code-inline">compile</code> function. The <code class="md-code md-code-inline">context</code> variable you&#x2019;ll receive will contain the <code class="md-code md-code-inline">key</code>, and if you are attaching to the <code class="md-code md-code-inline">beforeRender</code> event, you&#x2019;ll receive the <code class="md-code md-code-inline">http</code> context property as well.</p> <p>Once you are done doing your job, you should invoke the <code class="md-code md-code-inline">done</code> callback, so processing can continue. If you pass an argument, it will be treated as an error.</p> <h2 id="that-s-all-folks">That&#x2019;s all folks</h2> <p>There&#x2019;s pretty much all you&#x2019;ll ever need to know about <code class="md-code md-code-inline">assetify</code>. Let me know if you have any questions, issues, feature requests, concerns or suggestions!</p></div>
