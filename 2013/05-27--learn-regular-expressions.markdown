<h1>Learn Regular Expressions</h1>

<blockquote><p><strong>Regular Expressions</strong> are a fundamental tool <strong><em>every</em></strong> programmer should understand, at the very least on a basic level. I might not make an expert in regex out of you, but at &#x2026;</p></blockquote>

<div><kbd>regex</kbd> <kbd>learning</kbd></div>

<div><p><strong>Regular Expressions</strong> are a fundamental tool <strong><em>every</em></strong> programmer should understand, at the very least on a basic level. I might not make an expert in regex out of you, but at least, you should be able to comprehend what they do, and create simple ones yourself.</p></div>

<div></div>

<div><p><a href="http://i.imgur.com/UTlGckN.png" target="_blank">TL;WR cheatsheet</a></p> <p>I&#x2019;ll try my best not to drown you in a sea of technical stuff, but regular expressions <strong>are</strong> a complicated matter, and learning them is no easy feat.</p> <p><a href="https://xkcd.com/208/" target="_blank"><img src="https://i.imgur.com/fp19SqK.jpg" alt="stand-back-regex.jpg"></a></p></div>

<div><h2 id="when-not-to-use-a-regex">When not to use a regex</h2> <p>Regex is a <em>scaringly powerful</em> tool, when applied properly. That doesn&#x2019;t mean you should apply it to everything that is composed of strings. Parsing HTML with regex is <a href="http://stackoverflow.com/a/1732454/389745" target="_blank" aria-label="Legendary regex parsing answer on SO">just wrong</a>, and a considerable waste of time.</p> <blockquote> <p>Regex is a trap. They&#x2019;re <em>hard to read</em>, and interpreting their intent can be a nightmare. They&#x2019;re <strong>hard to debug</strong>, and the developer next to you probably has <em>no idea</em> what it&#x2019;s doing.</p> </blockquote> <blockquote> <p>They are convenient, though, when parsing text <em>looking for certain patterns</em>.</p> </blockquote> <h2 id="the-basics">The Basics</h2> <p>A regular expression denotes a <strong>pattern</strong> you want to <em>match</em> in a particular string. Lets look at an example:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> test = <span class="md-code-regexp">/my ca[rt] ate? (the|[2-4]) [sp]lums?/</span>;

<span class="md-code-comment">// the above regex matches all strings below</span>
<span class="md-code-keyword">var</span> strings = [
    <span class="md-code-string">&apos;my cat ate the plum&apos;</span>,
    <span class="md-code-string">&apos;my cat ate 3 plums&apos;</span>,
    <span class="md-code-string">&apos;my car at the slums&apos;</span>
];
</code></pre> <p>Think of regex as <em>regular strings</em>. If a character isn&#x2019;t a <em>special marker</em>, it will match that <em>character</em>. Therefore, the <code class="md-code md-code-inline">/my ca/</code> regex, will match the <code class="md-code md-code-inline">&apos;my ca&apos;</code> sub-string.</p> <p>The special <code class="md-code md-code-inline">/</code> character marks the beginning and the end of a regular expression in JavaScript. You can create regex using a constructor <code class="md-code md-code-inline">new RegExp(&apos;my ca&apos;)</code>, but I recommend the <code class="md-code md-code-inline">/form/</code> form.</p> <p>Next up we have <code class="md-code md-code-inline">[</code>. Everything contained in the brackets has a special meaning. <code class="md-code md-code-inline">[rt]</code> means we&#x2019;ll match either an <code class="md-code md-code-inline">&apos;r&apos;</code>, or a <code class="md-code md-code-inline">&apos;t&apos;</code>. For example, <code class="md-code md-code-inline">/ba[rz]/</code> matches both <code class="md-code md-code-inline">&apos;bar&apos;</code> and <code class="md-code md-code-inline">&apos;baz&apos;</code>.</p> <p>The second special expression we have is <code class="md-code md-code-inline">?</code>. This is a <strong>quantifier</strong>. Quantifiers determine how the previous expression is matched. <code class="md-code md-code-inline">?</code> means the previous expression is <em>optional</em>. <code class="md-code md-code-inline">/ate?/</code> will match both <code class="md-code md-code-inline">&apos;ate&apos;</code> and <code class="md-code md-code-inline">&apos;at&apos;</code>.</p> <p>Usually, we want to do this in longer expressions than just a single character. In this case, we will use groups. These are expressions enclosed in parenthesis. <code class="md-code md-code-inline">/foo (bar )?baz/</code>, for instance, will match both <code class="md-code md-code-inline">&apos;foo baz&apos;</code>, and <code class="md-code md-code-inline">&apos;foo bar baz&apos;</code>.</p> <p>That brings us to the next portion of our regex, <code class="md-code md-code-inline">(the|[2-4])</code>. Here we used a group, but we have several other special characters. The <code class="md-code md-code-inline">[2-4]</code> expression is a range, and it means either 2, 3, or 4. Anything in the <em>inclusive</em> 2-4 range.</p> <p>The other special character in this portion, is <code class="md-code md-code-inline">|</code>, is effectively a logical <code class="md-code md-code-inline">OR</code>, and it means we should match one or both of the sides of this expression. In the end, this expression will be able to match any of the following: <code class="md-code md-code-inline">&apos;the&apos;</code>, <code class="md-code md-code-inline">&apos;2&apos;</code>, <code class="md-code md-code-inline">&apos;3&apos;</code>, and <code class="md-code md-code-inline">&apos;4&apos;</code>.</p> <h2 id="modifiers">Modifiers</h2> <p>Are you keeping up? Good! I&#x2019;m glad I&#x2019;m not as cryptic as I thought I would be. We&#x2019;ll look at a few more regex examples, but before, lets talk about <a href="http://www.regular-expressions.info/modifiers.html" target="_blank" aria-label="Regular expression modifiers">modifiers</a>.</p> <p>In JavaScript, modifiers can be provided with the <code class="md-code md-code-inline">/regex/modifiers</code> form, such as <code class="md-code md-code-inline">/foo/i</code>, or using the constructor form, <code class="md-code md-code-inline">new RegExp(&apos;foo&apos;, &apos;i&apos;)</code>.</p> <p>These are some of the most common modifiers you can use.</p> <ul> <li><code class="md-code md-code-inline">i</code>: Case insensitivity. Allows <code class="md-code md-code-inline">/foo/i</code> to match <code class="md-code md-code-inline">&apos;foo&apos;</code>, <code class="md-code md-code-inline">&apos;FOO&apos;</code>, etc.</li> <li><code class="md-code md-code-inline">g</code>: Global. Matching doesn&#x2019;t stop after the first coincidence.</li> </ul> <h2 id="anchors">Anchors</h2> <p><code class="md-code md-code-inline">^</code> represents the start of a string. Similarly, <code class="md-code md-code-inline">$</code> represents the end.</p> <p>For example, in the string <code class="md-code md-code-inline">&apos;who let the dogs out? never let them out!&apos;</code>, the regex <code class="md-code md-code-inline">/out[!?]$/</code> will match <code class="md-code md-code-inline">&apos;out!&apos;</code> in the end of the string, but it won&#x2019;t match <code class="md-code md-code-inline">&apos;out?&apos;</code>.</p> <p>A commonly used modifier I purposely left out in the previous section is <code class="md-code md-code-inline">m</code>. The multi-line modifier. Using this modifier, anchors will work on a <em>line-by-line basis</em>, rather than on the whole string.</p> <h2 id="quantifiers">Quantifiers</h2> <p>Quantifiers let you repeat patterns while staying <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" aria-label="Don&apos;t Repeat Yourself principle">DRY</a>.</p> <ul> <li><code class="md-code md-code-inline">?</code>. The one we&#x2019;ve covered, optionally matches the preceding expression.</li> <li><code class="md-code md-code-inline">+</code>. The preceding expression must occur at least once.</li> <li><code class="md-code md-code-inline">*</code>. The preceding expression can occur zero, one, or more times.</li> <li><code class="md-code md-code-inline">{n}</code>. The preceding expression has to occur <code class="md-code md-code-inline">n</code> times.</li> <li><code class="md-code md-code-inline">{n,}</code>. The preceding expression has to occur at least <code class="md-code md-code-inline">n</code> times.</li> <li><code class="md-code md-code-inline">{n,m}</code>. The preceding expression has to occur <code class="md-code md-code-inline">n</code> to <code class="md-code md-code-inline">m</code> times.</li> </ul> <h2 id="built-in-patterns">Built-in patterns</h2> <p>Some, very simple, patterns that are built into regular expressions. Here are the most useful ones.</p> <ul> <li><code class="md-code md-code-inline">.</code> means any character, <em>except the new-line</em></li> <li><code class="md-code md-code-inline">\</code> will escape any character. If you need to match an actual dot, you can use <code class="md-code md-code-inline">/\./</code></li> <li><code class="md-code md-code-inline">\s</code> matches whitespace. <code class="md-code md-code-inline">\S</code> is any non-whitespace</li> <li><code class="md-code md-code-inline">\d</code> matches digits, effectively the same as <code class="md-code md-code-inline">[0-9]</code>. <code class="md-code md-code-inline">\D</code> negates it</li> <li><code class="md-code md-code-inline">\w</code> matches words, the same as <code class="md-code md-code-inline">[A-z0-9]</code>. <code class="md-code md-code-inline">\W</code> is the opposite</li> </ul> <h2 id="groups">Groups</h2> <p>Groups are useful for <em>replacing patterns</em>, I&#x2019;ll cover that in a minute.</p> <p>There are two kinds of groups. <strong>Capturing, and non-capturing</strong>. Capturing groups are the groups we&#x2019;ve been talking about so far. Enclosed in parenthesis, such as <code class="md-code md-code-inline">/S(\d{2})E(\d{2})/</code>, which will match strings such as <code class="md-code md-code-inline">&apos;S11E18&apos;</code>. It will <strong>capture</strong> the values <code class="md-code md-code-inline">11</code> and <code class="md-code md-code-inline">18</code>.</p> <p>Capturing is important to perform <em>replacements</em>, one of the fundamental uses of regex. But sometimes, we want groups for other reasons, for example, when we wrote <code class="md-code md-code-inline">(the|[2-4])</code>, we did so to keep the <code class="md-code md-code-inline">OR</code> contained in just that portion of the regex.</p> <p>In these cases, we&#x2019;ll want to use the <em>non-capturing</em> group syntax. This means adding <code class="md-code md-code-inline">?:</code> to our pattern, like this: <code class="md-code md-code-inline">(?:the|[2-4])</code>.</p> <h2 id="replacements">Replacements</h2> <p>To replace a string using a regex in JS, we can use <code class="md-code md-code-inline">String.prototype.replace</code>, <a href="https://developer.mozilla.org/en/docs/JavaScript/Reference/Global_Objects/String/replace" target="_blank" aria-label="replace - MDN">passing a regex</a> in the first parameter. Lets do an example.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-comment">// a pretty non-sensical example</span>
<span class="md-code-string">&apos;the cow is a cow, but the cat is not a cow.&apos;</span>.replace(<span class="md-code-regexp">/cow/</span>, <span class="md-code-string">&apos;dog&apos;</span>);

<span class="md-code-comment">// the result is</span>
<span class="md-code-string">&apos;the dog is a cow, but the cat is not a cow.&apos;</span>

<span class="md-code-comment">// not quite what we wanted, we forgot to add the g modifier.</span>
<span class="md-code-string">&apos;the cow is a cow, but the cat is not a cow.&apos;</span>.replace(<span class="md-code-regexp">/cow/g</span>, <span class="md-code-string">&apos;dog&apos;</span>);

<span class="md-code-comment">// the result now is</span>
<span class="md-code-string">&apos;the dog is a dog, but the cat is not a dog.&apos;</span>
</code></pre> <p>You could also use <code class="md-code md-code-inline">$1</code>, <code class="md-code md-code-inline">$2</code>, and so on, in the replacement string. These will get replaced with the group captured when matching your regex. Another example!</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-comment">// more non-sense please</span>
<span class="md-code-keyword">var</span> rimportant = <span class="md-code-regexp">/(\d+|boss)/g</span>,
    remphasize = <span class="md-code-string">&apos;&lt;em&gt;$1&lt;/em&gt;&apos;</span>;

<span class="md-code-string">&apos;build 102 errored... tell the boss it failed!&apos;</span>.replace(rimportant, remphasize);

<span class="md-code-comment">// results in</span>
<span class="md-code-string">&apos;build &lt;em&gt;102&lt;/em&gt; errored... tell the &lt;em&gt;boss&lt;/em&gt; it failed!&apos;</span>
</code></pre> <p>Alternatively, you could provide a function callback as a replacement parameter, and it will be invoked once for each match. You can find more info on that on <a href="https://developer.mozilla.org/en/docs/JavaScript/Reference/Global_Objects/String/replace" target="_blank" aria-label="replace - MDN">MDN</a>.</p> <p>You could also use <code class="md-code md-code-inline">RegExp.prototype.test</code> to <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/test" target="_blank" aria-label="test - MDN">test</a> whether a pattern matches the provided string.</p> <h3 id="conclusion">Conclusion</h3> <p>In this post we&#x2019;ve looked at some of the most common patterns of regex. Most importantly, we&#x2019;ve looked at the way in which we can build simple regular expressions. I intentionally left out a complicated subset of regular expressions, in <a href="http://www.regular-expressions.info/lookaround.html" target="_blank" aria-label="Lookaround assertions">assertions</a>, I will definitely cover that topic at some point in the future.</p> <p>I test out my regular expressions using this online <a href="http://regextester.com/" target="_blank" aria-label="REGex Tester Tool">REGex Tester</a> tool, or directly in my browser if they are simple enough.</p> <p><a href="http://i.imgur.com/UTlGckN.png" target="_blank" aria-label="Regular Expressions Cheat Sheet">TL;DR cheatsheet</a></p></div>
