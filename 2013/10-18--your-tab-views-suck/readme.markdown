<div></div>

<h1>Your Tab Views Suck</h1>

<p><kbd>front-end</kbd> <kbd>css</kbd> <kbd>jquery</kbd> <kbd>no-js</kbd> <kbd>tutorial</kbd></p>

<blockquote><p>What if I told you&#x2026; we can write a <strong>tabbed UI view</strong> without <em>using JavaScript</em>, which works in every modern browser, and even clocks around 20 <em>total</em> lines of code?</p><p>In &#x2026;</p></blockquote>

<div><p>What if I told you&#x2026; we can write a <strong>tabbed UI view</strong> without <em>using JavaScript</em>, which works in every modern browser, and even clocks around 20 <em>total</em> lines of code?</p></div>

<div></div>

<div><p>In this article we&#x2019;ll discuss the <strong>pitfalls of resorting to jQuery UI</strong> and its ilk, and then compare it with an approach that <em>doesn&#x2019;t even involve any JavaScript</em>, but merely some lateral thinking and a couple of CSS tricks.</p></div>

<div><h2 id="why-would-i-even-want-that-i-have-jquery-ui-for-that">Why would I even want that? I have jQuery UI for that!</h2> <p><img alt="jquery-ui.png" title="jQuery UI: Everything you&apos;ve never wanted" class="" src="https://i.imgur.com/VsEVdRk.jpg"></p> <p>Sure you do, and that&#x2019;s why you want these. You <strong>don&#x2019;t need</strong> jQuery. Consider an example taken straight from the <a href="http://jqueryui.com/tabs/" target="_blank" aria-label="jQuery UI Tabs Documentation">jQuery UI Tabs</a> page. First, let&#x2019;s glance at the HTML.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">id</span>=<span class="md-code-value">&quot;tabs&quot;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">ul</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">li</span>&gt;</span><span class="md-code-tag">&lt;<span class="md-code-title">a</span> <span class="md-code-attribute">href</span>=<span class="md-code-value">&quot;#tabs-1&quot;</span>&gt;</span>Nunc tincidunt<span class="md-code-tag">&lt;/<span class="md-code-title">a</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">li</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">li</span>&gt;</span><span class="md-code-tag">&lt;<span class="md-code-title">a</span> <span class="md-code-attribute">href</span>=<span class="md-code-value">&quot;#tabs-2&quot;</span>&gt;</span>Proin dolor<span class="md-code-tag">&lt;/<span class="md-code-title">a</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">li</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">li</span>&gt;</span><span class="md-code-tag">&lt;<span class="md-code-title">a</span> <span class="md-code-attribute">href</span>=<span class="md-code-value">&quot;#tabs-3&quot;</span>&gt;</span>Aenean lacinia<span class="md-code-tag">&lt;/<span class="md-code-title">a</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">li</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">ul</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">id</span>=<span class="md-code-value">&quot;tabs-1&quot;</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">p</span>&gt;</span>some lipsum<span class="md-code-tag">&lt;/<span class="md-code-title">p</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">id</span>=<span class="md-code-value">&quot;tabs-2&quot;</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">p</span>&gt;</span>some lipsum<span class="md-code-tag">&lt;/<span class="md-code-title">p</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">id</span>=<span class="md-code-value">&quot;tabs-3&quot;</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">p</span>&gt;</span>some lipsum<span class="md-code-tag">&lt;/<span class="md-code-title">p</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
</code></pre> <p>That is exactly what we want, non-repetitive HTML that just marks up the tabs and their content. This is as good as it gets, though, because then there&#x2019;s the JavaScript.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">script</span>&gt;</span><span>
  $(<span class="md-code-function"><span class="md-code-keyword">function</span><span class="md-code-params">()</span> </span>{
    $( <span class="md-code-string">&quot;#tabs&quot;</span> ).tabs();
  });
</span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>
</code></pre> <p>Okay, okay, we&#x2019;re fine with this as well, sort of. It&#x2019;s <em>just a selector</em>, and a function. You should be wondering why the heck we&#x2019;d need to wait <a href="https://developer.mozilla.org/en-US/docs/Web/Reference/Events/DOMContentLoaded" target="_blank" aria-label="DOMContentLoaded event explained on MDN">until DOM ready</a> to cash in some tabs, though. Your <em>real problem</em> should be with having to pile up 7 extra HTTP requests just so you can get a few tabs there, and <em>then</em> wait until those finish so that you can have some tabs show up.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">link</span> <span class="md-code-attribute">rel</span>=<span class="md-code-value">&quot;stylesheet&quot;</span> <span class="md-code-attribute">href</span>=<span class="md-code-value">&quot;http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css&quot;</span> /&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">script</span> <span class="md-code-attribute">src</span>=<span class="md-code-value">&quot;http://code.jquery.com/jquery-1.9.1.js&quot;</span>&gt;</span><span></span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">script</span> <span class="md-code-attribute">src</span>=<span class="md-code-value">&quot;http://code.jquery.com/ui/1.10.3/jquery-ui.js&quot;</span>&gt;</span><span></span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>
</code></pre> <p>Ever wonder what goes on in the <a href="https://developers.google.com/chrome-developer-tools/" target="_blank" aria-label="Chrome Developer Tools">Chrome DevTools</a> <em>network tab</em>? <strong>Mayhem</strong>, pure mayhem.</p> <p><img alt="network.png" title="Those are some very necessary requests!" class="" src="https://i.imgur.com/Wh0wOPT.png"></p> <p>So it&#x2019;s not even just those 3 resources, which by the way amount to well <strong>over 200k</strong>, <em>compressed</em>. Apparently we&#x2019;re fetching four small images as well, just because we can. This time, compressed to&#x2026; <strong>oops!</strong> <em>two times their original size</em>.</p> <p>Never mind the <em>well known rule</em> to <a href="http://developer.yahoo.com/performance/rules.html#js_bottom" target="_blank" aria-label="Yahoo Performance Rules, put #js on the bottom">always push scripts to the bottom</a>, which you can&#x2019;t follow now, because otherwise your precious tabs would <a href="http://www.paulirish.com/2009/avoiding-the-fouc-v3/" target="_blank" aria-label="Avoiding the FOUC by Paul Irish">FOUC (Flash of Unstyled Content)</a> all over your human, which we&#x2019;d never want to happen. jQuery recognizes that last one, so they silently put all of their example code in the <code class="md-code md-code-inline">&lt;head&gt;</code>, and now it&#x2019;s <em>your problem</em>.</p> <blockquote> <p><strong>7</strong> HTTP requests, <strong>200k</strong> in our pocket, and a <strong>DOMContentLoaded</strong> event later&#x2026;</p> </blockquote> <p>At long last! We&#x2019;re now able to render these <em>awesome looking</em> UI tabs! Yes!! Except <a href="http://jqueryui.com/resources/demos/tabs/default.html" target="_blank" aria-label="jQuery Tabs UI Example">they look <em>really</em> hideous</a>, and with a bunch of classes, like <code class="md-code md-code-inline">ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all</code>, they are <em>virtually impossible to style</em>.</p> <p><img alt="jquery-tabs.png" title="All that for a measly 200k?" class="" src="https://i.imgur.com/FqwdjEM.png"></p> <p>Luckily, we don&#x2019;t need <strong>jQuery</strong> <em>for any of this</em>. In fact, I&#x2019;d argue that <strong>jQuery UI</strong> is utterly useless, if it weren&#x2019;t for drag and drop, and particularly the <a href="http://jqueryui.com/sortable/" target="_blank" aria-label="jQuery UI Sortable">sortable</a> functionality. That being said, that&#x2019;s a piece of <strong>jQuery UI</strong> people <em>rarely need</em>. You most certainly don&#x2019;t need that kind of thing to create a tabbed view. So you have a combination of rarely used components mixed and matched with completely useless ones. True, you <em>can</em> download a customized package that trims away the fat components you don&#x2019;t need, but did you even bother? That won&#x2019;t fix the <em>through-the-roof HTTP request count</em> issue, anyways. Let&#x2019;s forget about <strong>jQuery</strong> for a while, <em>try to think</em>, and resolve this without using it.</p> <h2 id="of-course-there-s-a-better-way">Of course, there&#x2019;s a better way</h2> <p>Okay, so no jQuery. We&#x2019;ve got a clean slate. Good! How do we get tabs? <em>Hmmm&#x2026;</em> Let&#x2019;s start with what we know, like all ambitious projects do. The HTML was <em>mostly fine</em>, we just ditched the JavaScript. What is the single best way to toggle state without using JavaScript at all? The answer lies in <code class="md-code md-code-inline">&lt;input&gt;</code> types <code class="md-code md-code-inline">radio</code> and <code class="md-code md-code-inline">checkbox</code>. The latter isn&#x2019;t all that useful to us, we need to be able to toggle between tabs, not turn them on and off. Only one should be enabled at any given point, this is <em>a perfect scenario</em> to use radio buttons!</p> <p>Radio buttons have <strong>state</strong>, and only one can be checked at any time. Let&#x2019;s imagine <em>a world without tabs</em>. Something like the code below would be enough for us, then.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">input</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;radio&apos;</span> <span class="md-code-attribute">name</span>=<span class="md-code-value">&apos;tab-group&apos;</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-radio&apos;</span> <span class="md-code-attribute">checked</span> /&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">input</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;radio&apos;</span> <span class="md-code-attribute">name</span>=<span class="md-code-value">&apos;tab-group&apos;</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-radio&apos;</span> /&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">input</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;radio&apos;</span> <span class="md-code-attribute">name</span>=<span class="md-code-value">&apos;tab-group&apos;</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-radio&apos;</span> /&gt;</span>
</code></pre> <p>That&#x2019;s great for <strong>state</strong>, but we&#x2019;d like some content for each tab to show up with that. Well, consider adding a <code class="md-code md-code-inline">&lt;div&gt;</code> after each of those inputs.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">input</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;radio&apos;</span> <span class="md-code-attribute">name</span>=<span class="md-code-value">&apos;tab-group&apos;</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-radio&apos;</span> <span class="md-code-attribute">checked</span> /&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-content&apos;</span>&gt;</span>Tab 1<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">input</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;radio&apos;</span> <span class="md-code-attribute">name</span>=<span class="md-code-value">&apos;tab-group&apos;</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-radio&apos;</span> /&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-content&apos;</span>&gt;</span>Tab 2<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">input</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;radio&apos;</span> <span class="md-code-attribute">name</span>=<span class="md-code-value">&apos;tab-group&apos;</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-radio&apos;</span> /&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-content&apos;</span>&gt;</span>Tab 3<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
</code></pre> <p>Using a combination of the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:checked" target="_blank" aria-label="CSS :checked pseudo-selector on MDN"><code class="md-code md-code-inline">:checked</code></a> pseudo-selector and the <a href="http://css-tricks.com/child-and-sibling-selectors/" target="_blank" aria-label="Child and Sibling Selectors explained on CSS-tricks"><code class="md-code md-code-inline">+</code> <em>next sibling</em></a> selector, we&#x2019;d quickly be able to show one of those <code class="md-code md-code-inline">&lt;div&gt;</code>s, depending on <em>which radio button</em> is on! <em>Amusing stuff</em>.</p> <pre class="md-code-block"><code class="md-code md-lang-css"><span class="md-code-class">.tv-content</span> <span class="md-code-rules">{
  <span><span class="md-code-attribute">display</span>:<span class="md-code-value"> none</span></span>; <span class="md-code-comment">/* hide tabs next to unselected radios */</span>
<span>}</span></span>

<span class="md-code-class">.tv-radio</span><span class="md-code-pseudo">:checked</span> + <span class="md-code-class">.tv-content</span> <span class="md-code-rules">{
  <span><span class="md-code-attribute">display</span>:<span class="md-code-value"> block</span></span>;
<span>}</span></span>
</code></pre> <p>This is fine and minimalistic, but we can agree <a href="http://codepen.io/bevacqua/full/jIkvf" target="_blank" aria-label="Example on CodePen">it looks even worse</a> than the jQuery UI version. It&#x2019;s not even close to usable, and styling radios is not doable.</p> <p><img alt="radios.png" title="Not quite what we envisioned..." class="" src="https://i.imgur.com/CGOzi1t.png"></p> <h2 id="half-way-there-now">Half-way there now&#x2026;</h2> <p>The radios are ugly, and they don&#x2019;t belong, thus, we need to hide them. However, that presents the fundamental inconvenience that we can&#x2019;t click on them now. <em>Or can we?</em> Time to pull another trick from the bag, this time we&#x2019;ll turn to <code class="md-code md-code-inline">&lt;label&gt;</code> elements. Labels allow us to use the <code class="md-code md-code-inline">for</code> attribute, making it so that when we click on them, the related input gets the click, too. This reference requires an <code class="md-code md-code-inline">id</code> attribute on the inputs, but that&#x2019;s no big deal.</p> <p>The HTML ends up looking like below.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">label</span> <span class="md-code-attribute">for</span>=<span class="md-code-value">&apos;tab-1&apos;</span>&gt;</span>Tab 1<span class="md-code-tag">&lt;/<span class="md-code-title">label</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">label</span> <span class="md-code-attribute">for</span>=<span class="md-code-value">&apos;tab-2&apos;</span>&gt;</span>Tab 2<span class="md-code-tag">&lt;/<span class="md-code-title">label</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">label</span> <span class="md-code-attribute">for</span>=<span class="md-code-value">&apos;tab-3&apos;</span>&gt;</span>Tab 3<span class="md-code-tag">&lt;/<span class="md-code-title">label</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">input</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;radio&apos;</span> <span class="md-code-attribute">name</span>=<span class="md-code-value">&apos;tab-group&apos;</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-radio&apos;</span> <span class="md-code-attribute">id</span>=<span class="md-code-value">&apos;tab-1&apos;</span> <span class="md-code-attribute">checked</span> /&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-content&apos;</span>&gt;</span>Contents 1<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">input</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;radio&apos;</span> <span class="md-code-attribute">name</span>=<span class="md-code-value">&apos;tab-group&apos;</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-radio&apos;</span> <span class="md-code-attribute">id</span>=<span class="md-code-value">&apos;tab-2&apos;</span> /&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-content&apos;</span>&gt;</span>Contents 2<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">input</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;radio&apos;</span> <span class="md-code-attribute">name</span>=<span class="md-code-value">&apos;tab-group&apos;</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-radio&apos;</span> <span class="md-code-attribute">id</span>=<span class="md-code-value">&apos;tab-3&apos;</span> /&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">class</span>=<span class="md-code-value">&apos;tv-content&apos;</span>&gt;</span>Contents 3<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
</code></pre> <p>The only tweak to the CSS is hiding the radio buttons.</p> <pre class="md-code-block"><code class="md-code md-lang-css"><span class="md-code-class">.tv-radio</span> <span class="md-code-rules">{
  <span><span class="md-code-attribute">display</span>:<span class="md-code-value"> none</span></span>;
<span>}</span></span>
</code></pre> <p>Still <em>not really cute</em>, but easy to style, and <a href="http://codepen.io/bevacqua/pen/BIjvH" target="_blank" aria-label="This time with labels! Batteries not included. On CodePen">barely uses any code</a>.</p> <p><img alt="labels.png" title="No more circles!" class="" src="https://i.imgur.com/AeqV7mH.png"></p> <p>Below is a screenshot of how they ended up looking <em>after a tad of styling</em>.</p> <p><img alt="tabs.png" title="Flat, clean, and gorgeous!" class="" src="https://i.imgur.com/rUBqxhh.png"></p> <p>The source code is up on <a href="https://github.com/bevacqua/untab" target="_blank" aria-label="Tabbed UI View on GitHub">GitHub</a> and <a href="http://codepen.io/bevacqua/full/qxnDw" target="_blank" aria-label="Tabbed UI View on Code Pen">CodePen</a>.</p> <h2 id="wrapping-up-wrapping"><code class="md-code md-code-inline">&lt;wrapping&gt;up&lt;/wrapping&gt;</code></h2> <p>We&#x2019;ve spent a good chunk of this article looking at the problems with assuming libraries <em>just know better</em>, and how we might be <em>perfectly able to home-bake a cake and eat it, too</em>.</p> <p>The <strong>jQuery</strong> library excels at reducing conflicts across the board (even though you <a href="https://ponyfoo.com/2013/07/09/getting-over-jquery" aria-label="Getting Over jQuery">don&#x2019;t really need it</a> as badly as you might think), but their <em>UI framework</em> does little about that, and a lot about drastically increasing your application&#x2019;s <em>network bandwidth usage</em>.</p> <p>What other solutions did you learn about where you didn&#x2019;t really need <em>any JavaScript</em> at all? I&#x2019;d love to hear!</p></div>
