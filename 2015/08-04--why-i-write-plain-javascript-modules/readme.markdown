<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/master/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/why-i-write-plain-javascript-modules">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/why-i-write-plain-javascript-modules"><div><img src="https://i.imgur.com/cGYqoxv.jpg" alt="Why I Write Plain JavaScript Modules"></div></a>

<h1>Why I Write Plain JavaScript Modules</h1>

<p><kbd>food-for-thought</kbd> <kbd>modularity</kbd> <kbd>dragula</kbd> <kbd>design</kbd></p>

<blockquote><p>These are short-form <mark class="md-mark">&#x201C;thoughts&#x201D;</mark>, in addition to the usual longer-form articles in the blog. The <a href="https://ponyfoo.com/articles/food-for-thought-begins">goal</a> is to publish <a href="https://ponyfoo.com/articles/tagged/food-for-thought">one of these</a> every weekday. I&#x2019;d &#x2026;</p></blockquote>

<div><p>These are short-form <mark class="md-mark">&#x201C;thoughts&#x201D;</mark>, in addition to the usual longer-form articles in the blog. The <a href="https://ponyfoo.com/articles/food-for-thought-begins">goal</a> is to publish <a href="https://ponyfoo.com/articles/tagged/food-for-thought">one of these</a> every weekday. I&#x2019;d love to know what you think. You may send your questions to <a href="mailto:thoughts@ponyfoo.com">thoughts@ponyfoo.com</a>. I&#x2019;ll try to answer them over email and I <em>may publish them here, with your approval</em>. I also write <em>thoughts</em> about the <mark class="md-mark">current state of front-end development</mark>, and opinions on other people&#x2019;s articles. You can use the form to the right <em>(near the bottom in mobile)</em> to <mark class="md-mark">subscribe via email</mark>.</p></div>

<div></div>

<div><p>Our web needs <strong>better primitive</strong> libraries. We&#x2019;ve been relying for too long &#x2013; <strong>far too long</strong> &#x2013; on jQuery. Most popular UI components are tied to jQuery, part of a comprehensive framework &#x2013; and it&#x2019;s usually hard to extract the component as a standalone library. Nowadays we may not develop <em>as many jQuery plugins</em> as we&#x2019;ve used to, but the situation is <strong>far more severe</strong> now.</p> <p>Today, many popular libraries &#x2013; <em>UI components or otherwise shiny client-side JavaScript things</em> &#x2013; are bound to the author&#x2019;s preferred coding style. Thus, we create things like <a href="https://github.com/gaearon/react-dnd" target="_blank"><code class="md-code md-code-inline">react-dnd</code></a>, <a href="https://github.com/codef0rmer/angular-dragdrop" target="_blank"><code class="md-code md-code-inline">angular-dragdrop</code></a>, or <a href="https://github.com/christianalfoni/backbone-draganddrop-delegation" target="_blank"><code class="md-code md-code-inline">backbone-draganddrop-delegation</code></a>. Out of the three, <em>none</em> are backed by a library providing the primitives into drag and drop, without the <strong>tight framework bindings</strong> &#x2013; such as <a href="https://github.com/bevacqua/dragula" target="_blank"><code class="md-code md-code-inline">dragula</code></a>.</p> <blockquote> <p>It all comes down to <a href="https://ponyfoo.com/articles/composable-ui">composability</a> and <em>portability</em>.</p> </blockquote></div>

<div><p>While <code class="md-code md-code-inline">dragula</code> needs to be integrated into each one of those frameworks <em>(React, Angular, Backbone)</em>, doing so usually takes few lines of code. Here&#x2019;s one such example using <code class="md-code md-code-inline">react</code>, <code class="md-code md-code-inline">dragula</code>, and plain JavaScript someone posted on <a href="https://github.com/bevacqua/dragula/issues/56" target="_blank" aria-label="Invariant Violation when using React.js #56">a GitHub issue for dragula</a>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">dragula([...], {
  direction: <span class="md-code-string">&apos;horizontal&apos;</span>,
}).on(<span class="md-code-string">&apos;cloned&apos;</span>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(clone)</span> </span>{
  clone.removeAttribute(<span class="md-code-string">&apos;data-reactid&apos;</span>);
  <span class="md-code-keyword">var</span> descendents = clone.getElementsByTagName(<span class="md-code-string">&apos;*&apos;</span>);
  <span class="md-code-built_in">Array</span>.prototype.slice.call(descendents).forEach(<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(child)</span> </span>{
    child.removeAttribute(<span class="md-code-string">&apos;data-reactid&apos;</span>);
  });
});
</code></pre> <p>Could <code class="md-code md-code-inline">dragula</code> get rid of <code class="md-code md-code-inline">data-reactid</code> attributes when it clones things? <em>Allow me to answer that question using a meme.</em></p> <p><img alt="This is JavaScript!" class="" src="https://i.imgur.com/8yKeaLf.jpg"></p> <p>That being said, there&#x2019;s <strong>no good reason</strong> for <code class="md-code md-code-inline">dragula</code> to do so. Why should <code class="md-code md-code-inline">dragula</code> <em>know</em> about React? Instead, we introduced a feature where whenever <code class="md-code md-code-inline">dragula</code> clones a DOM element, it emits an event. In practical terms, this is about the same as getting rid of <code class="md-code md-code-inline">data-reactid</code> ourselves, but we&#x2019;ve moved the responsibility of knowing about that particular attribute to whoever uses React.</p> <p>As I wrote this post, I made <a href="https://github.com/bevacqua/react-dragula" target="_blank" aria-label="bevacqua/react-dragula on GitHub"><code class="md-code md-code-inline">react-dragula</code></a> into a library. It&#x2019;s just a wrapper &#x2013; <em>a mighty thin wrapper</em> &#x2013; around <code class="md-code md-code-inline">dragula</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">reactDragula</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> dragula.apply(<span class="md-code-keyword">this</span>, <mark class="md-mark md-code-mark">atoa(<span class="md-code-built_in">arguments</span>)</mark>).on(<span class="md-code-string">&apos;cloned&apos;</span>, cloned);
  <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">cloned</span> <span class="md-code-params">(clone)</span> </span>{
    rm(clone);
    atoa(clone.getElementsByTagName(<span class="md-code-string">&apos;*&apos;</span>)).forEach(rm);
  }
  <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">rm</span> <span class="md-code-params">(el)</span> </span>{
    el.removeAttribute(<span class="md-code-string">&apos;data-reactid&apos;</span>);
  }
}
</code></pre> <p><em><sub><mark class="md-mark">*</mark> <code class="md-code md-code-inline">atoa</code> casts array-like objects into true arrays.</sub></em></p> <p>Going through the trouble is worth it because if somebody wants to write an Angular directive for <code class="md-code md-code-inline">dragula</code> it&#x2019;s also <a href="https://github.com/bevacqua/angular-dragula" target="_blank" aria-label="bevacqua/angular-dragula on GitHub">easy for them to do so</a>, and they seldom have to do anything to integrate it with Backbone &#x2013; Backbone isn&#x2019;t that &#x201C;smart&#x201D;, so we don&#x2019;t have to rewrite our code to fit its awkward architecture.</p> <h1 id="portability-across-frameworks">Portability across Frameworks</h1> <p>Without lower level libraries like <code class="md-code md-code-inline">dragula</code> or <a href="https://github.com/Raynos/xhr" target="_blank" aria-label="Raynos/xhr on GitHub"><code class="md-code md-code-inline">xhr</code></a> we&#x2019;ll end up reinventing the wheel for an entire afterlife of eternity in hell. Don&#x2019;t get me wrong &#x2013; I&#x2019;m a big fan of reinventing the wheel. I&#x2019;ve reinvented my fair share of wheels, Twitter reinvented RSS, etc. <em>But</em>, reinventing the wheel as a pointless exercise in porting a library from a framework to another is just wasteful.</p> <p>When I wrote <a href="https://github.com/bevacqua/react-dragula" target="_blank" aria-label="bevacqua/react-dragula on GitHub"><code class="md-code md-code-inline">react-dragula</code></a>, I didn&#x2019;t have to fork <code class="md-code md-code-inline">dragula</code> and repurpose it for React. When I wrote <a href="https://github.com/bevacqua/angular-dragula" target="_blank" aria-label="bevacqua/angular-dragula on GitHub"><code class="md-code md-code-inline">angular-dragula</code></a>, I didn&#x2019;t have to fork <code class="md-code md-code-inline">dragula</code> either. I guess at this point you might argue that <em>&#x201C;nobody seems to be forking things and repurposing them for other frameworks&#x201D;</em>, but that&#x2019;s beside the point.</p> <p>The point in question is that <mark class="md-mark"><strong>developing a library that specifically targets a framework is a waste of your time</strong></mark>, because when you eventually move on to the next framework <em>(<code class="md-code md-code-inline">this</code> is JavaScript, you will)</em> you&#x2019;ll kick yourself over tightly coupling the library to the framework.</p> <p>Sure, it involves a bit more of work and design thinking. You have to figure out how the library would work without your framework or choice <em>(or any framework for that matter)</em> first &#x2013; and then wrap that in another module that molds them into the framework&#x2019;s paradigm.</p> <p>The <a href="https://github.com/bevacqua/react-dragula" target="_blank" aria-label="bevacqua/react-dragula on GitHub"><code class="md-code md-code-inline">react-dragula</code></a> example was too easy, right? All I did was add an event listener, getting rid of <code class="md-code md-code-inline">data-reactid</code> attributes. Even though it <strong>&#x201C;looks easy&#x201D; in hindsight</strong>, the na&#xEF;ve approach would&#x2019;ve been to just write it to conform to React right off the bat &#x2013; skipping the vanilla implementation entirely. Thus, we&#x2019;d be ignoring the opportunity to provide hooks where we could later adjust the library to play nice with React, <em>saving ourselves from the painful experience</em> of maintaining multiple libraries that do <strong>essentially the same thing</strong>.</p> <p>In the case of <a href="https://github.com/bevacqua/angular-dragula" target="_blank" aria-label="bevacqua/angular-dragula on GitHub"><code class="md-code md-code-inline">angular-dragula</code></a>, I could&#x2019;ve come up with a directive that just passed the options onto <code class="md-code md-code-inline">dragula</code>, but that wouldn&#x2019;t have been very &quot;Angular way&quot;<em>ish</em>. Thus, I came up with the idea of trying to replicate the simple API in <code class="md-code md-code-inline">dragula</code> in an Angular way. Instead of defining the containers as an array passed to <code class="md-code md-code-inline">dragula</code>, you could also use directives to group different containers under the same <code class="md-code md-code-inline">angular-dragula</code> instance.</p> <p>The example below would use <code class="md-code md-code-inline">angular-dragula</code> to create two instances of <code class="md-code md-code-inline">drake</code>, identified as <code class="md-code md-code-inline">&apos;foo&apos;</code>, and <code class="md-code md-code-inline">&apos;bar&apos;</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">ng-controller</span>=<span class="md-code-value">&apos;ExampleCtrl&apos;</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">dragula</span>=<span class="md-code-value">&apos;&quot;foo&quot;&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">dragula</span>=<span class="md-code-value">&apos;&quot;foo&quot;&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">dragula</span>=<span class="md-code-value">&apos;&quot;foo&quot;&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">dragula</span>=<span class="md-code-value">&apos;&quot;bar&quot;&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">dragula</span>=<span class="md-code-value">&apos;&quot;bar&quot;&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
</code></pre> <p>If you wanted to listen for events emitted by one of these <code class="md-code md-code-inline">drake</code> instances, you could do so on the <code class="md-code md-code-inline">$scope</code>, prefixing the event with the <em>&#x201C;bag name&#x201D;</em> and a dot. Here again, I conformed to the Angular style by propagating <code class="md-code md-code-inline">drake</code> events across the <code class="md-code md-code-inline">$scope</code> chain, allowing the consumer to leverage Angular event engine. While events in <a href="https://github.com/bevacqua/dragula" target="_blank" aria-label="bevacqua/dragula on GitHub"><code class="md-code md-code-inline">dragula</code></a> are raised using raw DOM elements, the events emitted across the <code class="md-code md-code-inline">$scope</code> chain wrap them in <code class="md-code md-code-inline">angular.element</code> calls, staying consistent with what you&#x2019;ve come to expect of Angular components.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">app.controller(<span class="md-code-string">&apos;ExampleCtrl&apos;</span>, [<span class="md-code-string">&apos;$scope&apos;</span>,
  <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">($scope)</span> </span>{
    $scope.$on(<mark class="md-mark md-code-mark"><span class="md-code-string">&apos;foo.over&apos;</span></mark>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(e, el, container)</span> </span>{
      <mark class="md-mark md-code-mark">container.addClass</mark>(<span class="md-code-string">&apos;dragging&apos;</span>);
    });
    $scope.$on(<mark class="md-mark md-code-mark"><span class="md-code-string">&apos;foo.out&apos;</span></mark>, <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(e, el, container)</span> </span>{
      container.removeClass(<span class="md-code-string">&apos;dragging&apos;</span>);
    });
  }
]);
</code></pre> <p>To configure the instances, you&#x2019;d use the <code class="md-code md-code-inline">dragulaService</code> in the controller for these containers. The example below makes it so that items in <code class="md-code md-code-inline">foo</code> containers are copied instead of moved.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">app.controller(<span class="md-code-string">&apos;ExampleCtrl&apos;</span>, [<span class="md-code-string">&apos;$scope&apos;</span>, <span class="md-code-string">&apos;dragulaService&apos;</span>,
  <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">($scope, dragulaService)</span> </span>{
    dragulaService.options($scope, <span class="md-code-string">&apos;foo&apos;</span>, {
      copy: <span class="md-code-literal">true</span>
    });
  }
]);
</code></pre> <p>In the future, I might <strong>add more directives</strong>, moving away from the <em>native <a href="https://github.com/bevacqua/dragula" target="_blank" aria-label="bevacqua/dragula on GitHub"><code class="md-code md-code-inline">dragula</code></a> implementation</em> and towards a more Angular way of handling things. For example, one such directive could be <code class="md-code md-code-inline">dragula-accepts=&apos;method&apos;</code>, and it could configure the <code class="md-code md-code-inline">accepts</code> callback in such a way that the container where the directive is added to only accepts elements that return <code class="md-code md-code-inline">true</code> when <code class="md-code md-code-inline">method(item, source)</code> is invoked. A similar <code class="md-code md-code-inline">dragula-moves=&apos;method&apos;</code> directive could determine whether an item can be dragged away from a container, based on the result of calling <code class="md-code md-code-inline">method(item)</code>.</p> <p>A few more aspects of <code class="md-code md-code-inline">dragula</code> can be <em>&#x201C;molded into Angular&#x201D;</em> in this way.</p> <p>While <code class="md-code md-code-inline">dragula</code> doesn&#x2019;t have a native way of treating containers individually &#x2013; even when they take part of the same logical unit in the underlying implementation <em>(a <code class="md-code md-code-inline">drake</code> can have as many containers as needed)</em>, we can build the functionality into <code class="md-code md-code-inline">angular-dragula</code>. That helps us achieve <a href="https://ponyfoo.com/articles/the-angular-way" aria-label="The Angular Way on Pony Foo">the <em>&#x201C;Angular way&#x201D;</em></a> of writing directives that affect containers individually, rather than writing directives on a container that have knowledge of a series of unrelated DOM elements. Or, <em>even worse</em>, creating a directive where every immediate child element is a <a href="https://github.com/bevacqua/dragula" target="_blank" aria-label="bevacqua/dragula on GitHub"><code class="md-code md-code-inline">dragula</code></a> container, constraining the use cases for the consumer.</p> <blockquote> <p>It might involve <em>some extra work</em>, but being able to reuse the code in any future projects makes <strong>plain JavaScript modules</strong> well worth your time.</p> </blockquote> <h1 id="portability-across-platforms">Portability across Platforms</h1> <p>Portability isn&#x2019;t just a matter of writing <em>vanilla client-side JavaScript libraries</em>. An equivalent case may be made for writing libraries that work well in both Node.js and the browser. Consider <a href="https://github.com/caolan/async" target="_blank" aria-label="caolan/async on GitHub"><code class="md-code md-code-inline">async</code></a>: an amazing piece of software in Node.js, that&#x2019;s just <mark class="md-mark">garbage in the client-side.</mark> Granted, it was written well before ES6 modules <em>(or even Browserify)</em> became a thing. A similar story can be told about <code class="md-code md-code-inline">fast-url-parser</code>, a URL parser which underlies many server-side routers but is insanely large for the client-side. Talking about insane, I&#x2019;ve used <a href="https://github.com/punkave/sanitize-html" target="_blank" aria-label="punkave/sanitize-html on GitHub"><code class="md-code md-code-inline">sanitize-html</code></a> in countless opportunities to sanitize HTML on the server-side, but again &#x2013; repeat with me: <strong>freaking <em>huge</em> for the client-side</strong> <em>(depends on <a href="http://github.com/fb55/htmlparser2" target="_blank" aria-label="fb55/htmlparser2 on GitHub"><code class="md-code md-code-inline">htmlparser2</code></a>)</em>.</p> <p>I&#x2019;ve worked on reimplementing a few of those to work well on the client-side. Naturally, their server-side counterparts are more comprehensive, as they should be. Use cases for server-side JavaScript far outnumber what you need to do on a given site on the client-side for a single visitor. On the client-side, we can get away <em>(should get away)</em> with much smaller libraries and modules.</p> <p>Here are some examples.</p> <ul> <li><a href="https://github.com/bevacqua/contra" target="_blank" aria-label="bevacqua/contra on GitHub"><code class="md-code md-code-inline">contra</code></a> <em>(2k)</em> is like <code class="md-code md-code-inline">async</code> for the browser &#x2013; It&#x2019;s <em>modular</em>, too. You can just <code class="md-code md-code-inline">require</code> individual methods <em>(ala <code class="md-code md-code-inline">lodash</code>)</em></li> <li><a href="https://github.com/petkaantonov/urlparser" target="_blank" aria-label="petkaantonov/urlparser on GitHub"><code class="md-code md-code-inline">omnibox</code></a> <em>(1.6k)</em> is like <code class="md-code md-code-inline">fast-url-parser</code> for the browser</li> <li><a href="https://github.com/bevacqua/insane" target="_blank" aria-label="bevacqua/insane on GitHub"><code class="md-code md-code-inline">insane</code></a> <em>(2k)</em> is like <code class="md-code md-code-inline">sanitize-html</code> <em>(100k)</em> for the browser</li> </ul> <p>Then again &#x2013; huge JavaScript libraries are only worrisome if we actually care about <a href="https://ponyfoo.com/articles/fixing-web-performance" aria-label="Fixing Web Performance on Pony Foo">performance when it comes to serving images</a> in the first place &#x2013; <em>right?</em></p> <blockquote> <p>We&#x2019;re a far way from the <em>&#x201C;universal JavaScript&#x201D;</em> fairytale we keep telling ourselves.</p> </blockquote> <p><mark class="md-mark">Have any questions or thoughts you&#x2019;d like me to write about?</mark> <em>Send an email to <a href="mailto:thoughts@ponyfoo.com" aria-label="Send me your questions and feedback!">thoughts@ponyfoo.com</a>.</em> Remember to <strong>subscribe</strong> if you got this far!</p></div>
