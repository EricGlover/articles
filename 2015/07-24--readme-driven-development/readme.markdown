<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/readme-driven-development">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/readme-driven-development"><div></div></a>

<h1>README Driven Development</h1>

<p><kbd>food-for-thought</kbd> <kbd>documentation</kbd> <kbd>pragmatism</kbd> <kbd>readme-first</kbd> <kbd>api-first</kbd></p>

<blockquote><p>These are short-form <mark class="md-mark">&#x201C;thoughts&#x201D;</mark>, in addition to the usual longer-form articles in the blog. The <a href="https://ponyfoo.com/articles/food-for-thought-begins">goal</a> is to publish <a href="https://ponyfoo.com/articles/tagged/food-for-thought">one of these</a> every weekday. I&#x2019;d &#x2026;</p></blockquote>

<div><p>These are short-form <mark class="md-mark">&#x201C;thoughts&#x201D;</mark>, in addition to the usual longer-form articles in the blog. The <a href="https://ponyfoo.com/articles/food-for-thought-begins">goal</a> is to publish <a href="https://ponyfoo.com/articles/tagged/food-for-thought">one of these</a> every weekday. I&#x2019;d love to know what you think. You may send your questions to <a href="mailto:thoughts@ponyfoo.com">thoughts@ponyfoo.com</a>. I&#x2019;ll try to answer them over email and I <em>may publish them here, with your approval</em>. I also write <em>thoughts</em> about the <mark class="md-mark">current state of front-end development</mark>, and opinions on other people&#x2019;s articles. You can use the form to the right <em>(near the bottom in mobile)</em> to <mark class="md-mark">subscribe via email</mark>.</p></div>

<div></div>

<div><p>I don&#x2019;t recall exactly when, but a while back, when I was just getting my toes wet at the shores of open-source, I stumbled upon this article written by <em>GitHub co-founder Tom Preston-Werner</em>: <a href="http://tom.preston-werner.com/2010/08/23/readme-driven-development.html" target="_blank">Readme Driven Development</a>. While I don&#x2019;t quite approach development in a README-first manner, documentation certainly influences the way in which I code, write, and distribute open-source modules.</p> <p><strong>README</strong>-first is a powerful notion. You sit down, you design your library, flesh out an API, write it down, and get to coding. It&#x2019;s sort of what you would do with TDD, but <strong>without the drawback</strong> of intensely slowing down your pace, as writing and rewriting your tests is a <em>much slower proposition</em> than rewriting documentation.</p> <p>You don&#x2019;t necessarily need to flesh out the entire README before starting to code.</p></div>

<div><p>My usual approach is that there is a module I want &#x2013; some piece of functionality I need. If I&#x2019;m working in an application I&#x2019;ll end up adding a little more code as if I already had a module that did this. For instance, suppose I&#x2019;m writing an application that automates the process of eating tacos, and I need to add some sauce. I think up an API for the <code class="md-code md-code-inline">sauce-adder</code> module first, and then write up a quick implementation.</p> <p>Usually I favor <code class="md-code md-code-inline">options</code> objects unless the likelyhood of needing anything more than a single &#x201C;option&#x201D; is low. Similarly, I favor providing the &#x201C;context&#x201D; as a first argument, unless there&#x2019;s a callback, in which case I try to keep things in just a couple of arguments like <code class="md-code md-code-inline">(options, done)</code>. Returning the <code class="md-code md-code-inline">taco</code> might be good for functional programming and chaning in general, so we could do that as well.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">add</span> <span class="md-code-params">(taco, options)</span> </span>{
  <span class="md-code-keyword">if</span> (options.spiciness) {
    taco.spice += <span class="md-code-built_in">Math</span>.pow(<span class="md-code-number">2</span>, options.spiciness);
  }
  <span class="md-code-keyword">return</span> taco;
}

<span class="md-code-built_in">module</span>.exports = {
  add: add
};
</code></pre> <p>As soon as I&#x2019;m done writing down a reasonable implementation for a first release, I add what documentation I can. It doesn&#x2019;t need to be perfect, it just needs to exist. I can always improve, iterate on it. I also tend to add a <code class="md-code md-code-inline">changelog.md</code> file like this:</p> <pre class="md-code-block"><code class="md-code md-lang-markdown"><span class="md-code-header"># 1.0.0 IPO</span>

<span class="md-code-bullet">- </span>Initial Public Release
</code></pre> <p>That helps because whenever I actually have to write up some changes, I&#x2019;ll have the changelog already.</p> <h1 id="documentation-in-open-source">Documentation in Open-Source</h1> <p>I feel like the single most influential factor driving the popularity of open-source projects is documentation. Without thorough, well-written documentation, consumers are at a complete loss as to how to use a library. I&#x2019;ll take a well-documented library over a slightly more performant one, any day of the week.</p> <p>There is this cargo cult myth in software engineering where documentation becomes stale the second you finish writing it. That may have been true back when you had to print manuals for desktop software that was then updated with diskettes every few months, but it&#x2019;s definitely <code class="md-code md-code-inline">false</code> in the case of well-maintained open-source projects. In open-source, people seldom merge pull requests without documentation, unless they&#x2019;re willing to update the documentation themselves. In open-source, people understand that documentation is what drives usage, because a well-documented API is an API without surprises, one where you don&#x2019;t have to do <code class="md-code md-code-inline">console.log(Object.keys(thing()))</code> just to figure out what you can get back from <code class="md-code md-code-inline">thing()</code>.</p> <p>I like developing open-source modules because that forces me to document many more <em>&#x201C;touch points&#x201D;</em> across my application stacks than I would have to otherwise. Let&#x2019;s face it, <em>we don&#x2019;t write documentation for every module, object, or class in our applications</em>. But, we are much more likely to write documentation for every module we open-source, at least for their public API. The more public API&#x2019;s we have, the better the documentation in your project becomes, <strong>the easier it is to hunt down bugs</strong>, and the easier it is to onboard newcomers into the project. Not to mention, open-source code usually follows most of the <a href="http://12factor.net/" target="_blank" aria-label="The Twelve-Factor App">12factor</a> design advice, which is always a great thing to do.</p> <p>The more we rely on open-source, <strong>the better our closed-source code becomes</strong>.</p> <blockquote> <p>You could call it <mark class="md-mark"><strong>API</strong>-first</mark>, I guess.</p> </blockquote> <p><mark class="md-mark">Have any questions or thoughts you&#x2019;d like me to write about?</mark> <em>Send an email to <a href="mailto:thoughts@ponyfoo.com" aria-label="Send me your questions and feedback!">thoughts@ponyfoo.com</a>.</em> Remember to <strong>subscribe</strong> if you got this far!</p></div>
