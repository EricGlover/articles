<div><blockquote>
  <h1>ES6 Math Additions in Depth</h1>
  <div><p>You&#x2019;ve made it! Here&#x2019;s another article in the <a href="https://ponyfoo.com/articles/tagged/es6-in-depth">ES6 &#x2013; <em>&#x201C;What? I&#x2019;d rather develop for IE6&#x201D;</em> &#x2013; in Depth</a> series. If &#x2026;</p></div>
</blockquote></div>

<div><p>You&#x2019;ve made it! Here&#x2019;s another article in the <a href="https://ponyfoo.com/articles/tagged/es6-in-depth">ES6 &#x2013; <em>&#x201C;What? I&#x2019;d rather develop for IE6&#x201D;</em> &#x2013; in Depth</a> series. If you&#x2019;ve never been around here before, start with <a href="https://ponyfoo.com/articles/a-brief-history-of-es6-tooling">A Brief History of ES6 Tooling</a>. Then, make your way through <a href="https://ponyfoo.com/articles/es6-destructuring-in-depth">destructuring</a>, <a href="https://ponyfoo.com/articles/es6-template-strings-in-depth">template literals</a>, <a href="https://ponyfoo.com/articles/es6-arrow-functions-in-depth">arrow functions</a>, the <a href="https://ponyfoo.com/articles/es6-spread-and-butter-in-depth">spread operator and rest parameters</a>, improvements coming to <a href="https://ponyfoo.com/articles/es6-object-literal-features-in-depth">object literals</a>, the new <a href="https://ponyfoo.com/articles/es6-classes-in-depth"><em>classes</em></a> sugar on top of prototypes, <a href="https://ponyfoo.com/articles/es6-let-const-and-temporal-dead-zone-in-depth"><code class="md-code md-code-inline">let</code>, <code class="md-code md-code-inline">const</code>, and the <em>&#x201C;Temporal Dead Zone&#x201D;</em></a>, <a href="https://ponyfoo.com/articles/es6-iterators-in-depth">iterators</a>, <a href="https://ponyfoo.com/articles/es6-generators-in-depth">generators</a>, <a href="https://ponyfoo.com/articles/es6-symbols-in-depth">Symbols</a>, <a href="https://ponyfoo.com/articles/es6-maps-in-depth">Maps</a>, <a href="https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth">WeakMaps, Sets, and WeakSets</a>, <a href="https://ponyfoo.com/articles/es6-proxies-in-depth">proxies</a>, <a href="https://ponyfoo.com/articles/es6-proxy-traps-in-depth">proxy traps</a>, <a href="https://ponyfoo.com/articles/more-es6-proxy-traps-in-depth">more proxy traps</a>, <a href="https://ponyfoo.com/articles/es6-reflection-in-depth">reflection</a>, and <a href="https://ponyfoo.com/articles/es6-number-improvements-in-depth"><code class="md-code md-code-inline">Number</code></a>. Today we&#x2019;ll learn about new <code class="md-code md-code-inline">Math</code> methods.</p></div>

<div></div>

<div><blockquote> <p>Like I did in previous articles on the series, I would love to point out that you should probably <a href="https://ponyfoo.com/articles/universal-react-babel#setting-up-babel">set up Babel</a> and follow along the examples with either a REPL or the <code class="md-code md-code-inline">babel-node</code> CLI and a file. That&#x2019;ll make it so much easier for you to <strong>internalize the concepts</strong> discussed in the series. If you aren&#x2019;t the <em>&#x201C;install things on my computer&#x201D;</em> kind of human, you might prefer to hop on <a href="http://codepen.io/" target="_blank">CodePen</a> and then click on the gear icon for JavaScript &#x2013; <em>they have a Babel preprocessor which makes trying out ES6 a breeze.</em> Another alternative that&#x2019;s also quite useful is to use Babel&#x2019;s <a href="http://babeljs.io/repl/" target="_blank">online REPL</a> <em>&#x2013; it&#x2019;ll show you compiled ES5 code to the right of your ES6 code for quick comparison.</em></p> </blockquote> <p>Before getting into it, let me <a href="https://www.patreon.com/bevacqua" target="_blank"><em>shamelessly ask for your support</em></a> if you&#x2019;re enjoying my <a href="https://ponyfoo.com/articles/tagged/es6-in-depth">ES6 in Depth</a> series. Your contributions will go towards helping me keep up with the schedule, server bills, keeping me fed, and maintaining <strong>Pony Foo</strong> as a veritable source of JavaScript goodies.</p> <p>Thanks for reading that, and let&#x2019;s go into <code class="md-code md-code-inline">Math</code> improvements. For a bit of context you may want to look at the <a href="https://ponyfoo.com/articles/es6-number-improvements-in-depth">extensive article on <code class="md-code md-code-inline">Number</code> improvements</a> from last week. Time to dig into <code class="md-code md-code-inline">Math</code>.</p></div>

<div><h1 id="math-additions-in-es6"><code class="md-code md-code-inline">Math</code> Additions in ES6</h1> <p>There&#x2019;s <em>heaps</em> of additions to <code class="md-code md-code-inline">Math</code> in ES6. Just like you&#x2019;re used to, these are <strong>static</strong> methods on the <code class="md-code md-code-inline">Math</code> built-in. Some of these methods were specifically engineered towards making it easier to compile C into JavaScript, and you may never come across a need for them in day-to-day development &#x2013; particularly not when it comes to front-end development. Other methods are complements to the existing rounding, exponentiation, and trigonometry API surface.</p> <p>Below is a full list of methods added to <code class="md-code md-code-inline">Math</code>. They are grouped by functionality and sorted by relevance.</p> <ul> <li><strong>Utility</strong> <ul> <li><a href="https://ponyfoo.com/#mathsign"><code class="md-code md-code-inline">Math.sign</code></a> &#x2013; sign function of a number</li> <li><a href="https://ponyfoo.com/#mathtrunc"><code class="md-code md-code-inline">Math.trunc</code></a> &#x2013; integer part of a number</li> </ul> </li> <li><strong>Exponentiation and Logarithmic</strong> <ul> <li><a href="https://ponyfoo.com/#mathcbrt"><code class="md-code md-code-inline">Math.cbrt</code></a> &#x2013; cubic root of value, or <code class="md-code md-code-inline">&#x221B;&#x203E;value</code></li> <li><a href="https://ponyfoo.com/#mathexpm1"><code class="md-code md-code-inline">Math.expm1</code></a> &#x2013; <code class="md-code md-code-inline">e</code> to the <code class="md-code md-code-inline">value</code> minus <code class="md-code md-code-inline">1</code>, or <code class="md-code md-code-inline">e<sup>value</sup> - 1</code></li> <li><a href="https://ponyfoo.com/#mathlog1p"><code class="md-code md-code-inline">Math.log1p</code></a> &#x2013; natural logarithm of <code class="md-code md-code-inline">value + 1</code>, or <code class="md-code md-code-inline"><em>ln</em>(value + 1)</code></li> <li><a href="https://ponyfoo.com/#mathlog10"><code class="md-code md-code-inline">Math.log10</code></a> &#x2013; base 10 logarithm of <code class="md-code md-code-inline">value</code>, or <code class="md-code md-code-inline"><em>log</em><sub>10</sub>(value)</code></li> <li><a href="https://ponyfoo.com/#mathlog2"><code class="md-code md-code-inline">Math.log2</code></a> &#x2013; base 2 logarithm of <code class="md-code md-code-inline">value</code>, or <code class="md-code md-code-inline"><em>log</em><sub>2</sub>(value)</code></li> </ul> </li> <li><strong>Trigonometry</strong> <ul> <li><a href="https://ponyfoo.com/#mathsinh"><code class="md-code md-code-inline">Math.sinh</code></a> &#x2013; hyperbolic sine of a number</li> <li><a href="https://ponyfoo.com/#mathcosh"><code class="md-code md-code-inline">Math.cosh</code></a> &#x2013; hyperbolic cosine of a number</li> <li><a href="https://ponyfoo.com/#mathtanh"><code class="md-code md-code-inline">Math.tanh</code></a> &#x2013; hyperbolic tangent of a number</li> <li><a href="https://ponyfoo.com/#mathasinh"><code class="md-code md-code-inline">Math.asinh</code></a> &#x2013; hyperbolic arc-sine of a number</li> <li><a href="https://ponyfoo.com/#mathacosh"><code class="md-code md-code-inline">Math.acosh</code></a> &#x2013; hyperbolic arc-cosine of a number</li> <li><a href="https://ponyfoo.com/#mathatanh"><code class="md-code md-code-inline">Math.atanh</code></a> &#x2013; hyperbolic arc-tangent of a number</li> <li><a href="https://ponyfoo.com/#mathhypot"><code class="md-code md-code-inline">Math.hypot</code></a> &#x2013; square root of the sum of squares</li> </ul> </li> <li><strong>Bitwise</strong> <ul> <li><a href="https://ponyfoo.com/#mathclz32"><code class="md-code md-code-inline">Math.clz32</code></a> &#x2013; leading zero bits in the 32-bit representation of a number</li> </ul> </li> <li><strong>Compile-to-JavaScript</strong> <ul> <li><a href="https://ponyfoo.com/#mathimul"><code class="md-code md-code-inline">Math.imul</code></a> &#x2013; <em>C-like</em> 32-bit multiplication</li> <li><a href="https://ponyfoo.com/#mathfround"><code class="md-code md-code-inline">Math.fround</code></a> &#x2013; nearest single-precision float representation of a number</li> </ul> </li> </ul> <p>Let&#x2019;s get right into it.</p> <h1 id="mathsign"><code class="md-code md-code-inline">Math.sign</code></h1> <p>Many languages have a <a href="https://msdn.microsoft.com/en-us/library/ywb0xks3(v=vs.110).aspx" target="_blank" aria-label="C#, for instance"><code class="md-code md-code-inline">Math.Sign</code></a> method <em>(or equivalent)</em> that returns a vector like <code class="md-code md-code-inline">-1</code>, <code class="md-code md-code-inline">0</code>, or <code class="md-code md-code-inline">1</code>, depending on the sign of the provided input. Surely then, you would think JavaScript&#x2019;s <code class="md-code md-code-inline">Math.sign</code> method does the same. Well, sort of. The JavaScript flavor of this method has two more alternatives: <code class="md-code md-code-inline">-0</code>, and <code class="md-code md-code-inline">NaN</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">Math</span>.sign(<span class="md-code-number">1</span>)
<span class="md-code-comment">// &lt;- 1</span>
<span class="md-code-built_in">Math</span>.sign(<span class="md-code-number">0</span>)
<span class="md-code-comment">// &lt;- 0</span>
<span class="md-code-built_in">Math</span>.sign(-<span class="md-code-number">0</span>)
<span class="md-code-comment">// &lt;- <mark class="md-mark md-code-mark">-0</mark></span>
<span class="md-code-built_in">Math</span>.sign(-<span class="md-code-number">30</span>)
<span class="md-code-comment">// &lt;- -1</span>
<span class="md-code-built_in">Math</span>.sign(<span class="md-code-literal">NaN</span>)
<span class="md-code-comment">// &lt;- <mark class="md-mark md-code-mark">NaN</mark></span>
<span class="md-code-built_in">Math</span>.sign(<span class="md-code-string">&apos;foo&apos;</span>)
<span class="md-code-comment">// &lt;- NaN, because Number(&apos;foo&apos;) is NaN</span>
<span class="md-code-built_in">Math</span>.sign(<span class="md-code-string">&apos;0&apos;</span>)
<span class="md-code-comment">// &lt;- <mark class="md-mark md-code-mark">0</mark>, because Number(&apos;0&apos;) is 0</span>
<span class="md-code-built_in">Math</span>.sign(<span class="md-code-string">&apos;-1&apos;</span>)
<span class="md-code-comment">// &lt;- <mark class="md-mark md-code-mark">-1</mark>, because Number(&apos;-1&apos;) is -1</span>
</code></pre> <p>This is just one of those methods. It <strong>grinds my gears.</strong> After all the trouble we went through to document how methods ported over to <code class="md-code md-code-inline">Number</code>, such as <code class="md-code md-code-inline">Number.isNaN</code>, don&#x2019;t indulge in <a href="https://ponyfoo.com/articles/es6-number-improvements-in-depth" aria-label="ES6 Number Improvements in Depth on Pony Foo">unnecessary type coercion</a>, why is it that <code class="md-code md-code-inline">Math.sign</code> <em>does</em> coerce its input? I have no idea. Most of the methods in <code class="md-code md-code-inline">Math</code> share this trait, though. The methods that were added to <code class="md-code md-code-inline">Number</code> don&#x2019;t.</p> <p><img alt="&apos;What really grinds my gears&apos;, on Family Guy" class="" src="https://i.imgur.com/ZQiiZsF.png"></p> <p>Sure, we&#x2019;re not a statically typed language, we dislike throwing exceptions, and we&#x2019;re <a href="http://blog.codinghorror.com/javascript-and-html-forgiveness-by-default/" target="_blank" aria-label="JavaScript and HTML: Forgiveness by Default">fault tolerant</a> &#x2013; after all, this is one of the founding languages of the web. But was not coercing everything into a <code class="md-code md-code-inline">Number</code> too much to ask? Couldn&#x2019;t we just return <code class="md-code md-code-inline">NaN</code> for <em>non-numeric</em> values?</p> <p>I&#x2019;d love for us to get over implicit casting, but it seems we&#x2019;re <em>not quite there yet</em> for the time being.</p> <h1 id="mathtrunc"><code class="md-code md-code-inline">Math.trunc</code></h1> <p>One of the oddities in <code class="md-code md-code-inline">Math</code> methods is how abruptly they were named. It&#x2019;s like they were trying to save keystrokes or something. After all, it&#x2019;s not like we stopped adding <em>super-precise</em> method names like <a href="https://ponyfoo.com/articles/es6-symbols-in-depth" aria-label="ES6 Symbols in Depth on Pony Foo"><code class="md-code md-code-inline">Object.getOwnPropertySymbols()</code></a>. Why <code class="md-code md-code-inline">trunc</code> instead of <code class="md-code md-code-inline">truncate</code>, then? Who knows.</p> <p>Anyways, <code class="md-code md-code-inline">Math.trunc</code> is a simple alternative to <code class="md-code md-code-inline">Math.floor</code> and <code class="md-code md-code-inline">Math.ceil</code> where we simply discard the decimal part of a number. Once again, the input is coerced into a numeric value through <code class="md-code md-code-inline">Number(value)</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">Math</span>.trunc(<span class="md-code-number">12.34567</span>)
<span class="md-code-comment">// &lt;- 12</span>
<span class="md-code-built_in">Math</span>.trunc(-<span class="md-code-number">13.58</span>)
<span class="md-code-comment">// &lt;- -13</span>
<span class="md-code-built_in">Math</span>.trunc(-<span class="md-code-number">0.1234</span>)
<span class="md-code-comment">// &lt;- <mark class="md-mark md-code-mark">-0</mark></span>
<span class="md-code-built_in">Math</span>.trunc(<span class="md-code-literal">NaN</span>)
<span class="md-code-comment">// &lt;- NaN</span>
<span class="md-code-built_in">Math</span>.trunc(<span class="md-code-string">&apos;foo&apos;</span>)
<span class="md-code-comment">// &lt;- <mark class="md-mark md-code-mark">NaN</mark>, because Number(&apos;foo&apos;) is NaN</span>
<span class="md-code-built_in">Math</span>.trunc(<span class="md-code-string">&apos;123.456&apos;</span>)
<span class="md-code-comment">// &lt;- <mark class="md-mark md-code-mark">123</mark>, because Number(&apos;123.456&apos;) is 123.456</span>
</code></pre> <p>While it still coerces any values into numbers, at least it stayed consistent with <code class="md-code md-code-inline">Math.floor</code> and <code class="md-code md-code-inline">Math.ceil</code>, enough that you could use them to create a simple polyfill for <code class="md-code md-code-inline">Math.trunc</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">Math</span>.trunc = <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">truncate</span> <span class="md-code-params">(value)</span> </span>{
  <span class="md-code-keyword">return</span> value &gt; <span class="md-code-number">0</span> ? <span class="md-code-built_in">Math</span>.floor(value) : <span class="md-code-built_in">Math</span>.ceil(value)
}
</code></pre> <p>Another apt example of how <em>&#x201C;succintly&#x201D;</em> <code class="md-code md-code-inline">Math</code> methods have been named in ES6 can be found in <code class="md-code md-code-inline">Math.cbrt</code> <em>&#x2013; although this one matches the pre-existing <code class="md-code md-code-inline">Math.sqrt</code> method, to be fair.</em></p> <h1 id="mathcbrt"><code class="md-code md-code-inline">Math.cbrt</code></h1> <p>As hinted above, <code class="md-code md-code-inline">Math.cbrt</code> is short for <em>&#x201C;cubic root&#x201D;</em>. The examples below show the sorts of output it produces.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">Math</span>.cbrt(-<span class="md-code-number">1</span>)
<span class="md-code-comment">// &lt;- -1</span>
<span class="md-code-built_in">Math</span>.cbrt(<span class="md-code-number">3</span>)
<span class="md-code-comment">// &lt;- 1.4422495703074083</span>
<span class="md-code-built_in">Math</span>.cbrt(<span class="md-code-number">8</span>)
<span class="md-code-comment">// &lt;- 2</span>
<span class="md-code-built_in">Math</span>.cbrt(<span class="md-code-number">27</span>)
<span class="md-code-comment">// &lt;- 3</span>
</code></pre> <p>Not much explaining to do here. Note that this method <em>also</em> coerces non-numerical values into numbers.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">Math</span>.cbrt(<span class="md-code-string">&apos;8&apos;</span>)
<span class="md-code-comment">// &lt;- <mark class="md-mark md-code-mark">2</mark>, because Number(&apos;8&apos;) is 8</span>
<span class="md-code-built_in">Math</span>.cbrt(<span class="md-code-string">&apos;ponyfoo&apos;</span>)
<span class="md-code-comment">// &lt;- <mark class="md-mark md-code-mark">NaN</mark>, because Number(&apos;ponyfoo&apos;) is NaN</span>
</code></pre> <p>Let&#x2019;s move onto something else.</p> <h1 id="mathexpm1"><code class="md-code md-code-inline">Math.expm1</code></h1> <p>This operation is the result of computing <code class="md-code md-code-inline">e</code> to the <code class="md-code md-code-inline">value</code> minus <code class="md-code md-code-inline">1</code>. In JavaScript, the <code class="md-code md-code-inline">e</code> constant is defined as <code class="md-code md-code-inline">Math.E</code>. The method below is a rough equivalent of <code class="md-code md-code-inline">Math.expm1</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">expm1</span> <span class="md-code-params">(value)</span> </span>{
  <span class="md-code-keyword">return</span> <span class="md-code-built_in">Math</span>.pow(<span class="md-code-built_in">Math</span>.E, value) - <span class="md-code-number">1</span>
}
</code></pre> <p>The <code class="md-code md-code-inline">e<sup>value</sup></code> operation can be expressed as <code class="md-code md-code-inline">Math.exp(value)</code> as well.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">expm1</span> <span class="md-code-params">(value)</span> </span>{
  <span class="md-code-keyword">return</span> <span class="md-code-built_in">Math</span>.exp(value) - <span class="md-code-number">1</span>
}
</code></pre> <p>Note that this method has higher precision than merely doing <code class="md-code md-code-inline">Math.exp(value) - 1</code>, and should be the preferred alternative.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">expm1(<span class="md-code-number">1e-20</span>)
<span class="md-code-comment">// &lt;- 0</span>
<span class="md-code-built_in">Math</span>.expm1(<span class="md-code-number">1e-20</span>)
<span class="md-code-comment">// &lt;- 1e-20</span>
expm1(<span class="md-code-number">1e-10</span>)
<span class="md-code-comment">// &lt;- 1.000000082740371e-10</span>
<span class="md-code-built_in">Math</span>.expm1(<span class="md-code-number">1e-10</span>)
<span class="md-code-comment">// &lt;- 1.00000000005e-10</span>
</code></pre> <p>The inverse function of <code class="md-code md-code-inline">Math.expm1</code> is <code class="md-code md-code-inline">Math.log1p</code>.</p> <h1 id="mathlog1p"><code class="md-code md-code-inline">Math.log1p</code></h1> <p>This is the natural logarithm of <code class="md-code md-code-inline">value</code> plus <code class="md-code md-code-inline">1</code>, &#x2013; <code class="md-code md-code-inline"><em>ln</em>(value + 1)</code> &#x2013; and the inverse function of <code class="md-code md-code-inline">Math.expm1</code>. The base <code class="md-code md-code-inline">e</code> logarithm of a number can be expressed as <code class="md-code md-code-inline">Math.log</code> in JavaScript.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">log1p</span> <span class="md-code-params">(value)</span> </span>{
 <span class="md-code-keyword">return</span> <span class="md-code-built_in">Math</span>.log(value + <span class="md-code-number">1</span>)
}
</code></pre> <p>This method is <strong>more precise</strong> than executing the <code class="md-code md-code-inline">Math.log(value + 1)</code> operation by hand, just like the <a href="https://ponyfoo.com/#mathexpm1"><code class="md-code md-code-inline">Math.expm1</code></a> case.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">log1p(<span class="md-code-number">1.00000000005e-10</span>)
<span class="md-code-comment">// &lt;- 1.000000082690371e-10</span>
<span class="md-code-built_in">Math</span>.log1p(<span class="md-code-number">1.00000000005e-10</span>)
<span class="md-code-comment">// &lt;- <mark class="md-mark md-code-mark">1e-10</mark>, exactly the inverse of Math.expm1(1e-10)</span>
</code></pre> <p>Next up is <code class="md-code md-code-inline">Math.log10</code>.</p> <h1 id="mathlog10"><code class="md-code md-code-inline">Math.log10</code></h1> <p>Base ten logarithm of a number &#x2013; <code class="md-code md-code-inline"><em>log</em><sub>10</sub>(value)</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">Math</span>.log10(<span class="md-code-number">1000</span>)
<span class="md-code-comment">// &lt;- 3</span>
</code></pre> <p>You could polyfill <code class="md-code md-code-inline">Math.log10</code> using the <code class="md-code md-code-inline">Math.LN10</code> constant.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">log10</span> <span class="md-code-params">(value)</span> </span>{
  <span class="md-code-keyword">return</span> <span class="md-code-built_in">Math</span>.log(x) / <span class="md-code-built_in">Math</span>.LN10
}
</code></pre> <p>And then there&#x2019;s <code class="md-code md-code-inline">Math.log2</code>.</p> <h1 id="mathlog2"><code class="md-code md-code-inline">Math.log2</code></h1> <p>Base two logarithm of a number &#x2013; <code class="md-code md-code-inline"><em>log</em><sub>2</sub>(value)</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">Math</span>.log2(<span class="md-code-number">1024</span>)
<span class="md-code-comment">// &lt;- 10</span>
</code></pre> <p>You could polyfill <code class="md-code md-code-inline">Math.log2</code> using the <code class="md-code md-code-inline">Math.LN2</code> constant.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">log2</span> <span class="md-code-params">(value)</span> </span>{
  <span class="md-code-keyword">return</span> <span class="md-code-built_in">Math</span>.log(x) / <span class="md-code-built_in">Math</span>.LN2
}
</code></pre> <p>Note that the polyfilled version won&#x2019;t be as precise as <code class="md-code md-code-inline">Math.log2</code> in some cases. Remember that the <code class="md-code md-code-inline">&lt;&lt;</code> operator means <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Left_shift" target="_blank" aria-label="Bitwise left shift operator on MDN"><em>&#x201C;bitwise left shift&#x201D;</em></a>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">Math</span>.log2(<span class="md-code-number">1</span> &lt;&lt; <span class="md-code-number">29</span>)
<span class="md-code-comment">// &lt;- 29</span>
log2(<span class="md-code-number">1</span> &lt;&lt; <span class="md-code-number">29</span>)
<span class="md-code-comment">// &lt;- 29.000000000000004</span>
</code></pre> <p>Naturally, you could use <code class="md-code md-code-inline">Math.round</code> or <a href="https://ponyfoo.com/articles/es6-number-improvements-in-depth#numberepsilon" aria-label="Number.EPSILON, ES6 Number Improvements in Depth on Pony Foo"><code class="md-code md-code-inline">Number.EPSILON</code></a> to get around rounding issues.</p> <h1 id="mathsinh"><code class="md-code md-code-inline">Math.sinh</code></h1> <p>Returns the hyperbolic sine of <code class="md-code md-code-inline">value</code>.</p> <h1 id="mathcosh"><code class="md-code md-code-inline">Math.cosh</code></h1> <p>Returns the hyperbolic cosine of <code class="md-code md-code-inline">value</code>.</p> <h1 id="mathtanh"><code class="md-code md-code-inline">Math.tanh</code></h1> <p>Returns the hyperbolic tangent of <code class="md-code md-code-inline">value</code>.</p> <h1 id="mathasinh"><code class="md-code md-code-inline">Math.asinh</code></h1> <p>Returns the hyperbolic arc-sine of <code class="md-code md-code-inline">value</code>.</p> <h1 id="mathacosh"><code class="md-code md-code-inline">Math.acosh</code></h1> <p>Returns the hyperbolic arc-cosine of <code class="md-code md-code-inline">value</code>.</p> <h1 id="mathatanh"><code class="md-code md-code-inline">Math.atanh</code></h1> <p>Returns the hyperbolic arc-tangent of <code class="md-code md-code-inline">value</code>.</p> <h1 id="mathhypot"><code class="md-code md-code-inline">Math.hypot</code></h1> <p>Returns the square root of the sum of the squares of the arguments.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">Math</span>.hypot(<span class="md-code-number">1</span>, <span class="md-code-number">2</span>, <span class="md-code-number">3</span>)
<span class="md-code-comment">// &lt;- 3.741657386773941</span>
</code></pre> <p>We could polyfill <code class="md-code md-code-inline">Math.hypot</code> by doing the operations manually. We can use <code class="md-code md-code-inline">Math.sqrt</code> to compute the square root and <a href="https://ponyfoo.com/articles/fun-with-native-arrays" aria-label="Fun with Native Arrays on Pony Foo"><code class="md-code md-code-inline">Array.prototype.reduce</code></a> combined with the <a href="https://ponyfoo.com/articles/es6-spread-and-butter-in-depth" aria-label="ES6 Spread and Butter in Depth on Pony Foo">spread operator</a> to sum the squares. I&#x2019;ll throw in <a href="https://ponyfoo.com/articles/es6-arrow-functions-in-depth" aria-label="ES6 Arrow Functions in Depth on Pony Foo">an arrow function</a> for good measure!</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">hypot</span> <span class="md-code-params">(<mark class="md-mark md-code-mark">...</mark>values)</span> </span>{
  <span class="md-code-keyword">return</span> <span class="md-code-built_in">Math</span>.sqrt(values<mark class="md-mark md-code-mark">.reduce</mark>((sum, value) =&gt; sum + <mark class="md-mark md-code-mark">value * value</mark>, <span class="md-code-number">0</span>))
}
</code></pre> <p>Surprisingly, our handmade method is more precise than the native one <em>(at least on Chrome 45)</em> for <strong>this case in particular</strong>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">Math</span>.hypot(<span class="md-code-number">1</span>, <span class="md-code-number">2</span>, <span class="md-code-number">3</span>)
<span class="md-code-comment">// &lt;- 3.741657386773941</span>
hypot(<span class="md-code-number">1</span>, <span class="md-code-number">2</span>, <span class="md-code-number">3</span>)
<span class="md-code-comment">// &lt;- <mark class="md-mark md-code-mark">3.7416573867739413</mark></span>
</code></pre> <p>And now for the <strong>&#x201C;<em>really</em> fun&#x201D;</strong> methods!</p> <h1 id="mathclz32"><code class="md-code md-code-inline">Math.clz32</code></h1> <p>Definitely not immediately obvious, but the name for this method is an acronym for <em>&#x201C;count leading zero bits in 32-bit binary representations of a number&#x201D;</em>. Remember that the <code class="md-code md-code-inline">&lt;&lt;</code> operator means <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Left_shift" target="_blank" aria-label="Bitwise left shift operator on MDN"><em>&#x201C;bitwise left shift&#x201D;</em></a>, and thus&#x2026;</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-built_in">Math</span>.clz32(<span class="md-code-number">0</span>)
<span class="md-code-comment">// &lt;- 32</span>
<span class="md-code-built_in">Math</span>.clz32(<span class="md-code-number">1</span>)
<span class="md-code-comment">// &lt;- 31</span>
<span class="md-code-built_in">Math</span>.clz32(<span class="md-code-number">1</span> &lt;&lt; <span class="md-code-number">1</span>)
<span class="md-code-comment">// &lt;- 30</span>
<span class="md-code-built_in">Math</span>.clz32(<span class="md-code-number">1</span> &lt;&lt; <span class="md-code-number">2</span>)
<span class="md-code-comment">// &lt;- 29</span>
<span class="md-code-built_in">Math</span>.clz32(<span class="md-code-number">1</span> &lt;&lt; <span class="md-code-number">29</span>)
<span class="md-code-comment">// &lt;- 2</span>
</code></pre> <p>Cool, and also probably the last time you&#x2019;re going to see that method in use for the foreseeable future. For completeness&#x2019; sake, I&#x2019;ll add a sentence about the pair of methods that were added mostly to aid with <code class="md-code md-code-inline">asm.js</code> compilation of C programs. <em>I doubt you&#x2019;ll be using these directly, ever.</em></p> <h1 id="mathimul"><code class="md-code md-code-inline">Math.imul</code></h1> <p>Returns the result of a C-like 32-bit multiplication.</p> <h1 id="mathfround"><code class="md-code md-code-inline">Math.fround</code></h1> <p>Rounds <code class="md-code md-code-inline">value</code> to the nearest 32-bit float representation of a number.</p> <h1 id="conclusions">Conclusions</h1> <p>Some nice methods rounding out the <code class="md-code md-code-inline">Math</code> API. It would&#x2019;ve been nice to see additions to the tune of more flavors of <code class="md-code md-code-inline">Math.random</code> and similar utilities that end up being implemented by libraries in almost every large-enough application, such as Lodash&#x2019;es <a href="https://lodash.com/docs#random" target="_blank" aria-label="_.random([min=0], [max=1], [floating]) on Lodash documentation"><code class="md-code md-code-inline">_.random</code></a> and <a href="https://lodash.com/docs#shuffle" target="_blank" aria-label="_.shuffle(collection) on Lodash documentation"><code class="md-code md-code-inline">_.shuffle</code></a>.</p> <p>That being said, any help towards making <a href="http://asmjs.org/faq.html" target="_blank" aria-label="asm.js frequently asked questions"><code class="md-code md-code-inline">asm.js</code></a> faster and more of a reality are desperately welcome additions to the language.</p></div>
