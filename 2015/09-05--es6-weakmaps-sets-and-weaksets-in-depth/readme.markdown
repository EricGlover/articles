<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth"><div><img src="https://i.imgur.com/S4OKmzM.jpg" alt="ES6 WeakMaps, Sets, and WeakSets in Depth"></div></a>

<h1>ES6 WeakMaps, Sets, and WeakSets in Depth</h1>

<p><kbd>es6</kbd> <kbd>maps</kbd> <kbd>weakmaps</kbd> <kbd>sets</kbd> <kbd>weaksets</kbd> <kbd>es6-in-depth</kbd></p>

<blockquote><p>Welcome once again to <a href="https://ponyfoo.com/articles/tagged/es6-in-depth">ES6 &#x2013; <em>&#x201C;I can&#x2019;t take this anymore&#x201D;</em> &#x2013; in Depth</a>. New here? Start with <a href="https://ponyfoo.com/articles/a-brief-history-of-es6-tooling">A Brief History of ES6 Tooling</a>. Then, make &#x2026;</p></blockquote>

<div><p>Welcome once again to <a href="https://ponyfoo.com/articles/tagged/es6-in-depth">ES6 &#x2013; <em>&#x201C;I can&#x2019;t take this anymore&#x201D;</em> &#x2013; in Depth</a>. New here? Start with <a href="https://ponyfoo.com/articles/a-brief-history-of-es6-tooling">A Brief History of ES6 Tooling</a>. Then, make your way through <a href="https://ponyfoo.com/articles/es6-destructuring-in-depth">destructuring</a>, <a href="https://ponyfoo.com/articles/es6-template-strings-in-depth">template literals</a>, <a href="https://ponyfoo.com/articles/es6-arrow-functions-in-depth">arrow functions</a>, the <a href="https://ponyfoo.com/articles/es6-spread-and-butter-in-depth">spread operator and rest parameters</a>, improvements coming to <a href="https://ponyfoo.com/articles/es6-object-literal-features-in-depth">object literals</a>, the new <a href="https://ponyfoo.com/articles/es6-classes-in-depth"><em>classes</em></a> sugar on top of prototypes, <a href="https://ponyfoo.com/articles/es6-let-const-and-temporal-dead-zone-in-depth"><code class="md-code md-code-inline">let</code>, <code class="md-code md-code-inline">const</code>, and the <em>&#x201C;Temporal Dead Zone&#x201D;</em></a>, <a href="https://ponyfoo.com/articles/es6-iterators-in-depth">iterators</a>, <a href="https://ponyfoo.com/articles/es6-generators-in-depth">generators</a>, <a href="https://ponyfoo.com/articles/es6-symbols-in-depth">Symbols</a> and <a href="https://ponyfoo.com/articles/es6-maps-in-depth">Maps</a>. This morning we&#x2019;ll be discussing three more collection data structures coming in ES6: <code class="md-code md-code-inline">WeakMap</code>, <code class="md-code md-code-inline">Set</code> and <code class="md-code md-code-inline">WeakSet</code>.</p></div>

<blockquote></blockquote>

<div><blockquote> <p>Like I did in previous articles on the series, I would love to point out that you should probably <a href="https://ponyfoo.com/articles/universal-react-babel#setting-up-babel">set up Babel</a> and follow along the examples with either a REPL or the <code class="md-code md-code-inline">babel-node</code> CLI and a file. That&#x2019;ll make it so much easier for you to <strong>internalize the concepts</strong> discussed in the series. If you aren&#x2019;t the <em>&#x201C;install things on my computer&#x201D;</em> kind of human, you might prefer to hop on <a href="http://codepen.io/" target="_blank">CodePen</a> and then click on the gear icon for JavaScript &#x2013; <em>they have a Babel preprocessor which makes trying out ES6 a breeze.</em> Another alternative that&#x2019;s also quite useful is to use Babel&#x2019;s <a href="http://babeljs.io/repl/" target="_blank">online REPL</a> <em>&#x2013; it&#x2019;ll show you compiled ES5 code to the right of your ES6 code for quick comparison.</em></p> </blockquote> <p>Before getting into it, let me <a href="https://www.patreon.com/bevacqua" target="_blank"><em>shamelessly ask for your support</em></a> if you&#x2019;re enjoying my <a href="https://ponyfoo.com/articles/tagged/es6-in-depth">ES6 in Depth</a> series. Your contributions will go towards helping me keep up with the schedule, server bills, keeping me fed, and maintaining <strong>Pony Foo</strong> as a veritable source of JavaScript goodies.</p> <p>Thanks for reading that, and let&#x2019;s go into collections now! For a bit of context, you may want to check out the article on <a href="https://ponyfoo.com/articles/es6-iterators-in-depth">iterators</a> <em>&#x2013; which are closely related to ES6 collections &#x2013;</em> and the one on <a href="https://ponyfoo.com/articles/es6-spread-and-butter-in-depth">spread and rest parameters</a>.</p> <blockquote> <p>Now, let&#x2019;s pick up <a href="https://ponyfoo.com/articles/es6-maps-in-depth">where we left off</a> &#x2013; it&#x2019;s time for <code class="md-code md-code-inline">WeakMap</code>.</p> </blockquote></div>

<div><h1 id="es6-weakmaps">ES6 WeakMaps</h1> <p>You can think of <code class="md-code md-code-inline">WeakMap</code> as a subset of <a href="https://ponyfoo.com/articles/es6-maps-in-depth" aria-label="ES6 Maps in Depth on Pony Foo"><code class="md-code md-code-inline">Map</code></a>. There are a few limitations on <code class="md-code md-code-inline">WeakMap</code> that we didn&#x2019;t find in <code class="md-code md-code-inline">Map</code>. The biggest limitation is that <code class="md-code md-code-inline">WeakMap</code> is not iterable, as opposed to <code class="md-code md-code-inline">Map</code> &#x2013; that means there is no <a href="https://ponyfoo.com/articles/es6-iterators-in-depth" aria-label="ES6 Iterators in Depth on Pony Foo"><em>iterable</em></a> protocol, no <code class="md-code md-code-inline">.entries()</code>, no <code class="md-code md-code-inline">.keys()</code>, no <code class="md-code md-code-inline">.values()</code>, no <code class="md-code md-code-inline">.forEach()</code> and no <code class="md-code md-code-inline">.clear()</code>.</p> <p>Another <em>&#x201C;limitation&#x201D;</em> found in <code class="md-code md-code-inline">WeakMap</code> as opposed to <code class="md-code md-code-inline">Map</code> is that every <code class="md-code md-code-inline">key</code> must be an object, and <strong>value types are not admitted as keys</strong>. Note that <code class="md-code md-code-inline">Symbol</code> is a value type as well, and they&#x2019;re not allowed either.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> map = <span class="md-code-keyword">new</span> WeakMap()
map.set(<span class="md-code-number">1</span>, <span class="md-code-number">2</span>)
<span class="md-code-comment">// TypeError: 1 is not an object!</span>
map.set(Symbol(), <span class="md-code-number">2</span>)
<span class="md-code-comment">// TypeError: Invalid value used as weak map key</span>
</code></pre> <blockquote> <p>This is more of a feature than an issue, though, as it enables map keys to be garbage collected when they&#x2019;re only being referenced as <code class="md-code md-code-inline">WeakMap</code> keys. Usually you want this behavior when storing metadata related to something like a DOM node, and now you can keep that metadata in a <code class="md-code md-code-inline">WeakMap</code>. If you want all of those you could always <a href="https://ponyfoo.com/articles/es6-maps-in-depth" aria-label="ES6 Maps in Depth on Pony Foo">use a regular <code class="md-code md-code-inline">Map</code> as we explored earlier</a>.</p> </blockquote> <p>You are still able to pass an iterable to populate a <code class="md-code md-code-inline">WeakMap</code> through its constructor.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> map = <span class="md-code-keyword">new</span> WeakMap([[<span class="md-code-keyword">new</span> <span class="md-code-built_in">Date</span>(), <span class="md-code-string">&apos;foo&apos;</span>], [() =&gt; <span class="md-code-string">&apos;bar&apos;</span>, <span class="md-code-string">&apos;baz&apos;</span>]])
</code></pre> <p>Just like with <code class="md-code md-code-inline">Map</code>, you can use <code class="md-code md-code-inline">.has</code>, <code class="md-code md-code-inline">.get</code>, and <code class="md-code md-code-inline">.delete</code> too.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> date = <span class="md-code-keyword">new</span> <span class="md-code-built_in">Date</span>()
<span class="md-code-keyword">var</span> map = <span class="md-code-keyword">new</span> WeakMap([[date, <span class="md-code-string">&apos;foo&apos;</span>], [() =&gt; <span class="md-code-string">&apos;bar&apos;</span>, <span class="md-code-string">&apos;baz&apos;</span>]])
<span class="md-code-built_in">console</span>.log(map.has(date))
<span class="md-code-comment">// &lt;- true</span>
<span class="md-code-built_in">console</span>.log(map.get(date))
<span class="md-code-comment">// &lt;- &apos;foo&apos;</span>
map.delete(date)
<span class="md-code-built_in">console</span>.log(map.has(date))
<span class="md-code-comment">// &lt;- false</span>
</code></pre> <h2 id="is-this-a-strictly-worse-map">Is This a Strictly Worse Map?</h2> <p>I know! You must be wondering &#x2013; why the hell would I use <code class="md-code md-code-inline">WeakMap</code> when it has so many limitations when compared to <code class="md-code md-code-inline">Map</code>?</p> <p>The difference that may make <code class="md-code md-code-inline">WeakMap</code> worth it is in its name. <code class="md-code md-code-inline">WeakMap</code> holds references to its keys <em>weakly</em>, meaning that if there are no other references to one of its keys, the object is subject to <strong>garbage collection</strong>.</p> <p>Use cases for <code class="md-code md-code-inline">WeakMap</code> generally revolve around the need to specify metadata or extend an object while still being able to garbage collect it if nobody else cares about it. A perfect example might be the underlying implementation for <a href="https://iojs.org/api/process.html#process_event_unhandledrejection" target="_blank" aria-label="Node.js Documentation for &apos;unhandledRejection&apos; process event"><code class="md-code md-code-inline">process.on(&apos;unhandledRejection&apos;)</code></a> which <a href="https://github.com/petkaantonov/io.js/commit/f46874357ee7b909ae54304c6791f2a4baddf613#diff-6ff379484cbabad48301d485db111c08R269" target="_blank" aria-label="node: implement unhandled rejection tracking">uses a <code class="md-code md-code-inline">WeakMap</code></a> to keep track of promises that were rejected but <em>no error handlers dealt with the rejection</em> within a tick.</p> <p>Keeping data about DOM elements that should be released from memory when they&#x2019;re no longer of interest is another very important use case, and in this regard using <code class="md-code md-code-inline">WeakMap</code> is probably an even better solution to the DOM-related <a href="https://ponyfoo.com/articles/es6-maps-in-depth#hash-maps-and-the-dom" aria-label="Hash-Maps and the DOM">API caching solution</a> we wrote about earlier using <code class="md-code md-code-inline">Map</code>.</p> <p>In so many words then, <strong>no</strong>. <code class="md-code md-code-inline">WeakMap</code> is not strictly worse than <code class="md-code md-code-inline">Map</code> <em>&#x2013; they just cater to different use cases.</em></p> <h2 id="es6-sets">ES6 Sets</h2> <p>Sets are <em>yet another</em> collection type in ES6. Sets are <em>very</em> similar to <code class="md-code md-code-inline">Map</code>. To wit:</p> <ul> <li><code class="md-code md-code-inline">Set</code> is also <a href="https://ponyfoo.com/articles/es6-iterators-in-depth" aria-label="ES6 Iterators in Depth on Pony Foo"><em>iterable</em></a></li> <li><code class="md-code md-code-inline">Set</code> constructor also accepts an <em>iterable</em></li> <li><code class="md-code md-code-inline">Set</code> also has a <code class="md-code md-code-inline">.size</code> property</li> <li>Keys can also be arbitrary values</li> <li>Keys must be unique</li> <li><code class="md-code md-code-inline">NaN</code> equals <code class="md-code md-code-inline">NaN</code> when it comes to <code class="md-code md-code-inline">Set</code> too</li> <li>All of <code class="md-code md-code-inline">.keys</code>, <code class="md-code md-code-inline">.values</code>, <code class="md-code md-code-inline">.entries</code>, <code class="md-code md-code-inline">.forEach</code>, <del><code class="md-code md-code-inline">.get</code></del>, <del><code class="md-code md-code-inline">.set</code></del>, <code class="md-code md-code-inline">.has</code>, <code class="md-code md-code-inline">.delete</code>, and <code class="md-code md-code-inline">.clear</code></li> </ul> <p>However, there&#x2019;s a few differences as well!</p> <ul> <li>Sets only have <code class="md-code md-code-inline">values</code></li> <li>No <code class="md-code md-code-inline">set.get</code> &#x2013; but <strong>why</strong> would you want <code class="md-code md-code-inline">get(value) =&gt; value</code>?</li> <li>Having <code class="md-code md-code-inline">set.set</code> would be weird, so we have <code class="md-code md-code-inline">set.add</code> instead</li> <li><code class="md-code md-code-inline">set[Symbol.iterator] !== set.entries</code></li> <li><code class="md-code md-code-inline">set[Symbol.iterator] === set.values</code></li> <li><code class="md-code md-code-inline">set.keys === set.values</code></li> <li><code class="md-code md-code-inline">set.entries()</code> returns an iterator on a sequence of items like <code class="md-code md-code-inline">[value, value]</code></li> </ul> <p>In the example below you can note how it takes an iterable with duplicate values, it can be spread over an <code class="md-code md-code-inline">Array</code> using the <a href="https://ponyfoo.com/articles/es6-spread-and-butter-in-depth" aria-label="ES6 Spread and Butter in Depth on Pony Foo">spread operator</a>, and how the duplicate value <em>has been ignored</em>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> set = <span class="md-code-keyword">new</span> Set([<span class="md-code-number">1</span>, <span class="md-code-number">2</span>, <span class="md-code-number">3</span>, <span class="md-code-number">4</span>, <mark class="md-mark md-code-mark">4</mark>])
<span class="md-code-built_in">console</span>.log([...set])
<span class="md-code-comment">// &lt;- <mark class="md-mark md-code-mark">[1, 2, 3, 4]</mark></span>
</code></pre> <p>Sets may be a great alternative to work with DOM elements. The following piece of code creates a <code class="md-code md-code-inline">Set</code> with all the <code class="md-code md-code-inline">&lt;div&gt;</code> elements on a page and then prints how many it found. Then, we query the DOM <em>again</em> and call <code class="md-code md-code-inline">set.add</code> again for every DOM element. Since they&#x2019;re all already in the <code class="md-code md-code-inline">set</code>, the <code class="md-code md-code-inline">.size</code> property won&#x2019;t change, meaning the <code class="md-code md-code-inline">set</code> remains the same.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">divs</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">return</span> <mark class="md-mark md-code-mark">[...document.querySelectorAll(<span class="md-code-string">&apos;div&apos;</span>)]</mark>
}
<span class="md-code-keyword">var</span> set = <span class="md-code-keyword">new</span> Set(<mark class="md-mark md-code-mark">divs()</mark>)
<span class="md-code-built_in">console</span>.log(set.size)
<span class="md-code-comment">// &lt;- 56</span>
<mark class="md-mark md-code-mark">divs().forEach(div =&gt; set.add(div))</mark>
<span class="md-code-built_in">console</span>.log(set.size)
<span class="md-code-comment">// &lt;- 56</span>
<span class="md-code-comment">// &lt;- look at that, no duplicates!</span>
</code></pre> <h1 id="es6-weaksets">ES6 WeakSets</h1> <p>Much like with <code class="md-code md-code-inline">WeakMap</code> and <code class="md-code md-code-inline">Map</code>, <code class="md-code md-code-inline">WeakSet</code> is <strong><code class="md-code md-code-inline">Set</code> plus weakness</strong> minus the <em>iterability</em> <em>&#x2013; I just made that term up, didn&#x2019;t I?</em></p> <p>That means you can&#x2019;t iterate over <code class="md-code md-code-inline">WeakSet</code>. Its values must be <strong>unique object references</strong>. If nothing else is referencing a <code class="md-code md-code-inline">value</code> found in a <code class="md-code md-code-inline">WeakSet</code>, it&#x2019;ll be subject to garbage collection.</p> <p>Much like in <code class="md-code md-code-inline">WeakMap</code>, you can only <code class="md-code md-code-inline">.add</code>, <code class="md-code md-code-inline">.has</code>, and <code class="md-code md-code-inline">.delete</code> values from a <code class="md-code md-code-inline">WeakSet</code>. And just like in <code class="md-code md-code-inline">Set</code>, there&#x2019;s no <code class="md-code md-code-inline">.get</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> set = <span class="md-code-keyword">new</span> WeakSet()
set.add({})
set.add(<span class="md-code-keyword">new</span> <span class="md-code-built_in">Date</span>())
</code></pre> <p>As we know, we can&#x2019;t use primitive values.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> set = <span class="md-code-keyword">new</span> WeakSet()
set.add(Symbol())
<span class="md-code-comment">// TypeError: invalid value used in weak set</span>
</code></pre> <p>Just like with <code class="md-code md-code-inline">WeakMap</code>, passing iterators to the constructor is still allowed even though a <code class="md-code md-code-inline">WeakSet</code> instance is not iterable itself.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> set = <span class="md-code-keyword">new</span> WeakSet([<span class="md-code-keyword">new</span> <span class="md-code-built_in">Date</span>(), {}, () =&gt; {}, [<span class="md-code-number">1</span>]])
</code></pre> <p>Use cases for <code class="md-code md-code-inline">WeakSet</code> vary, and here&#x2019;s one from <a href="https://esdiscuss.org/topic/actual-weakset-use-cases#content-1" target="_blank" aria-label="Actual WeakSet Use Cases on ES Discuss">a thread on <em>es-discuss</em></a> &#x2013; the mailing list for the ECMAScript-262 specification of JavaScript.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">const</span> foos = <span class="md-code-keyword">new</span> WeakSet()
<span class="md-code-keyword">class</span> Foo {
  constructor() {
    <mark class="md-mark md-code-mark">foos.add(<span class="md-code-keyword">this</span>)</mark>
  }
  method () {
    <span class="md-code-keyword">if</span> (!<mark class="md-mark md-code-mark">foos.has(<span class="md-code-keyword">this</span>)</mark>) {
      <span class="md-code-keyword">throw</span> <span class="md-code-keyword">new</span> <span class="md-code-built_in">TypeError</span>(<span class="md-code-string">&apos;Foo.prototype.method called on incompatible object!&apos;</span>)
    }
  }
}
</code></pre> <p>As a general rule of thumb, you can also try and figure out whether a <code class="md-code md-code-inline">WeakSet</code> will do when you&#x2019;re considering to use a <code class="md-code md-code-inline">WeakMap</code> as some use cases may overlap. Particularly, if all you need to check for is whether a reference value is in the <code class="md-code md-code-inline">WeakSet</code> or not.</p> <blockquote> <p>Next week we&#x2019;ll be having <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" aria-label="Proxy Objects in ES6 on MDN"><code class="md-code md-code-inline">Proxy</code></a> for brunch :)</p> </blockquote></div>
