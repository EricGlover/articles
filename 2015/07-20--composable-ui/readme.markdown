<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/composable-ui">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/composable-ui"><div></div></a>

<h1><p>Composable UI</p></h1>

<p><kbd>javascript</kbd> <kbd>composition</kbd> <kbd>modules</kbd> <kbd>architecture</kbd></p>

<blockquote><p>Most often, web UI libraries fall under one of two categories. They may be part of a <em>&#x201C;framework&#x201D;</em>, or a grouping of UI components that <strong>share an appearance, &#x2026;</strong></p></blockquote>

<div><p>Most often, web UI libraries fall under one of two categories. They may be part of a <em>&#x201C;framework&#x201D;</em>, or a grouping of UI components that <strong>share an appearance, a similar API, or are otherwise cohesive</strong>. Another category is usually the <em>standalone</em> library. Regardless of whether a standalone library depends on jQuery <em>(I&#x2019;m singling out this scenario because of its prevalence)</em>, they aren&#x2019;t directly related to other UI components, which means <strong>they set their own terms</strong> with regard to API, appearance, and other conventions. Components that are part of a framework are <em>usually hard to integrate</em> with anything that&#x2019;s not part of said framework, resulting in vendor lock-in. Components that aren&#x2019;t part of a framework tend to be easier to integrate with other things, but most often they&#x2019;re <em>not designed</em> to that effect. <mark class="md-mark"><strong>Composability</strong> is a much better alternative, and something we&#x2019;ll explore in depth in this article</mark>.</p></div>

<div></div>

<div><blockquote> <p>Before I go any further, <a href="https://github.com/bevacqua/dragula" target="_blank"><code class="md-code md-code-inline">dragula</code></a> now has over 7500 stars on GitHub and was even featured on <a href="http://thenextweb.com/dd/2015/07/20/less-of-a-drag-maaaaaaaan/" target="_blank">The Next Web</a>! <em>I&#x2019;ll need a few moments</em> to wrap my head around <strong>that</strong>! Wow.</p> <p>If you&#x2019;ve never seen <code class="md-code md-code-inline">dragula</code>, <a href="http://bevacqua.github.io/dragula/" target="_blank">check out the demo</a> to get an idea of what it does.</p> </blockquote> <p>Instead of having an autocomplete, a drop down list, a combo box, and a select box, it&#x2019;s nice when you can <a href="https://github.com/bevacqua/horsey" target="_blank">do all of that with a single component</a>. That&#x2019;s <em>reusability</em>, you get to use the same component for many different use cases. Another form of reusability is <strong>composability</strong>, <em>the ability to integrate a few different components into a cohesive user experience</em>. It&#x2019;s an often overlooked factor when developing UI components, but I think <strong>good UI components must be highly composable</strong>.</p> <p>Composability can also go the opposite direction. Some programs are notoriously modular, and it gets quite a few bits and pieces <em>(otherwise called &#x201C;modules&#x201D;)</em> to get to something that &#x201C;works&#x201D;. One such example is <a href="https://github.com/bevacqua/woofmark" target="_blank"><code class="md-code md-code-inline">woofmark</code></a>. This library provides an editor on top of browser HTML <code class="md-code md-code-inline">&lt;textarea&gt;</code> elements. I&#x2019;m not using <code class="md-code md-code-inline">woofmark</code> on ponyfoo quite yet, because I haven&#x2019;t had the time to integrate it here, but I did implement some of the underlying modules. For instance, <code class="md-code md-code-inline">woofmark</code> uses <code class="md-code md-code-inline">megamark</code> under the hood to parse Markdown strings into HTML strings. <a href="https://github.com/bevacqua/megamark" target="_blank">Megamark</a> is really an abstraction layer on top of <a href="https://github.com/markdown-it/markdown-it" target="_blank"><code class="md-code md-code-inline">markdown-it</code></a>, which <strong>adds a couple of minor niceties</strong> such as <em>syntax highlighting</em> in code blocks, and the ability to use <kbd>&lt;mark&gt;</kbd> DOM elements to <mark class="md-mark">highlight a <em>&#x201C;fancy&#x201D;</em> piece of text</mark>. Woofmark also uses <a href="https://github.com/bevacqua/domador" target="_blank"><code class="md-code md-code-inline">domador</code></a> to convert DOM trees or HTML strings back to Markdown, and that has a extensibility structure in place allowing one to extend their understanding of how HTML should be converted into Markdown. If you had custom <em>Markdown -&gt; HTML</em> directives, it&#x2019;s only logical that you implement the reverse for a <em>HTML -&gt; Markdown</em> conversion. With all this converting going on, it&#x2019;s probably <a href="https://github.com/bevacqua/insane" target="_blank"><code class="md-code md-code-inline">insane</code></a> to try and sanitize the inputs and outputs on your own, so a specialized library takes care of sanitization at the HTML level.</p> <p>I&#x2019;ve already mentioned a few modules, each in charge of a different portion of the rich-editing experience in <a href="https://github.com/bevacqua/woofmark" target="_blank"><code class="md-code md-code-inline">woofmark</code></a>. Here&#x2019;s a list of the modules I&#x2019;ve mentioned, plus a few others even deeper in the dependency chain.</p> <ul> <li><a href="https://github.com/markdown-it/markdown-it" target="_blank"><code class="md-code md-code-inline">markdown-it</code></a> is one of the <strong>lowest-level</strong> modules used in this use case, and it parses <mark class="md-mark"><a href="http://commonmark.org/" target="_blank">CommonMark</a>-compliant</mark> markdown into HTML strings</li> <li><a href="https://github.com/bevacqua/megamark" target="_blank"><code class="md-code md-code-inline">megamark</code></a> is a wrapper around <code class="md-code md-code-inline">markdown-it</code> which ties it with <a href="https://highlightjs.org/" target="_blank"><code class="md-code md-code-inline">highlight.js</code></a>, a syntax highlighting module and <a href="https://github.com/bevacqua/insane" target="_blank"><code class="md-code md-code-inline">insane</code></a>, the HTML sanitizer</li> <li><a href="https://github.com/bevacqua/domador" target="_blank"><code class="md-code md-code-inline">domador</code></a> <em>parses HTML or DOM nodes back into Markdown</em>, and can be extended to match the extensions provided to <code class="md-code md-code-inline">megamark</code>, so that <mark class="md-mark">the output stays consistent both ways</mark></li> <li><a href="https://github.com/bevacqua/woofmark" target="_blank"><code class="md-code md-code-inline">woofmark</code></a> ties everything together and provides a nice <code class="md-code md-code-inline">&lt;textarea&gt;</code> upgrade that allows entering Markdown, HTML, and WYSIWYG input in exchange for plain Markdown</li> <li>Plenty of other low-level modules are at work, such as <a href="https://github.com/bevacqua/crossvent" target="_blank"><code class="md-code md-code-inline">crossvent</code></a> for dealing with DOM events in a cross-browser manner; <a href="https://github.com/mathiasbynens/he" target="_blank"><code class="md-code md-code-inline">he</code></a>, which deals with unicode; and <a href="https://github.com/tmpvar/jsdom" target="_blank"><code class="md-code md-code-inline">jsdom</code></a>, which deals with creating a <code class="md-code md-code-inline">window</code> context on the server-side; and <strong>many others</strong></li> </ul> <p>As you can probably imagine, trying and cramming all of this functionality into a single module would be a dreadful endeavour, not to mention <strong>a waste of productivity, time, and hence, <em>ultimately</em>, money</strong>. In contrast, keeping the functionality in separate modules enables us to reuse them across our stack, across our projects, and out on the open-source world, where <mark class="md-mark">people find it way easier to contribute patches</mark> if the code is small, self-contained, and <em>does one thing well</em>.</p></div>

<div><p><a href="http://bevacqua.github.io/woofmark" target="_blank" aria-label="Woofmark demo on GitHub pages"><img alt="woofmark demo" class="" src="https://i.imgur.com/Ytl1gCu.png"></a></p> <p>The example shown above is <a href="http://bevacqua.github.io/woofmark" target="_blank" aria-label="Woofmark demo on GitHub pages"><code class="md-code md-code-inline">woofmark</code></a>, and <em>it <strong>underscores</strong> just how useful composability can be</em>. I&#x2019;ve developed <code class="md-code md-code-inline">woofmark</code> for <a href="http://stompflow.com/" target="_blank" aria-label="Stompflow: Hassle-free project management">Stompflow.com</a>, as to build upon the Markdown editor that&#x2019;s available here on <em>Pony Foo</em>. <mark class="md-mark">Woofmark provides the <em>added benefit</em> of being able to interpret HTML and WYSIWYG</mark> as well, which shouldn&#x2019;t be understated. Meanwhile, however, I&#x2019;m able to use the Markdown parser on <em>Pony Foo</em>, even though it was originally built for Woofmark and <a href="http://stompflow.com/" target="_blank" aria-label="Stompflow: Hassle-free project management">Stompflow</a>. Thanks to loose coupling, and since <strong>it wasn&#x2019;t built into the editor</strong>, I can get away with using it elsewhere.</p> <p>If this was a monolithic framework for <em>Markdown, HTML, and WYSIWYG editing</em>, I would have, in contrast, a terribly large code base, much larger than that of <code class="md-code md-code-inline">woofmark</code> <em>(which I already consider monolithic!)</em>, with a few added drawbacks.</p> <ul> <li>I wouldn&#x2019;t be able to use <a href="https://github.com/bevacqua/insane" target="_blank" aria-label="bevacqua/insane on GitHub"><code class="md-code md-code-inline">insane</code></a> as a general-purpose lightweight HTML sanitizer</li> <li>I wouldn&#x2019;t be able to use <a href="https://github.com/bevacqua/megamark" target="_blank" aria-label="bevacqua/megamark on GitHub"><code class="md-code md-code-inline">megamark</code></a> on the server-side to produce the same HTML output that the client-side displays</li> <li>I would have to implement something like <a href="https://github.com/bevacqua/crossvent" target="_blank" aria-label="bevacqua/crossvent on GitHub"><code class="md-code md-code-inline">crossvent</code></a> everywhere I want to deal with DOM events, unless I&#x2019;m willing to drop <a href="http://jquery.com/" target="_blank" aria-label="jQuery: write more, do less">jQuery</a> into everything I develop</li> <li>I wouldn&#x2019;t even know where to start poking at <a href="https://github.com/tmpvar/jsdom" target="_blank" aria-label="tmpvar/jsdom on GitHub"><code class="md-code md-code-inline">jsdom</code></a>, which is immensely huge in terms of a web browser, but only used server-side</li> <li>I wouldn&#x2019;t be able to use any of these modules across multiple code-bases, unless I did lots of copy-pasting and <em>ignored the benefits of having bugs fixed on a global scale</em></li> </ul> <p>Sharing code across multiple projects, or even just <a href="http://nodejs.org/" target="_blank" aria-label="nodejs.org">Node.js</a> and the browser, is too big of a productivity boost to oversight. Yet, the most of us are still not buying into modular development because <em>&#x201C;the asking price&#x201D;</em> is too high to get in the front door, but <mark class="md-mark">in reality we&#x2019;re missing out on being that much more productive in the long term</mark>.</p> <h1 id="tag-and-drop">Tag and Drop</h1> <p>Consider the example below, where we use <a href="https://github.com/bevacqua/dragula" target="_blank" aria-label="bevacqua/dragula on GitHub">dragula</a>, <em>a drag and drop library</em>; and <a href="https://github.com/bevacqua/insignia" target="_blank" aria-label="bevacqua/insignia on GitHub">insignia</a>, a tag editing input enhancement, to provide a highly usable tag editing experience. Contrary to <code class="md-code md-code-inline">woofmark</code> and many of the modules that surround it, <strong>neither of these libraries where designed with each other in mind</strong>. Composability was, however, considered when designing both of them. In the case of <code class="md-code md-code-inline">insignia</code>, this simply meant allowing the consumer to start off with an <code class="md-code md-code-inline">&lt;input/&gt;</code> element that may contain space-separated tags. Once JavaScript kicks in, <code class="md-code md-code-inline">insignia</code> converts those tags into pretty DOM elements that can be styled and whatnot. This allows the <code class="md-code md-code-inline">insignia</code>-consuming application to function even when <code class="md-code md-code-inline">insignia</code> fails to load: <em>a minimal <code class="md-code md-code-inline">&lt;input/&gt;</code> element with some tags in it will still be available</em>.</p> <p>In the simplest of cases, <code class="md-code md-code-inline">insignia</code> converts the <code class="md-code md-code-inline">value</code> to tags and takes over user input by binding a flurry of keyboard event listeners on <code class="md-code md-code-inline">input</code>. Note how simplistic the API is at this level.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">insignia(input);
</code></pre> <p>Of course, you can always rack up complexity, <em>with both <a href="https://github.com/bevacqua/dragula" target="_blank" aria-label="bevacqua/dragula on GitHub"><code class="md-code md-code-inline">dragula</code></a> and <a href="https://github.com/bevacqua/insignia" target="_blank" aria-label="bevacqua/insignia on GitHub"><code class="md-code md-code-inline">insignia</code></a></em>, setting many different <code class="md-code md-code-inline">options</code> and customizing what can be done with them. Keeping down the complexity and progressively increasing the difficulty with which a consumer can customize your component <em>may prove hard</em>, but it&#x2019;s also <a href="https://ponyfoo.com/articles/designing-front-end-components" aria-label="Designing Front-End Components">the best way to deliver an experience</a> that <mark class="md-mark">can be digested over time</mark>. They start out using your <strong>simplest use case</strong>, and then they may <em>discover more advanced use cases</em> as they go over your documentation or keep using the component. This way you keep the barrier of entry low while the usability <em>(and applicability)</em> of your module stays high. Notable examples of this sort of architecture include <a href="https://github.com/mishoo/UglifyJS2" target="_blank" aria-label="mishoo/UglifyJS2 on GitHub"><code class="md-code md-code-inline">uglify-js</code></a>, <a href="https://github.com/substack/tape" target="_blank" aria-label="substack/tape on GitHub"><code class="md-code md-code-inline">tape</code></a>, <a href="https://github.com/substack/node-browserify" target="_blank" aria-label="substack/node-browserify on GitHub"><code class="md-code md-code-inline">browserify</code></a>, and <a href="https://github.com/bevacqua/dragula" target="_blank" aria-label="bevacqua/dragula on GitHub"><code class="md-code md-code-inline">dragula</code></a> <em>(if I may say so myself)</em>, among others.</p> <p><a href="https://github.com/bevacqua/dragula" target="_blank" aria-label="bevacqua/dragula on GitHub">Dragula</a> is an entirely different animal than <a href="https://github.com/bevacqua/insignia" target="_blank" aria-label="bevacqua/insignia on GitHub"><code class="md-code md-code-inline">insignia</code></a>. It&#x2019;s goal is to <del>feed on the blood of others</del> provide a thin interface between humans and the underworld of drag and drop. It doesn&#x2019;t make lots of assumptions about what your use case is, so <strong>it can remain flexible</strong>. <mark class="md-mark">The primary assumption <a href="https://github.com/bevacqua/dragula" target="_blank" aria-label="bevacqua/dragula on GitHub"><code class="md-code md-code-inline">dragula</code></a> makes is that you probably want to be able to drag things between one or more <em>containers</em></mark>. These containers, <code class="md-code md-code-inline">dragula</code> asserts, will have any quantity of top-level children waiting to be dragged away and dropped somewhere else. Or in <em>the same</em> container, providing the ability to re-order elements within a container. This effectively covers most use cases, there&#x2019;s many other things you could do with <code class="md-code md-code-inline">dragula</code>, but for the main use case, it <em>feels too good to be <code class="md-code md-code-inline">true</code></em>:</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">dragula(<mark class="md-mark md-code-mark">[container1, container2, container3]</mark>);
</code></pre> <p>Now you&#x2019;re able to drag any top-level children of <code class="md-code md-code-inline">container1</code>, <code class="md-code md-code-inline">container2</code>, and <code class="md-code md-code-inline">container3</code>, and drop them back onto any of those containers.</p> <p><a href="http://bevacqua.github.io/dragula" target="_blank" aria-label="Dragula on GitHub Pages"><img alt="Screenshot of demo page for Dragula on GitHub Pages" class="" src="https://i.imgur.com/9qZOsZi.png"></a></p> <p><a href="https://github.com/bevacqua/insignia" target="_blank" aria-label="bevacqua/insignia on GitHub">Insignia</a> has a constraint, it demands that the consumer places their <code class="md-code md-code-inline">&lt;input/&gt;</code> as the single child of another DOM element. That <code class="md-code md-code-inline">&lt;input/&gt;</code> then gets <code class="md-code md-code-inline">&lt;span&gt;</code> siblings on both sides, where the tags are placed. The reason for this constraint is that it translates into a benefit that, on its own, <strong>justifies choosing <a href="https://github.com/bevacqua/insignia" target="_blank" aria-label="bevacqua/insignia on GitHub"><code class="md-code md-code-inline">insignia</code></a> over any other tag editing library out there</strong>: the ability to seamlessly move between tags simply by using the arrow keys, without flickering or stuttering.</p> <p>When the user wants to navigate to any given tag, every tag between the <code class="md-code md-code-inline">&lt;input/&gt;</code> and that tag is moved out of the way. Consider the following example, where the user clicked on the <mark class="md-mark">highlighted</mark> <code class="md-code md-code-inline">[tag]</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-xml">[tag] <mark class="md-mark md-code-mark">[tag]</mark> [tag] <span class="md-code-tag">&lt;<span class="md-code-title">input</span>/&gt;</span> [tag] [tag]
</code></pre> <p>In this case, every tag to the right of <code class="md-code md-code-inline"><mark class="md-mark md-code-mark">[tag]</mark></code> that&#x2019;s not already on the right of the input is moved to the right. Then the highlighted <code class="md-code md-code-inline">[tag]</code> gets removed, and the input assumes it&#x2019;s value. This sounds highly invasive, but in reality it&#x2019;s exactly the opposite. Focus never leaves the <code class="md-code md-code-inline">&lt;input/&gt;</code>, and thus is never lost, which is really important when trying to improve the rudimentary <em>(yet reasonable, and often underestimated)</em> UX of entering tags by typing some text into an <code class="md-code md-code-inline">&lt;input/&gt;</code> field.</p> <p>Besides meaning that the UX provided by <a href="https://github.com/bevacqua/insignia" target="_blank" aria-label="bevacqua/insignia on GitHub"><code class="md-code md-code-inline">insignia</code></a> is actually worthwhile,<sup>*</sup> , the way in which it operates is quite unobtrusive with regards to the DOM, as it doesn&#x2019;t do much more than move <em>(or add)</em> elements between the two siblings to the <code class="md-code md-code-inline">&lt;input/&gt;</code>. Before going to a demo and showing you how these two libraries work together, look at this piece of code which is all the JavaScript used to tie both pieces of the puzzle together.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> input = <span class="md-code-built_in">document</span>.querySelector(<span class="md-code-string">&apos;.input&apos;</span>);
<span class="md-code-keyword">var</span> result = <span class="md-code-built_in">document</span>.querySelector(<span class="md-code-string">&apos;.result&apos;</span>);
<span class="md-code-keyword">var</span> tags = insignia(input);
<span class="md-code-keyword">var</span> drake = dragula(<mark class="md-mark md-code-mark">{
  delay: <span class="md-code-literal">true</span>,
  direction: <span class="md-code-string">&apos;horizontal&apos;</span>,
  containers: <span class="md-code-built_in">Array</span>.prototype.slice.call(<span class="md-code-built_in">document</span>.querySelectorAll(<span class="md-code-string">&apos;.nsg-tags&apos;</span>))
}</mark>);

input.addEventListener(<span class="md-code-string">&apos;insignia-evaluated&apos;</span>, changed);
drake.on(<span class="md-code-string">&apos;shadow&apos;</span>, changed);
drake.on(<span class="md-code-string">&apos;dragend&apos;</span>, changed);

<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">changed</span> <span class="md-code-params">()</span> </span>{
  result.innerText = result.textContent = tags.value();
}
</code></pre> <p>The highlighted options in <a href="https://github.com/bevacqua/dragula" target="_blank" aria-label="bevacqua/dragula on GitHub"><code class="md-code md-code-inline">dragula</code></a> are needed because:</p> <ul> <li><code class="md-code md-code-inline">delay</code> allows click events to get through before being considered drag events</li> <li><code class="md-code md-code-inline">direction</code> isn&#x2019;t required, but it makes it smoother for <code class="md-code md-code-inline">dragula</code> to figure out where tags should be dropped</li> <li><code class="md-code md-code-inline">containers</code> is just both of the tag containers created by <a href="https://github.com/bevacqua/insignia" target="_blank" aria-label="bevacqua/insignia on GitHub"><code class="md-code md-code-inline">insignia</code></a>, casted to a true array</li> </ul> <p>Whenever a new tag is evaluated by <code class="md-code md-code-inline">insignia</code>, or a drag event ends in <code class="md-code md-code-inline">dragula</code>, the result gets refreshed. Refreshing the result whenever <code class="md-code md-code-inline">dragula</code>&apos;s shadow moves isn&#x2019;t all that necessary, but it does provide <em>an interesting boost to perceived performance</em>!</p> <p data-height="360" data-theme-id="9622" data-slug-hash="oXPgaV" data-default-tab="result" data-user="bevacqua" class="codepen">See the Pen <a href="http://codepen.io/bevacqua/pen/oXPgaV/">Composable UI: Insignia and Dragula</a> by Nicolas Bevacqua (<a href="http://codepen.io/bevacqua">@bevacqua</a>) on <a href="http://codepen.io/">CodePen</a>.</p> <h1 id="tag-completely">Tag Completely</h1> <p>Remember how I bragged about how unobtrusive <a href="https://github.com/bevacqua/insignia" target="_blank" aria-label="bevacqua/insignia on GitHub"><code class="md-code md-code-inline">insignia</code></a> is? It&#x2019;s not just useful for doing things with the elements around it, but you can also get away with relying on the <code class="md-code md-code-inline">&lt;input/&gt;</code> itself not doing anything funky too.</p> <p>In this example, we&#x2019;ll mix <a href="https://github.com/bevacqua/insignia" target="_blank" aria-label="bevacqua/insignia on GitHub"><code class="md-code md-code-inline">insignia</code></a> with <a href="https://github.com/bevacqua/horsey" target="_blank" aria-label="bevacqua/horsey on GitHub"><code class="md-code md-code-inline">horsey</code></a>, a general-purpose autocomplete library that also doubles as a drop-down list <em>(and why not, a <strong>&#x201C;combo-box&#x201D;</strong> too, whatever that may be)</em>. Horsey can be used to add autocompletion features to an <code class="md-code md-code-inline">&lt;input/&gt;</code>, a <code class="md-code md-code-inline">&lt;textarea&gt;</code>, or even to non-input elements like a <code class="md-code md-code-inline">&lt;div&gt;</code>, <em>effectively becoming a drop-down list</em>. Autocompletion is added via a list that can be controlled using the keyboard, just like <a href="https://github.com/bevacqua/insignia" target="_blank" aria-label="bevacqua/insignia on GitHub"><code class="md-code md-code-inline">insignia</code></a>, or by clicking on the suggestions.</p> <p>Rendering the list of suggestions has a default implementation that just takes a string, but you can also use any templating engine you want to render the list items. In the screenshot below, the &#x201C;fruits&#x201D; were rendered by adding an image tag along with the text.</p> <p><a href="http://bevacqua.github.io/horsey" target="_blank" aria-label="horsey on GitHub Pages"><img alt="Suggestions rendered with a fruit by their side" class="" src="https://i.imgur.com/srcrxSY.png"></a></p> <p>The code barely even changes, we&#x2019;re still creating a tag editor with <code class="md-code md-code-inline">insignia(input)</code>, but we&#x2019;re now using <code class="md-code md-code-inline">horsey</code> to add <strong>an autocompletion feature</strong>. Of course, there were some styling changes, but those <em>aren&#x2019;t as interesting</em>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> input = <span class="md-code-built_in">document</span>.querySelector(<span class="md-code-string">&apos;.input&apos;</span>);
<span class="md-code-keyword">var</span> result = <span class="md-code-built_in">document</span>.querySelector(<span class="md-code-string">&apos;.result&apos;</span>);
<span class="md-code-keyword">var</span> tags = insignia(input);

<mark class="md-mark md-code-mark">horsey(input, {
  suggestions: [
    <span class="md-code-string">&apos;here&apos;</span>, <span class="md-code-string">&apos;are&apos;</span>, <span class="md-code-string">&apos;some&apos;</span>, <span class="md-code-string">&apos;tags&apos;</span>,
    <span class="md-code-string">&apos;and&apos;</span>, <span class="md-code-string">&apos;extra&apos;</span>, <span class="md-code-string">&apos;suggestions&apos;</span>,
    <span class="md-code-string">&apos;ponyfoo&apos;</span>, <span class="md-code-string">&apos;dragula&apos;</span>, <span class="md-code-string">&apos;love&apos;</span>,
    <span class="md-code-string">&apos;oss&apos;</span>
  ]
});</mark>

input.addEventListener(<span class="md-code-string">&apos;insignia-evaluated&apos;</span>, changed);
<mark class="md-mark md-code-mark">input.addEventListener(<span class="md-code-string">&apos;horsey-selected&apos;</span>, changed);</mark>

<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">changed</span> <span class="md-code-params">()</span> </span>{
  result.innerText = result.textContent = tags.value();
}
</code></pre> <p>Here you get suggestions on what tags to enter next, and you can also amend a previously entered tag just by opening the autocomplete list and picking a different tag, pretty neat! Again, all of this is possible because <a href="https://github.com/bevacqua/horsey" target="_blank" aria-label="bevacqua/horsey on GitHub"><code class="md-code md-code-inline">horsey</code></a> doesn&#x2019;t take any radical actions on the <code class="md-code md-code-inline">&lt;input/&gt;</code>, it just helps you pick a value and places it&#x2019;s suggestions below the input, but that&#x2019;s it! There&#x2019;s no further DOM alteration coming from <a href="https://github.com/bevacqua/horsey" target="_blank" aria-label="bevacqua/horsey on GitHub"><code class="md-code md-code-inline">horsey</code></a>, which is just what <a href="https://github.com/bevacqua/insignia" target="_blank" aria-label="bevacqua/insignia on GitHub"><code class="md-code md-code-inline">insignia</code></a> needs.</p> <p data-height="340" data-theme-id="9622" data-slug-hash="RPYxKE" data-default-tab="result" data-user="bevacqua" class="codepen">See the Pen <a href="http://codepen.io/bevacqua/pen/RPYxKE/">Composable UI: Insignia and Horsey</a> by Nicolas Bevacqua (<a href="http://codepen.io/bevacqua">@bevacqua</a>) on <a href="http://codepen.io/">CodePen</a>.</p> <h1 id="a-horse-that-mark-barks-mark">A Horse that <mark class="md-mark">Barks</mark></h1> <p>Horsey even works in <code class="md-code md-code-inline">&lt;textarea/&gt;</code> elements, following the caret <strong>(text cursor)</strong> around and whatnot. This makes it the ideal companion to <a href="https://github.com/bevacqua/woofmark" target="_blank" aria-label="bevacqua/woofmark on GitHub"><code class="md-code md-code-inline">woofmark</code></a>, if you have entities you want to hint at: issue references, <em>like <mark class="md-mark">#40</mark></em>; at-mentions, <em>like <mark class="md-mark">@bevacqua</mark></em>; or <em>anything else</em>.</p> <p>While <a href="https://github.com/bevacqua/woofmark" target="_blank" aria-label="bevacqua/woofmark on GitHub"><code class="md-code md-code-inline">woofmark</code></a> is based on legacy code and hence quite abysmal to look at, it does a good job of keeping large chunks of code in other modules. It&#x2019;s up to you to provide a Markdown to HTML parser, as well as an HTML to Markdown parser. Of course, you get recommendations. You should probably use <a href="https://github.com/bevacqua/megamark" target="_blank" aria-label="bevacqua/megamark on GitHub"><code class="md-code md-code-inline">megamark</code></a> as your Markdown parser, and <a href="https://github.com/bevacqua/domador" target="_blank" aria-label="bevacqua/domador on GitHub"><code class="md-code md-code-inline">domador</code></a> as the DOM parser.</p> <p>The code below is what&#x2019;s used in the demo to tie <a href="https://github.com/bevacqua/woofmark" target="_blank" aria-label="bevacqua/woofmark on GitHub"><code class="md-code md-code-inline">woofmark</code></a> and <a href="https://github.com/bevacqua/horsey" target="_blank" aria-label="bevacqua/horsey on GitHub"><code class="md-code md-code-inline">horsey</code></a> together. In the first highlighted block you&#x2019;ll notice that we&#x2019;re using tthe pure <em>&#x201C;distro&#x201D;</em> versions of both <a href="https://github.com/bevacqua/megamark" target="_blank" aria-label="bevacqua/megamark on GitHub"><code class="md-code md-code-inline">megamark</code></a> and <a href="https://github.com/bevacqua/domador" target="_blank" aria-label="bevacqua/domador on GitHub"><code class="md-code md-code-inline">domador</code></a>, although in practice you&#x2019;ll probably want to <em>wrap them</em> in your own methods and <strong>customize their behavior</strong>. Since we&#x2019;re using the distros, <strong>we&#x2019;ll just turn off fencing</strong>, the ability to parse triple <mark class="md-mark"><strong>```</strong></mark> backticks back and forth. Otherwise, we would have to add some more code to detect the programming language when parsing HTML back into Markdown. <em>Not something we want to do for a simple demo.</em></p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> textarea = <span class="md-code-built_in">document</span>.querySelector(<span class="md-code-string">&apos;.textarea&apos;</span>);
<span class="md-code-keyword">var</span> editor = woofmark(textarea, <mark class="md-mark md-code-mark">{
  parseMarkdown: megamark,
  parseHTML: domador,
  fencing: <span class="md-code-literal">false</span>
}</mark>);

horsey(textarea, {
  suggestions: [
    <span class="md-code-string">&apos;@bevacqua&apos;</span>, <span class="md-code-string">&apos;@ponyfoo&apos;</span>,
    <span class="md-code-string">&apos;@buildfirst&apos;</span>, <span class="md-code-string">&apos;@stompflow&apos;</span>,
    <span class="md-code-string">&apos;@dragula&apos;</span>, <span class="md-code-string">&apos;@woofmark&apos;</span>, <span class="md-code-string">&apos;@horsey&apos;</span>
  ],
  anchor: <mark class="md-mark md-code-mark"><span class="md-code-string">&apos;@&apos;</span></mark>,
  editor: <mark class="md-mark md-code-mark">editor</mark>,
  getSelection: <mark class="md-mark md-code-mark">woofmark.getSelection</mark>
});
</code></pre> <p>We had already played a bit around with <a href="https://github.com/bevacqua/horsey" target="_blank" aria-label="bevacqua/horsey on GitHub"><code class="md-code md-code-inline">horsey</code></a>, so what are all the new highlighted options? While everything we&#x2019;ve seen so far is composed, I&#x2019;ve cheated a little for <code class="md-code md-code-inline">woofmark</code>, and so <code class="md-code md-code-inline">horsey</code> helps you out if you want to use it with <code class="md-code md-code-inline">woofmark</code>. The reason for this is that I usually have them working side-by-side in my projects. In hindsight, <code class="md-code md-code-inline">horsey</code> shouldn&#x2019;t take a Woofmark <code class="md-code md-code-inline">editor</code> instance, because that&#x2019;s very tightly coupled. Instead, an intermediary module should bridge the gap. It&#x2019;d still be reusable, but <code class="md-code md-code-inline">horsey</code> itself wouldn&#x2019;t need to know about woofmark anymore.</p> <p>Woofmark has the ability to switch between user input on a <code class="md-code md-code-inline">&lt;textarea&gt;</code> for Markdown and HTML, or a <code class="md-code md-code-inline">&lt;div contentEditable&gt;</code> for WYSIWYG editing. In this sort of <mark class="md-mark">long-form user input</mark>, it makes the most sense to <em>append the suggestion</em>, provided by <code class="md-code md-code-inline">horsey</code>, onto what you already have on the input. The default behavior for <code class="md-code md-code-inline">horsey</code>, <em>which makes the most sense on inputs</em>, is to <strong>replace</strong> the value altogether. The <code class="md-code md-code-inline">anchor</code> property is used to determine <em>when</em> the suggestions should pop up. In this case, as soon as we see a <code class="md-code md-code-inline">@</code> character. When a suggestion is chosen, anything before the suggestion that matches it will be &#x201C;eaten&#x201D;. Suppose I&#x2019;ve typed <code class="md-code md-code-inline">@beva</code> and pressed <kbd>Enter</kbd> on the suggestion to enter <code class="md-code md-code-inline">@bevacqua</code>, Horsey will figure out that <code class="md-code md-code-inline">@beva</code> was the value to autocomplete, and it&#x2019;ll just add <code class="md-code md-code-inline">cqua</code> to that.</p> <p>The reason why I&#x2019;ve inserted knowledge about <code class="md-code md-code-inline">woofmark</code> in <code class="md-code md-code-inline">horsey</code>, originally, was that I still needed some of the same logic to deal with <code class="md-code md-code-inline">&lt;textarea&gt;</code> elements on <code class="md-code md-code-inline">horsey</code> anyways. In hindsight, <em>again</em>, I should&#x2019;ve just come up with a higher level abstraction that could be reused via a third module. Similarly, there&#x2019;s nothing stopping <code class="md-code md-code-inline">woofmark.getSelection</code> from being its own standalone module, as <a href="https://github.com/bevacqua/woofmark/blob/b49c60537ed7ce71ffb27d460bec6e02d538ad14/src/polyfills/getSelection.js" target="_blank" aria-label="woofmark.getSelection on GitHub">that&#x2019;s just a polyfill</a>.</p> <blockquote> <p><em>There&#x2019;s always room for improvement!</em></p> </blockquote> <p>I&#x2019;ll go get my modularity affairs in order. In the meanwhile, check out the <mark class="md-mark">Woofmark + Horsey</mark> demo <a href="http://codepen.io/bevacqua/full/bdxajE/" target="_blank" aria-label="CodePen.io">on CodePen</a>!</p> <p data-height="525" data-theme-id="9622" data-slug-hash="bdxajE" data-default-tab="result" data-user="bevacqua" class="codepen">See the Pen <a href="http://codepen.io/bevacqua/pen/bdxajE/">Composable UI: Woofmark and Horsey</a> by Nicolas Bevacqua (<a href="http://codepen.io/bevacqua">@bevacqua</a>) on <a href="http://codepen.io/">CodePen</a>.</p> <p><mark class="md-mark"><strong>P.S</strong></mark> How obnoxious do you think the <em>highlights</em> are? I probably went overboard with those, but I just wanted to implement that <strong>for such a long time</strong>, that I figured I&#x2019;d put them to good use! Haha.</p> <p><sub><em>* I was unpleasantly suprised to discover that many tag editing libraries <strong>offer a markedly worse user experience</strong> than what plain <code class="md-code md-code-inline">&lt;input/&gt;</code> fields already do.</em></sub></p></div>
