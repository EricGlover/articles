<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/things-you-can-do-in-plain-javascript">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/things-you-can-do-in-plain-javascript"><div></div></a>

<h1>Things you can do with native DOM</h1>

<p><kbd>food-for-thought</kbd> <kbd>javascript</kbd> <kbd>native</kbd> <kbd>dom</kbd></p>

<blockquote><p>These are short-form <mark class="md-mark">&#x201C;thoughts&#x201D;</mark>, in addition to the usual longer-form articles in the blog. The <a href="https://ponyfoo.com/articles/food-for-thought-begins">goal</a> is to publish <a href="https://ponyfoo.com/articles/tagged/food-for-thought">one of these</a> every weekday. I&#x2019;d &#x2026;</p></blockquote>

<div><p>These are short-form <mark class="md-mark">&#x201C;thoughts&#x201D;</mark>, in addition to the usual longer-form articles in the blog. The <a href="https://ponyfoo.com/articles/food-for-thought-begins">goal</a> is to publish <a href="https://ponyfoo.com/articles/tagged/food-for-thought">one of these</a> every weekday. I&#x2019;d love to know what you think. You may send your questions to <a href="mailto:thoughts@ponyfoo.com">thoughts@ponyfoo.com</a>. I&#x2019;ll try to answer them over email and I <em>may publish them here, with your approval</em>. I also write <em>thoughts</em> about the <mark class="md-mark">current state of front-end development</mark>, and opinions on other people&#x2019;s articles. You can use the form to the right <em>(near the bottom in mobile)</em> to <mark class="md-mark">subscribe via email</mark>.</p></div>

<div></div>

<div><p>I&#x2019;ve stopped using jQuery <a href="https://ponyfoo.com/articles/getting-over-jquery"><em>years ago</em></a> now. I learned a lot from jQuery, and from <a href="https://ponyfoo.com/articles/getting-over-jquery">not using it</a> anymore as well. Besides the things you can do with or without jQuery in terms of DOM selection, manipulation, and traversal <em>(or AJAX, the sole reason people keep adding it to their projects nowadays &#x2013; even though modules like <a href="https://github.com/Raynos/xhr" target="_blank"><code class="md-code md-code-inline">xhr</code></a> exist)</em> &#x2013; there&#x2019;s unsurprisingly a ton of stuff you can easily do in plain native DOM API, without involving any libraries.</p> <p>Some of them even enjoy wide browser support! This article explores <code class="md-code md-code-inline">getBoundingClientRect</code>, <code class="md-code md-code-inline">elementFromPoint</code>, and text selection with <code class="md-code md-code-inline">selectionStart</code> and <code class="md-code md-code-inline">selectionEnd</code>.</p></div>

<div><h2 id="elementgetboundingclientrect"><code class="md-code md-code-inline">element.getBoundingClientRect</code></h2> <p>You could use <a href="https://developer.mozilla.org/en/docs/Web/API/Element/getBoundingClientRect" target="_blank" aria-label="Element.getBoundingClientRect() &#x2013; MDN"><code class="md-code md-code-inline">getBoundingClientRect</code></a> to get the current size of any DOM element, as well as it&#x2019;s current position, relative to the viewport.</p> <p>In the screenshot below I chose a random DOM element on the Elements tab of Dev Tools. Then I popped open the Console and used <code class="md-code md-code-inline">getBoundingClientRect</code> on <code class="md-code md-code-inline">$0</code> &#x2013; which is always bound to the last DOM element selected in the Elements tab.</p> <p><a href="https://developer.mozilla.org/en/docs/Web/API/Element/getBoundingClientRect" target="_blank" aria-label="Element.getBoundingClientRect() &#x2013; MDN"><img alt="rect.png" class="" src="https://i.imgur.com/FO1GqeR.png"></a></p> <p>In <a href="https://github.com/bevacqua/dragula" target="_blank" aria-label="bevacqua/dragula on GitHub"><code class="md-code md-code-inline">dragula</code></a>, for example, I use <code class="md-code md-code-inline">getBoundingClientRect</code> to figure out <a href="https://github.com/bevacqua/dragula/blob/8ebbffc7a674234cc55e757155d981dca9ab3288/dragula.js#L463-L469" target="_blank" aria-label="getOffset() method in dragula">the absolute positioning</a> of the elements that get dragged around by humans. A better example might be <a href="https://github.com/bevacqua/bullseye/blob/bab4799cdf02e5df2bef81d48faddc75a0b03f6f/bullseye.js#L44" target="_blank" aria-label="bevacqua/bullseye on GitHub"><code class="md-code md-code-inline">bullseye</code></a> used in <a href="https://github.com/bevacqua/rome" target="_blank" aria-label="bevacqua/rome on GitHub"><code class="md-code md-code-inline">rome</code></a>, <a href="https://github.com/bevacqua/horsey" target="_blank" aria-label="bevacqua/horsey on GitHub"><code class="md-code md-code-inline">horsey</code></a>, and <a href="https://github.com/bevacqua/woofmark" target="_blank" aria-label="bevacqua/woofmark on GitHub"><code class="md-code md-code-inline">woofmark</code></a> to place elements right below inputs, textareas, or even the text selection caret <em>(although that one uses <code class="md-code md-code-inline">getSelection</code>, polyfilled by <a href="https://github.com/bevacqua/seleccion" target="_blank" aria-label="bevacqua/seleccion on GitHub"><code class="md-code md-code-inline">seleccion</code></a>, to get the selection offset)</em>.</p> <p>The <code class="md-code md-code-inline">getBoundingClientRect</code> method also has great browser support: <strong>all the way down to IE4</strong>. On <em>IE8 and older</em>, the often convenient <code class="md-code md-code-inline">width</code> and <code class="md-code md-code-inline">height</code> properties aren&#x2019;t provided, but they could be inferred as <code class="md-code md-code-inline">right - left</code> and <code class="md-code md-code-inline">bottom - top</code> respectively.</p> <h2 id="documentelementfrompoint"><code class="md-code md-code-inline">document.elementFromPoint</code></h2> <p>Another cool piece of the web API that enjoys from broad browser support is <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint" target="_blank" aria-label="Document.elementFromPoint() &#x2013; MDN"><code class="md-code md-code-inline">elementFromPoint</code></a>. It can find the topmost DOM element at any <code class="md-code md-code-inline">(x, y)</code> point in the document. If the topmost element is inside an <code class="md-code md-code-inline">&lt;iframe&gt;</code>, the <code class="md-code md-code-inline">&lt;iframe&gt;</code> itself is returned. This method vastly simplifies the code in <code class="md-code md-code-inline">dragula</code>, which needs to figure out what&#x2019;s behind the element being dragged.</p> <p>The code below hides the element being dragged using a class that sets <code class="md-code md-code-inline">display: none !important</code>, ensuring that the subsequent <code class="md-code md-code-inline">elementFromPoint</code> call returns the element that&#x2019;s below. It surely doesn&#x2019;t come up quite that often, but it&#x2019;s still a nifty hack to leverage!</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">getElementBehindPoint</span> <span class="md-code-params">(point, x, y)</span> </span>{
  <span class="md-code-keyword">var</span> old = point.className;
  point.className += <span class="md-code-string">&apos; gu-hide&apos;</span>;
  <span class="md-code-keyword">var</span> el = <mark class="md-mark md-code-mark">document.elementFromPoint(x, y);</mark>
  point.className = old;
  <span class="md-code-keyword">return</span> el;
}
</code></pre> <p>Besides drag and drop situations, this method is often used in integration tests using Selenium, when testers want to click a button that can be found in a precise point in the document. There&#x2019;s probably a few more use cases, but there&#x2019;s generally <em>way cleaner ways</em> to get references to DOM elements you care about.</p> <h2 id="selectionstart-and-selectionend"><code class="md-code md-code-inline">selectionStart</code> and <code class="md-code md-code-inline">selectionEnd</code></h2> <p>Whenever we modify user input we need to be careful enough to preserve their text selection. This comes up when we replace tokens such as at mentions <a href="http://bevacqua.github.io/horsey/" target="_blank" aria-label="Horsey autocomplete demo on GitHub Pages"><em>(see the <code class="md-code md-code-inline">&lt;textarea&gt;</code> example here)</em></a>, insert images or links in rich text-editing scenarios, and similar situations where you want to manipulate user input while it&#x2019;s being entered.</p> <p>Both of these properties can be found in input elements. You can read them directly, and you could also change their value, immediately updating the DOM as you&#x2019;re used for other DOM-changing getters and setters like style properties such as <code class="md-code md-code-inline">el.style.display</code>.</p> <p>If you need <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange" target="_blank" aria-label="HTMLInputElement.setSelectionRange() &#x2013; MDN">support below IE9</a> you&#x2019;d have to use something like <a href="https://github.com/bevacqua/sell" target="_blank" aria-label="bevacqua/sell on GitHub"><code class="md-code md-code-inline">sell</code></a>, which leverages the TextRange API in those scenarios, and otherwise uses <code class="md-code md-code-inline">selectionStart</code> and <code class="md-code md-code-inline">selectionEnd</code>.</p> <p><mark class="md-mark">Have any questions or thoughts you&#x2019;d like me to write about?</mark> <em>Send an email to <a href="mailto:thoughts@ponyfoo.com" aria-label="Send me your questions and feedback!">thoughts@ponyfoo.com</a>.</em> Remember to <strong>subscribe</strong> if you got this far!</p></div>
