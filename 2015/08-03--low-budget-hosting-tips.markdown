<h1>Low-Budget Hosting Tips</h1>

<p><kbd>food-for-thought</kbd> <kbd>low-budget</kbd> <kbd>aws</kbd> <kbd>hosting</kbd> <kbd>tips</kbd></p>

<blockquote><p>These are short-form <mark class="md-mark">&#x201C;thoughts&#x201D;</mark>, in addition to the usual longer-form articles in the blog. The <a href="https://ponyfoo.com/articles/food-for-thought-begins">goal</a> is to publish <a href="https://ponyfoo.com/articles/tagged/food-for-thought">one of these</a> every weekday. I&#x2019;d &#x2026;</p></blockquote>

<div><p>These are short-form <mark class="md-mark">&#x201C;thoughts&#x201D;</mark>, in addition to the usual longer-form articles in the blog. The <a href="https://ponyfoo.com/articles/food-for-thought-begins">goal</a> is to publish <a href="https://ponyfoo.com/articles/tagged/food-for-thought">one of these</a> every weekday. I&#x2019;d love to know what you think. You may send your questions to <a href="mailto:thoughts@ponyfoo.com">thoughts@ponyfoo.com</a>. I&#x2019;ll try to answer them over email and I <em>may publish them here, with your approval</em>. I also write <em>thoughts</em> about the <mark class="md-mark">current state of front-end development</mark>, and opinions on other people&#x2019;s articles. You can use the form to the right <em>(near the bottom in mobile)</em> to <mark class="md-mark">subscribe via email</mark>.</p></div>

<div></div>

<div><p>I&#x2019;ve been hosting Pony Foo on an AWS <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts_micro_instances.html" target="_blank"><code class="md-code md-code-inline">t1.micro</code></a> instance for as long as I can remember. When it comes to AWS, <em>&#x201C;low-budget&#x201D;</em> is <strong>an oxymoron</strong> &#x2013; as the cheapest type of instance on demand is priced somewhere near <strong>$30/mo</strong>. While the cheapest instance is pricey, it provides a far better experience than say, the lowest tiers of hosting on Heroku, which I&#x2019;ve always found clumsy and quirky to use.</p> <p>What I did like about Heroku back in the day I used it intensively was <a href="http://12factor.net/" target="_blank">their approach to app development</a> and how that translated into immutable infrastructure and deployments. I did learn tons and tons by following <a href="http://12factor.net/" target="_blank">12factor</a>, and recently winded up writing up <a href="https://ponyfoo.com/articles/leveraging-immutable-deployments">my own immutable deployment system</a>, using Packer, the AWS CLI, and plain old <code class="md-code md-code-inline">bash</code>.</p> <p>All things considered though, I&#x2019;ve learned far more from using <em>IaaS-style</em> hosting platforms like AWS than I did from Heroku. Using AWS forced me to learn more <code class="md-code md-code-inline">bash</code> commands and UNIX_-y_ things than I ever had to worry about with Heroku. Learning how to come up with immutable deployments was also invaluable as it also gave me insight into how PaaS platforms work under the hood. Being able to tweak the instance exactly to your liking is invaluable too, and most PaaS really limit what you can do with their instances.</p> <blockquote> <p>Here, I&#x2019;ll share a few tips and tricks I&#x2019;ve found useful when running applications using entirely custom scripts.</p> </blockquote></div>

<div><h1 id="add-some-swap-space">Add Some Swap Space!</h1> <p>In AWS, <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts_micro_instances.html" target="_blank" aria-label="T1 Micro Instances on Amazon Web Services"><code class="md-code md-code-inline">t1.micro</code></a> instances have around <strong>8GB</strong> of disk space while they only have around <strong>800M</strong> of RAM. That&#x2019;s very low RAM. I&#x2019;ve incorporated the snippet below into my deployments to add <strong>2GB</strong> of <em>swap space</em>, so that when the instance runs out of RAM, it can fall back to using the disk. Albeit slower, it&#x2019;s often enough to get you there &#x2013; considering you&#x2019;re using a <code class="md-code md-code-inline">t1.micro</code> instance or equivalent on another platform, you&#x2019;re probably hosting a blog such as this one, a personal website, or a similarly low-budget project.</p> <p>The script below will add <strong>2GB</strong> of swap space on disk, mount it for immediate use, and make it so that it <em>works across restarts</em>.</p> <pre class="md-code-block"><code class="md-code md-lang-bash"><span class="md-code-built_in">echo</span> <span class="md-code-string">&quot;creating swap space&quot;</span>
sudo dd <span class="md-code-keyword">if</span>=/dev/zero of=/media/swapfile.img bs=<span class="md-code-number">1024</span> count=<span class="md-code-number">2</span>M
sudo mkswap /media/swapfile.img
sudo chmod <span class="md-code-number">0600</span> /media/swapfile.img
<span class="md-code-built_in">echo</span> <span class="md-code-string">&quot;/media/swapfile.img swap swap sw 0 0&quot;</span> | sudo tee <span class="md-code-operator">-a</span> /etc/fstab
sudo swapon /media/swapfile.img
</code></pre> <p>I&#x2019;ve struggled with this one for quite a bit, because Pony Foo didn&#x2019;t originally consume as much memory, but after throwing in <code class="md-code md-code-inline">nginx</code>, <code class="md-code md-code-inline">io.js</code>, a cluster of Node instances, and a <code class="md-code md-code-inline">cron</code> job that runs every 6 minutes, memory ramped up. It took me a while to figure out, and the biggest issue was that AWS CloudWatch <em>(their monitoring system)</em> doesn&#x2019;t track memory consumption by default, so the <em>problem didn&#x2019;t immediately stand out</em>. The <code class="md-code md-code-inline">node</code> processes would just <mark class="md-mark"><strong>hang, no error message or anything, and stop serving responses</strong></mark>. Meanwhile CPU would ramp up to <em><strong>100% utilization</strong></em>, rendering the instance useless for a couple of minutes.</p> <p><img alt="CloudWatch displaying CPU utilization spikes" class="" src="https://i.imgur.com/T67aDvn.png"></p> <blockquote> <p>Luckily, adding those <strong>2GB</strong> of swap memory promptly fixed the issue!</p> </blockquote> <h1 id="keep-your-cluster-in-your-cores">Keep your Cluster in Your Cores</h1> <p>A similar issue was rooted in the <code class="md-code md-code-inline">cron</code> job. After fixing the memory issues, I added in a very simple <code class="md-code md-code-inline">cron</code> job written in Node that would figure out whether there&#x2019;s any articles scheduled for publication and publishes them if their publication date was in the past.</p> <p>As soon as I deployed, I noticed that the CPU would spike every six minutes. Suspiciously enough, that&#x2019;s how often I had set up the <code class="md-code md-code-inline">cron</code> job to run. After some thinking, I realized what was going on. As I mentioned earlier, I was already running a cluster on the instance, with <a href="https://nodejs.org/api/os.html#os_os_cpus" target="_blank" aria-label="Refer to os module documentation in the node.js manual"><code class="md-code md-code-inline">os.cpus().length</code></a> workers or <code class="md-code md-code-inline">2</code>, whichever was largest. Throwing in <strong>an extra Node instance crippled the CPU</strong>. Yes, that <em>surprised me a bit</em> too, the job runs for like 6 seconds most of the time. My work around was to place the scheduler in an API endpoint and use <code class="md-code md-code-inline">curl</code> against the cluster in the <code class="md-code md-code-inline">cron</code> job.</p> <p>This had <em>a couple of benefits</em>.</p> <ul> <li>CPU usage doesn&#x2019;t spike to 100% anymore</li> <li>Job runs faster because it doesn&#x2019;t have to parse and compile any JavaScript, nor open any database connections</li> </ul> <p>Nowadays CPU utilization hardly ever goes over <strong>30%</strong>. Considering this is a <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts_micro_instances.html" target="_blank" aria-label="T1 Micro Instances on Amazon Web Services"><code class="md-code md-code-inline">t1.micro</code></a> instance, that&#x2019;s low utilization. <em>High fives all around!</em></p> <p><img alt="CPU utilization today for ponyfoo.com" class="" src="https://i.imgur.com/fyqrqbH.png"></p> <p>It does have the drawback that the job <strong>could be executed by an unwanted party</strong>, but that could be easily mitigated by doing some awkward dance where we verify that the requester already had prior access to the server file system anyways. That being said, this job in particular happens to be idempotent &#x2013; <em>running it over and over again won&#x2019;t change the outcome</em> &#x2013; and thus, <strong>not a big deal that people can help me</strong> check if an article slated for publication can already be published.</p> <h1 id="free-tier-ize-your-one-offs">Free-tier<em>ize</em> Your One-offs</h1> <p>If you have one-offs that need to be executed every once in a while, such as the <code class="md-code md-code-inline">cron</code> job I&#x2019;ve just described, maybe you could spin up <em>free-tier instances</em> on a PaaS provider to run those jobs. It&#x2019;s <em>a little extra work</em>, but it lightens the load on your application servers and <strong>spares the CPU</strong>!</p> <h1 id="monitor-all-the-things">Monitor All the Things</h1> <p>When you&#x2019;re running a website on a budget, monitoring plays an important role. Your site might go out of memory, grind to a halt and no longer be able to serve any responses, crash, time out on the database connection, and many other <mark class="md-mark">risk factors are always lurking around</mark>.</p> <p>I have a <strong>love/hate</strong> relationship with <a href="https://uptimerobot.com/" target="_blank" aria-label="Uptime Robot">Uptime Robot</a>. On the one hand, it&#x2019;s a great service that pings my sites every few minutes and emails me when they go down <em>(and back up)</em>. On the other hand, getting those <em>&#x201C;<a href="http://ponyfoo.com/" target="_blank">ponyfoo.com</a> is down&#x201D;</em> emails <strong>sucks</strong>. Just look at those slick graphs, though!</p> <p><a href="https://uptimerobot.com/" target="_blank" aria-label="Uptime Robot"><img alt="Uptime Robot Dashboard for ponyfoo.com" class="" src="https://i.imgur.com/bLZg1OU.png"></a></p> <p>Of course, you shouldn&#x2019;t rely solely on <a href="https://uptimerobot.com/" target="_blank" aria-label="Uptime Robot">Uptime Robot</a>. Add logging to your application. Use <a href="https://github.com/winstonjs/winston" target="_blank" aria-label="winstonjs/winston on GitHub"><code class="md-code md-code-inline">winston</code></a> to log messages to your database whenever an error occurs during a request, <strong>a worker in your cluster crashes</strong>, and whenever <em>similarly scary events</em> occur.</p> <p>If you&#x2019;re on AWS, you might want to hook into the <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/Welcome.html" target="_blank" aria-label="Amazon CloudWatch API Documentation">CloudWatch API</a>, or just head over to your dashboard and see if anything seems amiss.</p> <p><img alt="CloudWatch Metrics in the AWS Dashboard" title="Screen Shot 2015-08-04 at 13.14.27.png" class="" src="https://i.imgur.com/AxdQ1TO.png"></p> <p>If you&#x2019;re not on AWS, you could always look to [New Relic] and similar &#x201C;embedded&#x201D; <strong>APM</strong> <em>(Application Performance Management)</em> solutions. These usually take their own toll on performance &#x2013; much like <em>&#x201C;anti-virus&#x201D;</em> software (which I hate) &#x2013; but they do have a noble purpose in thoroughly monitoring and providing you with real-time statistics and insight into the current state and load of your application.</p> <blockquote> <p>Hope that helps, I probably forgot to mention some obvious advice here, but this is mostly just off the top of my head!</p> </blockquote> <p><mark class="md-mark">Have any questions or thoughts you&#x2019;d like me to write about?</mark> <em>Send an email to <a href="mailto:thoughts@ponyfoo.com" aria-label="Send me your questions and feedback!">thoughts@ponyfoo.com</a>.</em> Remember to <strong>subscribe</strong> if you got this far!</p></div>
