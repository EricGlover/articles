<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/master/contributing.markdown"><code>contributing.markdown</code></a> for details.</sub>

<a href="https://ponyfoo.com/articles/securing-your-web-app-in-3-easy-steps"><div></div></a>

<h1>Securing Your Web App in 3 Easy Steps</h1>

<p><kbd>https</kbd> <kbd>security</kbd> <kbd>web-apps</kbd> <kbd>cloudflare</kbd></p>

<blockquote><p>I&#x2019;ve recently upgraded Pony Foo to use the <code>https</code> protocol, something I&#x2019;ve been meaning to do for a while. It&#x2019;s super easy to do so, and &#x2026;</p></blockquote>

<div><p>I&#x2019;ve recently upgraded Pony Foo to use the <code class="md-code md-code-inline">https</code> protocol, something I&#x2019;ve been meaning to do for a while. It&#x2019;s super easy to do so, and here&#x2019;s a few simple steps you can take to secure your own apps. The procedure is quite agnostic when it comes to your hosting stack, and you should definitely implement <code class="md-code md-code-inline">https</code> on your own services as well!</p></div>

<div></div>

<div><p>There has been a tremendous push lately towards securing the Internet, and there&#x2019;s been even talk about browsers warning users about visiting <code class="md-code md-code-inline">http</code> sites, as an incentive for site owners to upgrade their services to more secure protocols. Initiatives like <a href="https://letsencrypt.org/" target="_blank" aria-label="Let&#x2019;s Encrypt is a new Certificate Authority">Let&#x2019;s Encrypt</a> are spearheading the revolution, and it&#x2019;s about time we start getting more serious about security.</p> <p>While, yes, dealing with certificates is painful and expensive, there&#x2019;s also ways of setting up a secure version of your sites that are free and effortless. I&#x2019;ve recently set up <code class="md-code md-code-inline">https</code> for <code class="md-code md-code-inline">ponyfoo.com</code>, which went live today, and I&#x2019;m glad I get to share the details of how I made that happen.</p></div>

<div><h1 id="step-1-let-cloudflare-manage-your-dns">Step 1: Let CloudFlare Manage Your DNS</h1> <p>A couple of months back I moved <code class="md-code md-code-inline">ponyfoo.com</code> to the <a href="https://www.cloudflare.com/" target="_blank" aria-label="CloudFlare: &apos;Give us five minutes and we&apos;ll supercharge your website.&apos;">CloudFlare</a> DNS. Originally, I had done this to leverage their CDN services, so that my static resources would load faster. Their onboarding process UX is unlike anything I had ever seen with other DNS providers and similar services, and I promptly found myself moving several of my sites onto CloudFlare.</p> <p><a href="https://www.cloudflare.com/" target="_blank" aria-label="CloudFlare: &apos;Give us five minutes and we&apos;ll supercharge your website.&apos;"><img alt="Adding ponyfoo.com to CloudFlare" class="" src="https://i.imgur.com/uROcfFH.png"></a></p> <p>Once you&#x2019;ve entered your domain name, they&#x2019;ll pull all domain records from your current DNS provider, and at that point you just have to point your servers to the CloudFlare name servers. The entire process shouldn&#x2019;t take longer than 10 minutes.</p> <p>For free, CloudFlare gives you:</p> <ul> <li>The ability to use <code class="md-code md-code-inline">ALIAS</code> records on the apex domain <em>&#x2013; like <code class="md-code md-code-inline">example.com</code>, without a subdomain</em></li> <li>Distribution on their network, saving bytes for you and saving time for your users</li> <li>A secure version of your site served over <code class="md-code md-code-inline">https</code></li> <li>All of the above without having to change anything in your application!</li> </ul> <p><a href="https://www.cloudflare.com/" target="_blank" aria-label="CloudFlare: &apos;Give us five minutes and we&apos;ll supercharge your website.&apos;"><img alt="CloudFlare DNS record for ponyfoo.com" class="" src="https://i.imgur.com/JrFackd.png"></a></p> <h1 id="step-2-fix-mixed-content-warnings">Step 2: Fix Mixed Content Warnings</h1> <p>Like I said earlier, I&#x2019;ve had <code class="md-code md-code-inline">ponyfoo.com</code> traffic passing through CloudFlare for quite some time before deciding to turn it into a more secure site. To make the switch, a problem that frequently springs up is having <em>&#x201C;mixed content warnings&#x201D;</em>. This may happen when your page is served securely but other parts of the page aren&#x2019;t.</p> <p>In my case, I had a number of issues that I had to resolve.</p> <ul> <li>I was loading fonts from <code class="md-code md-code-inline">http://fonts.googleapis.com</code>, and those requests were getting blocked. I fixed that by switching over to the secure version</li> <li>I was loading gravatar icons over <code class="md-code md-code-inline">http</code>, but again there&#x2019;s a secure version over <code class="md-code md-code-inline">https</code></li> <li>The vast majority of images in my articles are hosted on <strong>imgur</strong>. They provide secure versions of all their images but I was always pointing at the <code class="md-code md-code-inline">http</code> versions, so I had to tweak some database entries in there</li> <li>There were a few other occurrences and you can find the entire changeset in a single commit on <a href="https://github.com/ponyfoo/ponyfoo/commit/cff0edc5c36efa224877a4ccb26c25eecee6327c" target="_blank" aria-label="Commit cff0edc5c36efa224877a4ccb26c25eecee6327c on GitHub"><code class="md-code md-code-inline">ponyfoo/ponyfoo</code></a></li> </ul> <p>I always made it a point to link to articles relatively (e.g <code class="md-code md-code-inline">/foo</code> instead of <code class="md-code md-code-inline">http://pony.com/foo</code>), this was quite helpful because I didn&#x2019;t have to go around changing links everywhere. Similarly, I centralized the domain name in a single environment variable I use in places like emails and whatnot, so switching those over to <code class="md-code md-code-inline">https</code> was a matter of adding a character to the configuration value.</p> <p>The last place where I had to make a modification was comments, there weren&#x2019;t any comments with images from somewhere else than <strong>imgur</strong> <em>(most of those were uploaded by me, too)</em>, so I just changed the database again. The one thing I did have to add was a validation rule so that people can&#x2019;t submit comments with images served over <code class="md-code md-code-inline">http</code>. There are more robust alternatives, such as detecting those links and <em>re-uploading them</em> to imgur and then serving them securely, but alas, people hardly upload any images to this blog, so it wasn&#x2019;t worth the effort.</p> <h1 id="step-3-enforce-https-on-cloudflare">Step 3: Enforce <code class="md-code md-code-inline">https</code> on CloudFlare</h1> <p>After you&#x2019;ve made sure that all your pages have a green lock and you don&#x2019;t have any more mixed content warnings, it&#x2019;s time to flip the switch. The easiest way to turn all your traffic into <code class="md-code md-code-inline">https</code> without making any code modifications to your site or services at all is to go on to your CloudFlare account and add a redirection Page Rule that enforces <code class="md-code md-code-inline">https</code>.</p> <p><img alt="Adding the Page Rule to turn your traffic green" class="" src="https://i.imgur.com/n0YCo6H.png"></p> <p>Done. You didn&#x2019;t have to change your site besides making sure that all external content loads securely, and now your site has that coveted green lock. Woohoo!</p> <p>I&#x2019;m taking steps into securing my site gradually, and if you&#x2019;re serious about security I would recommend that you look into the matters enumerated below as well. If you&#x2019;re a Node.js user, I suggest you look at <a href="https://github.com/helmetjs/helmet" target="_blank" aria-label="helmetjs/helmet on GitHub"><code class="md-code md-code-inline">helmet</code></a> as a way to get started with all these.</p> <ul> <li>Enforcing TLS 1.2</li> <li>Enabling HTTP Strict Transport Security</li> <li>Enabling HTTP Public Key Pinning</li> <li>Enabling Content Security Policy</li> <li>Enabling X-XSS-Protection</li> </ul> <p>When it comes to UX, now I can <strong>finally</strong> implement stuff like <code class="md-code md-code-inline">ServiceWorker</code> <em>(for offline-first)</em> &#x2013; which is only available over <code class="md-code md-code-inline">https</code> in most browser implementations &#x2013; so keep an eye out for that!</p> <p>Below is a screenshot of Pony Foo in all its green-padlocked glory. I&#x2019;ll probably wait until I can get a certificate of my own through the <a href="https://letsencrypt.org/" target="_blank" aria-label="Let&#x2019;s Encrypt is a new Certificate Authority">Let&#x2019;s Encrypt</a> program, but they haven&#x2019;t launched yet. Soon, hopefully!</p> <p><img alt="Pony Foo in all its green padlocked glory" class="" src="https://i.imgur.com/NSmVVzi.png"></p></div>
