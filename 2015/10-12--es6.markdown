<div><blockquote>
  <h1>ES6 Overview in 350 Bullet Points</h1>
  <div><p>My <a href="https://ponyfoo.com/articles/tagged/es6-in-depth" aria-label="ES6 in Depth on Pony Foo">ES6 in Depth</a> series consists of 24 articles covering most syntax changes and features coming in ES6. This article aims to summarize all of those, providing you with &#x2026;</p></div>
</blockquote></div>

<div><p>My <a href="https://ponyfoo.com/articles/tagged/es6-in-depth" aria-label="ES6 in Depth on Pony Foo">ES6 in Depth</a> series consists of 24 articles covering most syntax changes and features coming in ES6. This article aims to summarize all of those, providing you with practical insight into most of ES6, so that you can quickly get started. I&#x2019;ve also linked to the articles in ES6 in Depth so that you can easily go deeper on any topic you&#x2019;re interested in.</p></div>

<div></div>

<div><p>I heard you like bullet points, so I made an article containing hundreds of those bad boys. To kick things off, here&#x2019;s a table of contents with all the topics covered. It has bullet points in it &#x2013; <strong>obviously</strong>. Note that if you want these concepts to permeate your brain, you&#x2019;ll have a much better time learning the subject by going through the <a href="https://ponyfoo.com/articles/tagged/es6-in-depth" aria-label="ES6 in Depth on Pony Foo">in-depth series</a> and playing around, experimenting with ES6 code yourself.</p> <p><img src="https://i.imgur.com/tbKTICw.png" alt="It&apos;s showtime!"></p> <h1 id="table-of-contents">Table of Contents</h1> <ul> <li><a href="https://ponyfoo.com/#introduction">Introduction</a></li> <li><a href="https://ponyfoo.com/#tooling">Tooling</a></li> <li><a href="https://ponyfoo.com/#assignment-destructuring">Assignment Destructuring</a></li> <li><a href="https://ponyfoo.com/#spread-operator-and-rest-parameters">Spread Operator and Rest Parameters</a></li> <li><a href="https://ponyfoo.com/#arrow-functions">Arrow Functions</a></li> <li><a href="https://ponyfoo.com/#template-literals">Template Literals</a></li> <li><a href="https://ponyfoo.com/#object-literals">Object Literals</a></li> <li><a href="https://ponyfoo.com/#classes">Classes</a></li> <li><a href="https://ponyfoo.com/#let-and-const">Let and Const</a></li> <li><a href="https://ponyfoo.com/#symbols">Symbols</a></li> <li><a href="https://ponyfoo.com/#iterators">Iterators</a></li> <li><a href="https://ponyfoo.com/#generators">Generators</a></li> <li><a href="https://ponyfoo.com/#promises">Promises</a></li> <li><a href="https://ponyfoo.com/#maps">Maps</a></li> <li><a href="https://ponyfoo.com/#weakmaps">WeakMaps</a></li> <li><a href="https://ponyfoo.com/#sets">Sets</a></li> <li><a href="https://ponyfoo.com/#weaksets">WeakSets</a></li> <li><a href="https://ponyfoo.com/#proxies">Proxies</a></li> <li><a href="https://ponyfoo.com/#reflection">Reflection</a></li> <li><a href="https://ponyfoo.com/#number"><code class="md-code md-code-inline">Number</code></a></li> <li><a href="https://ponyfoo.com/#math"><code class="md-code md-code-inline">Math</code></a></li> <li><a href="https://ponyfoo.com/#array"><code class="md-code md-code-inline">Array</code></a></li> <li><a href="https://ponyfoo.com/#object"><code class="md-code md-code-inline">Object</code></a></li> <li><a href="https://ponyfoo.com/#strings-and-unicode">Strings and Unicode</a></li> <li><a href="https://ponyfoo.com/#modules">Modules</a></li> </ul></div>

<div><p>Apologies about that long table of contents, and here we go.</p> <h1 id="introduction">Introduction</h1> <ul> <li>ES6 &#x2013; also known as Harmony, <code class="md-code md-code-inline">es-next</code>, ES2015 &#x2013; is the latest finalized specification of the language</li> <li>The ES6 specification was finalized in <strong>June 2015</strong>, <em>(hence ES2015)</em></li> <li>Future versions of the specification will follow the <code class="md-code md-code-inline">ES[YYYY]</code> pattern, e.g ES2016 for ES7 <ul> <li><strong>Yearly release schedule</strong>, features that don&#x2019;t make the cut take the next train</li> <li>Since ES6 pre-dates that decision, most of us still call it ES6</li> <li>Starting with ES2016 (ES7), we should start using the <code class="md-code md-code-inline">ES[YYYY]</code> pattern to refer to newer versions</li> <li>Top reason for naming scheme is to pressure browser vendors into quickly implementing newest features</li> </ul> </li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="tooling">Tooling</h1> <ul> <li>To get ES6 working today, you need a <strong>JavaScript-to-JavaScript</strong> <em>transpiler</em></li> <li>Transpilers are here to stay <ul> <li>They allow you to compile code in the latest version into older versions of the language</li> <li>As browser support gets better, we&#x2019;ll transpile ES2016 and ES2017 into ES6 and beyond</li> <li>We&#x2019;ll need better source mapping functionality</li> <li>They&#x2019;re the most reliable way to run ES6 source code in production today <em>(although browsers get ES5)</em></li> </ul> </li> <li>Babel <em>(a transpiler)</em> has a killer feature: <strong>human-readable output</strong></li> <li>Use <a href="http://babeljs.io/" target="_blank" aria-label="Babel JavaScript Compiler"><code class="md-code md-code-inline">babel</code></a> to transpile ES6 into ES5 for static builds</li> <li>Use <a href="https://github.com/babel/babelify" target="_blank" aria-label="babel/babelify on GitHub"><code class="md-code md-code-inline">babelify</code></a> to incorporate <code class="md-code md-code-inline">babel</code> into your <a href="https://ponyfoo.com/articles/gulp-grunt-whatever" aria-label="Gulp, Grunt, Whatever on Pony Foo">Gulp, Grunt, or <code class="md-code md-code-inline">npm run</code></a> build process</li> <li>Use Node.js <code class="md-code md-code-inline">v4.x.x</code> or greater as they have decent ES6 support baked in, thanks to <code class="md-code md-code-inline">v8</code></li> <li>Use <code class="md-code md-code-inline">babel-node</code> with any version of <code class="md-code md-code-inline">node</code>, as it transpiles modules into ES5</li> <li>Babel has a thriving ecosystem that already supports some of ES2016 and has plugin support</li> <li>Read <a href="https://ponyfoo.com/articles/a-brief-history-of-es6-tooling" aria-label="A Brief History of ES6 Tooling on Pony Foo">A Brief History of ES6 Tooling</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="assignment-destructuring">Assignment Destructuring</h1> <ul> <li><code class="md-code md-code-inline">var {foo} = pony</code> is equivalent to <code class="md-code md-code-inline">var foo = pony.foo</code></li> <li><code class="md-code md-code-inline">var {foo: baz} = pony</code> is equivalent to <code class="md-code md-code-inline">var baz = pony.foo</code></li> <li>You can provide default values, <code class="md-code md-code-inline">var {foo=&apos;bar&apos;} = baz</code> yields <code class="md-code md-code-inline">foo: &apos;bar&apos;</code> if <code class="md-code md-code-inline">baz.foo</code> is <code class="md-code md-code-inline">undefined</code></li> <li>You can pull as many properties as you like, aliased or not <ul> <li><code class="md-code md-code-inline">var {foo, bar: baz} = {foo: 0, bar: 1}</code> gets you <code class="md-code md-code-inline">foo: 0</code> and <code class="md-code md-code-inline">baz: 1</code></li> </ul> </li> <li>You can go deeper. <code class="md-code md-code-inline">var {foo: {bar}} = { foo: { bar: &apos;baz&apos; } }</code> gets you <code class="md-code md-code-inline">bar: &apos;baz&apos;</code></li> <li>You can alias that too. <code class="md-code md-code-inline">var {foo: {bar: deep}} = { foo: { bar: &apos;baz&apos; } }</code> gets you <code class="md-code md-code-inline">deep: &apos;baz&apos;</code></li> <li>Properties that aren&#x2019;t found yield <code class="md-code md-code-inline">undefined</code> as usual, e.g: <code class="md-code md-code-inline">var {foo} = {}</code></li> <li>Deeply nested properties that aren&#x2019;t found yield an error, e.g: <code class="md-code md-code-inline">var {foo: {bar}} = {}</code></li> <li>It also works for arrays, <code class="md-code md-code-inline">[a, b] = [0, 1]</code> yields <code class="md-code md-code-inline">a: 0</code> and <code class="md-code md-code-inline">b: 1</code></li> <li>You can skip items in an array, <code class="md-code md-code-inline">[a, , b] = [0, 1, 2]</code>, getting <code class="md-code md-code-inline">a: 0</code> and <code class="md-code md-code-inline">b: 2</code></li> <li>You can swap without an <em>&#x201C;aux&#x201D;</em> variable, <code class="md-code md-code-inline">[a, b] = [b, a]</code></li> <li>You can also use destructuring in function parameters <ul> <li>Assign default values like <code class="md-code md-code-inline">function foo (bar=2) {}</code></li> <li>Those defaults can be objects, too <code class="md-code md-code-inline">function foo (bar={ a: 1, b: 2 }) {}</code></li> <li>Destructure <code class="md-code md-code-inline">bar</code> completely, like <code class="md-code md-code-inline">function foo ({ a=1, b=2 }) {}</code></li> <li>Default to an empty object if nothing is provided, like <code class="md-code md-code-inline">function foo ({ a=1, b=2 } <mark class="md-mark md-code-mark">= {}</mark>) {}</code></li> </ul> </li> <li>Read <a href="https://ponyfoo.com/articles/es6-destructuring-in-depth" aria-label="ES6 Destructuring in Depth on Pony Foo">ES6 JavaScript Destructuring in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="spread-operator-and-rest-parameters">Spread Operator and Rest Parameters</h1> <ul> <li>Rest parameters is a better <code class="md-code md-code-inline">arguments</code> <ul> <li>You declare it in the method signature like <code class="md-code md-code-inline">function foo (...everything) {}</code></li> <li><code class="md-code md-code-inline">everything</code> is an array with all parameters passed to <code class="md-code md-code-inline">foo</code></li> <li>You can name a few parameters before <code class="md-code md-code-inline">...everything</code>, like <code class="md-code md-code-inline">function foo (bar, ...rest) {}</code></li> <li>Named parameters are excluded from <code class="md-code md-code-inline">...rest</code></li> <li><code class="md-code md-code-inline">...rest</code> must be the last parameter in the list</li> </ul> </li> <li>Spread operator is better than magic, also denoted with <code class="md-code md-code-inline">...</code> syntax <ul> <li>Avoids <code class="md-code md-code-inline">.apply</code> when calling methods, <code class="md-code md-code-inline">fn(...[1, 2, 3])</code> is equivalent to <code class="md-code md-code-inline">fn(1, 2, 3)</code></li> <li>Easier concatenation <code class="md-code md-code-inline">[1, 2, ...[3, 4, 5], 6, 7]</code></li> <li>Casts array-likes or iterables into an array, e.g <code class="md-code md-code-inline">[...document.querySelectorAll(&apos;img&apos;)]</code></li> <li>Useful when <a href="https://ponyfoo.com/#assignment-destructuring">destructuring</a> too, <code class="md-code md-code-inline">[a, , ...rest] = [1, 2, 3, 4, 5]</code> yields <code class="md-code md-code-inline">a: 1</code> and <code class="md-code md-code-inline">rest: [3, 4, 5]</code></li> <li>Makes <code class="md-code md-code-inline">new</code> + <code class="md-code md-code-inline">.apply</code> effortless, <code class="md-code md-code-inline">new Date(...[2015, 31, 8])</code></li> </ul> </li> <li>Read <a href="https://ponyfoo.com/articles/es6-spread-and-butter-in-depth" aria-label="ES6 Spread and Butter on Pony Foo">ES6 Spread and Butter in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="arrow-functions">Arrow Functions</h1> <ul> <li>Terse way to declare a function like <code class="md-code md-code-inline">param =&gt; returnValue</code></li> <li>Useful when doing functional stuff like <code class="md-code md-code-inline">[1, 2].map(x =&gt; x * 2)</code></li> <li>Several flavors are available, might take you some getting used to <ul> <li><code class="md-code md-code-inline">p1 =&gt; expr</code> is okay for a single parameter</li> <li><code class="md-code md-code-inline">p1 =&gt; expr</code> has an implicit <code class="md-code md-code-inline">return</code> statement for the provided <code class="md-code md-code-inline">expr</code> expression</li> <li>To return an object implicitly, wrap it in parenthesis <code class="md-code md-code-inline">() =&gt; ({ foo: &apos;bar&apos; })</code> or you&#x2019;ll get <strong>an error</strong></li> <li>Parenthesis are demanded when you have zero, two, or more parameters, <code class="md-code md-code-inline">() =&gt; expr</code> or <code class="md-code md-code-inline">(p1, p2) =&gt; expr</code></li> <li>Brackets in the right-hand side represent a code block that can have multiple statements, <code class="md-code md-code-inline">() =&gt; {}</code></li> <li>When using a code block, there&#x2019;s no implicit <code class="md-code md-code-inline">return</code>, you&#x2019;ll have to provide it &#x2013; <code class="md-code md-code-inline">() =&gt; { return &apos;foo&apos; }</code></li> </ul> </li> <li>You can&#x2019;t name arrow functions statically, but runtimes are now much better at inferring names for most methods</li> <li>Arrow functions are bound to their lexical scope <ul> <li><code class="md-code md-code-inline">this</code> is the same <code class="md-code md-code-inline">this</code> context as in the parent scope</li> <li><code class="md-code md-code-inline">this</code> can&#x2019;t be modified with <code class="md-code md-code-inline">.call</code>, <code class="md-code md-code-inline">.apply</code>, or similar <em>&#x201C;reflection&#x201D;-type</em> methods</li> </ul> </li> <li>Read <a href="https://ponyfoo.com/articles/es6-arrow-functions-in-depth" aria-label="ES6 Arrow Functions on Pony Foo">ES6 Arrow Functions in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="template-literals">Template Literals</h1> <ul> <li>You can declare strings with <code class="md-code md-code-inline">`</code> (backticks), in addition to <code class="md-code md-code-inline">&quot;</code> and <code class="md-code md-code-inline">&apos;</code></li> <li>Strings wrapped in backticks are <em>template literals</em></li> <li>Template literals can be multiline</li> <li>Template literals allow interpolation like <code class="md-code md-code-inline">`ponyfoo.com is ${rating}`</code> where <code class="md-code md-code-inline">rating</code> is a variable</li> <li>You can use any valid JavaScript expressions in the interpolation, such as <code class="md-code md-code-inline">`${2 * 3}`</code> or <code class="md-code md-code-inline">`${foo()}`</code></li> <li>You can use tagged templates to change how expressions are interpolated <ul> <li>Add a <code class="md-code md-code-inline">fn</code> prefix to <code class="md-code md-code-inline">fn`foo, ${bar} and ${baz}`</code></li> <li><code class="md-code md-code-inline">fn</code> is called once with <code class="md-code md-code-inline">template, ...expressions</code></li> <li><code class="md-code md-code-inline">template</code> is <code class="md-code md-code-inline">[&apos;foo, &apos;, &apos; and &apos;, &apos;&apos;]</code> and <code class="md-code md-code-inline">expressions</code> is <code class="md-code md-code-inline">[bar, baz]</code></li> <li>The result of <code class="md-code md-code-inline">fn</code> becomes the value of the template literal</li> <li>Possible use cases include input sanitization of expressions, parameter parsing, etc.</li> </ul> </li> <li>Template literals are almost strictly better than strings wrapped in single or double quotes</li> <li>Read <a href="https://ponyfoo.com/articles/es6-template-strings-in-depth" aria-label="ES6 Template Literals on Pony Foo">ES6 Template Literals in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="object-literals">Object Literals</h1> <ul> <li>Instead of <code class="md-code md-code-inline">{ foo: foo }</code>, you can just do <code class="md-code md-code-inline">{ foo }</code> &#x2013; known as a <em>property value shorthand</em></li> <li>Computed property names, <code class="md-code md-code-inline">{ <mark class="md-mark md-code-mark">[prefix + &apos;Foo&apos;]</mark>: &apos;bar&apos; }</code>, where <code class="md-code md-code-inline">prefix: &apos;moz&apos;</code>, yields <code class="md-code md-code-inline">{ mozFoo: &apos;bar&apos; }</code></li> <li>You can&#x2019;t combine computed property names and property value shorthands, <code class="md-code md-code-inline">{ [foo] }</code> is invalid</li> <li>Method definitions in an object literal can be declared using an alternative, more terse syntax, <code class="md-code md-code-inline">{ foo () {} }</code></li> <li>See also <a href="https://ponyfoo.com/#object"><code class="md-code md-code-inline">Object</code></a> section</li> <li>Read <a href="https://ponyfoo.com/articles/es6-object-literal-features-in-depth" aria-label="ES6 Object Literal Features in Depth on Pony Foo">ES6 Object Literal Features in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="classes">Classes</h1> <ul> <li>Not <em>&#x201C;traditional&#x201D;</em> classes, syntax sugar on top of prototypal inheritance</li> <li>Syntax similar to declaring objects, <code class="md-code md-code-inline">class Foo {}</code></li> <li>Instance methods <em>&#x2013; <code class="md-code md-code-inline">new Foo().bar</code> &#x2013;</em> are declared using the short <a href="https://ponyfoo.com/#object-literals">object literal</a> syntax, <code class="md-code md-code-inline">class Foo { bar () {} }</code></li> <li>Static methods <em>&#x2013; <code class="md-code md-code-inline">Foo.isPonyFoo()</code> &#x2013;</em> need a <code class="md-code md-code-inline">static</code> keyword prefix, <code class="md-code md-code-inline">class Foo { <mark class="md-mark md-code-mark">static</mark> isPonyFoo () {} }</code></li> <li>Constructor method <code class="md-code md-code-inline">class Foo { constructor () { /* initialize instance */ } }</code></li> <li>Prototypal inheritance with a simple syntax <code class="md-code md-code-inline">class PonyFoo <mark class="md-mark md-code-mark">extends</mark> Foo {}</code></li> <li>Read <a href="https://ponyfoo.com/articles/es6-classes-in-depth" aria-label="ES6 Classes in Depth on Pony Foo">ES6 Classes in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="let-and-const">Let and Const</h1> <ul> <li><code class="md-code md-code-inline">let</code> and <code class="md-code md-code-inline">const</code> are alternatives to <code class="md-code md-code-inline">var</code> when declaring variables</li> <li><code class="md-code md-code-inline">let</code> is block-scoped instead of lexically scoped to a <code class="md-code md-code-inline">function</code></li> <li><code class="md-code md-code-inline">let</code> is <a href="https://ponyfoo.com/articles/javascript-variable-hoisting" aria-label="JavaScript Variable Hoisting on Pony Foo">hoisted</a> to the top of the block, while <code class="md-code md-code-inline">var</code> declarations are hoisted to top of the function</li> <li>&#x201C;Temporal Dead Zone&#x201D; &#x2013; TDZ for short <ul> <li>Starts at the beginning of the block where <code class="md-code md-code-inline">let foo</code> was declared</li> <li>Ends where the <code class="md-code md-code-inline">let foo</code> statement was placed in user code <em>(hoisiting is irrelevant here)</em></li> <li>Attempts to access or assign to <code class="md-code md-code-inline">foo</code> within the TDZ <em>(before the <code class="md-code md-code-inline">let foo</code> statement is reached)</em> result in an error</li> <li>Helps prevent mysterious bugs when a variable is manipulated before its declaration is reached</li> </ul> </li> <li><code class="md-code md-code-inline">const</code> is also block-scoped, hoisted, and constrained by TDZ semantics</li> <li><code class="md-code md-code-inline">const</code> variables must be declared using an initializer, <code class="md-code md-code-inline">const foo = &apos;bar&apos;</code></li> <li>Assigning to <code class="md-code md-code-inline">const</code> after initialization fails silently (or <strong>loudly</strong> <em>&#x2013; with an exception &#x2013;</em> under strict mode)</li> <li><code class="md-code md-code-inline">const</code> variables don&#x2019;t make the assigned value immutable <ul> <li><code class="md-code md-code-inline">const foo = { bar: &apos;baz&apos; }</code> means <code class="md-code md-code-inline">foo</code> will always reference the right-hand side object</li> <li><code class="md-code md-code-inline">const foo = { bar: &apos;baz&apos; }; foo.bar = &apos;boo&apos;</code> won&#x2019;t throw</li> </ul> </li> <li>Declaration of a variable by the same name will throw</li> <li>Meant to fix mistakes where you reassign a variable and lose a reference that was passed along somewhere else</li> <li>In ES6, <strong>functions are block scoped</strong> <ul> <li>Prevents leaking block-scoped secrets through hoisting, <code class="md-code md-code-inline">{ <mark class="md-mark md-code-mark">let</mark> _foo = &apos;secret&apos;, bar = <mark class="md-mark md-code-mark">() =&gt; _foo</mark>; }</code></li> <li>Doesn&#x2019;t break user code in most situations, and typically what you wanted anyways</li> </ul> </li> <li>Read <a href="https://ponyfoo.com/articles/es6-let-const-and-temporal-dead-zone-in-depth" aria-label="ES6 Let, Const, and the &apos;Temporal Dead Zone&apos; (TDZ) in Depth on Pony Foo">ES6 Let, Const and the &#x201C;Temporal Dead Zone&#x201D; (TDZ) in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="symbols">Symbols</h1> <ul> <li>A new primitive type in ES6</li> <li>You can create your own symbols using <code class="md-code md-code-inline">var symbol = Symbol()</code></li> <li>You can add a description for debugging purposes, like <code class="md-code md-code-inline">Symbol(<mark class="md-mark md-code-mark">&apos;ponyfoo&apos;</mark>)</code></li> <li>Symbols are immutable and unique. <code class="md-code md-code-inline">Symbol()</code>, <code class="md-code md-code-inline">Symbol()</code>, <code class="md-code md-code-inline">Symbol(&apos;foo&apos;)</code> and <code class="md-code md-code-inline">Symbol(&apos;foo&apos;)</code> are all different</li> <li>Symbols are of type <code class="md-code md-code-inline">symbol</code>, thus: <code class="md-code md-code-inline">typeof Symbol() === &apos;symbol&apos;</code></li> <li>You can also create global symbols with <code class="md-code md-code-inline">Symbol.for(key)</code> <ul> <li>If a symbol with the provided <code class="md-code md-code-inline">key</code> already existed, you get that one back</li> <li>Otherwise, a new symbol is created, using <code class="md-code md-code-inline">key</code> as its description as well</li> <li><code class="md-code md-code-inline">Symbol.keyFor(symbol)</code> is the inverse function, taking a <code class="md-code md-code-inline">symbol</code> and returning its <code class="md-code md-code-inline">key</code></li> <li>Global symbols are <strong>as global as it gets</strong>, or <em>cross-realm</em>. Single registry used to look up these symbols across the runtime <ul> <li><code class="md-code md-code-inline">window</code> context</li> <li><code class="md-code md-code-inline">eval</code> context</li> <li><code class="md-code md-code-inline">&lt;iframe&gt;</code> context, <code class="md-code md-code-inline">Symbol.for(&apos;foo&apos;) === iframe.contentWindow.Symbol.for(&apos;foo&apos;)</code></li> </ul> </li> </ul> </li> <li>There&#x2019;s also &#x201C;well-known&#x201D; symbols <ul> <li>Not on the global registry, accessible through <code class="md-code md-code-inline">Symbol[name]</code>, e.g: <code class="md-code md-code-inline">Symbol.iterator</code></li> <li>Cross-realm, meaning <code class="md-code md-code-inline">Symbol.iterator === iframe.contentWindow.Symbol.iterator</code></li> <li>Used by specification to define protocols, such as the <a href="https://ponyfoo.com/#iterators"><em>iterable</em> protocol</a> over <code class="md-code md-code-inline">Symbol.iterator</code></li> <li>They&#x2019;re not <strong>actually well-known</strong> &#x2013; in colloquial terms</li> </ul> </li> <li>Iterating over symbol properties is hard, but not impossible and definitely not private <ul> <li>Symbols are hidden to all pre-ES6 &#x201C;reflection&#x201D; methods</li> <li>Symbols are accessible through <code class="md-code md-code-inline">Object.getOwnPropertySymbols</code></li> <li>You won&#x2019;t stumble upon them but you <strong>will</strong> find them if <em>actively looking</em></li> </ul> </li> <li>Read <a href="https://ponyfoo.com/articles/es6-symbols-in-depth" aria-label="ES6 Symbols in Depth on Pony Foo">ES6 Symbols in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="iterators">Iterators</h1> <ul> <li>Iterator and iterable protocol define how to iterate over any object, not just arrays and array-likes</li> <li>A well-known <code class="md-code md-code-inline">Symbol</code> is used to assign an iterator to any object</li> <li><code class="md-code md-code-inline">var foo = { [<mark class="md-mark md-code-mark">Symbol.iterator</mark>]: iterable}</code>, or <code class="md-code md-code-inline">foo[<mark class="md-mark md-code-mark">Symbol.iterator</mark>] = iterable</code></li> <li>The <code class="md-code md-code-inline">iterable</code> is a method that returns an <code class="md-code md-code-inline">iterator</code> object that has a <code class="md-code md-code-inline">next</code> method</li> <li>The <code class="md-code md-code-inline">next</code> method returns objects with two properties, <code class="md-code md-code-inline">value</code> and <code class="md-code md-code-inline">done</code> <ul> <li>The <code class="md-code md-code-inline">value</code> property indicates the current value in the sequence being iterated</li> <li>The <code class="md-code md-code-inline">done</code> property indicates whether there are any more items to iterate</li> </ul> </li> <li>Objects that have a <code class="md-code md-code-inline">[Symbol.iterator]</code> value are <em>iterable</em>, because they subscribe to the iterable protocol</li> <li>Some built-ins like <code class="md-code md-code-inline">Array</code>, <code class="md-code md-code-inline">String</code>, or <code class="md-code md-code-inline">arguments</code> &#x2013; and <code class="md-code md-code-inline">NodeList</code> in browsers &#x2013; are iterable by default in ES6</li> <li>Iterable objects can be looped over with <code class="md-code md-code-inline">for..of</code>, such as <code class="md-code md-code-inline">for (let el of document.querySelectorAll(&apos;a&apos;))</code></li> <li>Iterable objects can be synthesized using the spread operator, like <code class="md-code md-code-inline">[...document.querySelectorAll(&apos;a&apos;)]</code></li> <li>You can also use <code class="md-code md-code-inline">Array.from(document.querySelectorAll(&apos;a&apos;))</code> to synthesize an iterable sequence into an array</li> <li>Iterators are <em>lazy</em>, and those that produce an infinite sequence still can lead to valid programs</li> <li>Be careful not to attempt to synthesize an infinite sequence with <code class="md-code md-code-inline">...</code> or <code class="md-code md-code-inline">Array.from</code> as that <strong>will</strong> cause an infinite loop</li> <li>Read <a href="https://ponyfoo.com/articles/es6-iterators-in-depth" aria-label="ES6 Iterators in Depth on Pony Foo">ES6 Iterators in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="generators">Generators</h1> <ul> <li>Generator functions are a special kind of <em>iterator</em> that can be declared using the <code class="md-code md-code-inline"><mark class="md-mark md-code-mark">function*</mark> generator () {}</code> syntax</li> <li>Generator functions use <code class="md-code md-code-inline">yield</code> to emit an element sequence</li> <li>Generator functions can also use <code class="md-code md-code-inline">yield*</code> to delegate to another generator function <em>&#x2013; or any iterable object</em></li> <li>Generator functions return a generator object that&#x2019;s adheres to both the <em>iterable</em> and <em>iterator</em> protocols <ul> <li>Given <code class="md-code md-code-inline">g = generator()</code>, <code class="md-code md-code-inline">g</code> adheres to the iterable protocol because <code class="md-code md-code-inline">g[Symbol.iterator]</code> is a method</li> <li>Given <code class="md-code md-code-inline">g = generator()</code>, <code class="md-code md-code-inline">g</code> adheres to the iterator protocol because <code class="md-code md-code-inline">g.next</code> is a method</li> <li>The iterator for a generator object <code class="md-code md-code-inline">g</code> is the generator itself: <code class="md-code md-code-inline">g[Symbol.iterator]() === g</code></li> </ul> </li> <li>Pull values using <code class="md-code md-code-inline">Array.from(g)</code>, <code class="md-code md-code-inline">[...g]</code>, <code class="md-code md-code-inline">for (let item of g)</code>, or just calling <code class="md-code md-code-inline">g.next()</code></li> <li>Generator function execution is suspended, remembering the last position, in four different cases <ul> <li>A <code class="md-code md-code-inline">yield</code> expression returning the next value in the sequence</li> <li>A <code class="md-code md-code-inline">return</code> statement returning the last value in the sequence</li> <li>A <code class="md-code md-code-inline">throw</code> statement halts execution in the generator entirely</li> <li>Reaching the end of the generator function signals <code class="md-code md-code-inline">{ done: true }</code></li> </ul> </li> <li>Once the <code class="md-code md-code-inline">g</code> sequence has ended, <code class="md-code md-code-inline">g.next()</code> simply returns <code class="md-code md-code-inline">{ done: true }</code> and has no effect</li> <li>It&#x2019;s easy to make asynchronous flows feel synchronous <ul> <li>Take user-provided generator function</li> <li>User code is suspended while asynchronous operations take place</li> <li>Call <code class="md-code md-code-inline">g.next()</code>, unsuspending execution in user code</li> </ul> </li> <li>Read <a href="https://ponyfoo.com/articles/es6-generators-in-depth" aria-label="ES6 Generators in Depth on Pony Foo">ES6 Generators in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="promises">Promises</h1> <ul> <li>Follows the <a href="https://promisesaplus.com/" target="_blank" aria-label="An open standard for sound, interoperable JavaScript promises"><code class="md-code md-code-inline">Promises/A+</code></a> specification, was widely implemented in the wild before ES6 was standarized <em>(e.g <a href="https://github.com/petkaantonov/bluebird" target="_blank" aria-label="petkaantonov/bluebird on GitHub"><code class="md-code md-code-inline">bluebird</code></a>)</em></li> <li>Promises behave like a tree. Add branches with <code class="md-code md-code-inline">p.then(handler)</code> and <code class="md-code md-code-inline">p.catch(handler)</code></li> <li>Create new <code class="md-code md-code-inline">p</code> promises with <code class="md-code md-code-inline">new Promise(<mark class="md-mark md-code-mark">(resolve, reject) =&gt; { /* resolver */ }</mark>)</code> <ul> <li>The <code class="md-code md-code-inline">resolve(value)</code> callback will fulfill the promise with the provided <code class="md-code md-code-inline">value</code></li> <li>The <code class="md-code md-code-inline">reject(reason)</code> callback will reject <code class="md-code md-code-inline">p</code> with a <code class="md-code md-code-inline">reason</code> error</li> <li>You can call those methods asynchronously, blocking deeper branches of the promise tree</li> </ul> </li> <li>Each call to <code class="md-code md-code-inline">p.then</code> and <code class="md-code md-code-inline">p.catch</code> creates another promise that&#x2019;s blocked on <code class="md-code md-code-inline">p</code> being settled</li> <li>Promises start out in <em>pending</em> state and are <strong>settled</strong> when they&#x2019;re either <em>fulfilled</em> or <em>rejected</em></li> <li>Promises can only be settled once, and then they&#x2019;re settled. Settled promises unblock deeper branches</li> <li>You can tack as many promises as you want onto as many branches as you need</li> <li>Each branch will execute either <code class="md-code md-code-inline">.then</code> handlers or <code class="md-code md-code-inline">.catch</code> handlers, never both</li> <li>A <code class="md-code md-code-inline">.then</code> callback can transform the result of the previous branch by returning a value</li> <li>A <code class="md-code md-code-inline">.then</code> callback can block on another promise by returning it</li> <li><code class="md-code md-code-inline">p.catch(fn).catch(fn)</code> won&#x2019;t do what you want &#x2013; unless what you wanted is to catch errors in the error handler</li> <li><a href="https://ponyfoo.com/articles/es6-promises-in-depth#using-promiseresolve-and-promisereject"><code class="md-code md-code-inline">Promise.resolve(value)</code></a> creates a promise that&#x2019;s fulfilled with the provided <code class="md-code md-code-inline">value</code></li> <li><a href="https://ponyfoo.com/articles/es6-promises-in-depth#using-promiseresolve-and-promisereject"><code class="md-code md-code-inline">Promise.reject(reason)</code></a> creates a promise that&#x2019;s rejected with the provided <code class="md-code md-code-inline">reason</code></li> <li><a href="https://ponyfoo.com/articles/es6-promises-in-depth#leveraging-promiseall-and-promiserace"><code class="md-code md-code-inline">Promise.all(...promises)</code></a> creates a promise that settles when all <code class="md-code md-code-inline">...promises</code> are fulfilled or 1 of them is rejected</li> <li><a href="https://ponyfoo.com/articles/es6-promises-in-depth#leveraging-promiseall-and-promiserace"><code class="md-code md-code-inline">Promise.race(...promises)</code></a> creates a promise that settles as soon as 1 of <code class="md-code md-code-inline">...promises</code> is settled</li> <li>Use <a href="http://bevacqua.github.io/promisees/" target="_blank" aria-label="Promisees &#x2014; Promise visualization playground for the adventurous">Promisees</a> &#x2013; the promise visualization playground &#x2013; to better understand promises</li> <li>Read <a href="https://ponyfoo.com/articles/es6-promises-in-depth" aria-label="ES6 Promises in Depth">ES6 Promises in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="maps">Maps</h1> <ul> <li>A replacement to the common pattern of creating a hash-map using plain JavaScript objects <ul> <li>Avoids security issues with user-provided keys</li> <li>Allows keys to be arbitrary values, you can even use DOM elements or functions as the <code class="md-code md-code-inline">key</code> to an entry</li> </ul> </li> <li><code class="md-code md-code-inline">Map</code> adheres to <em><a href="https://ponyfoo.com/#iterators">iterable</a></em> protocol</li> <li>Create a <code class="md-code md-code-inline">map</code> using <code class="md-code md-code-inline">new Map()</code></li> <li>Initialize a map with an <code class="md-code md-code-inline">iterable</code> like <code class="md-code md-code-inline">[[key1, value1], [key2, value2]]</code> in <code class="md-code md-code-inline">new Map(iterable)</code></li> <li>Use <code class="md-code md-code-inline">map.set(key, value)</code> to add entries</li> <li>Use <code class="md-code md-code-inline">map.get(key)</code> to get an entry</li> <li>Check for a <code class="md-code md-code-inline">key</code> using <code class="md-code md-code-inline">map.has(key)</code></li> <li>Remove entries with <code class="md-code md-code-inline">map.delete(key)</code></li> <li>Iterate over <code class="md-code md-code-inline">map</code> with <code class="md-code md-code-inline">for (let [key, value] of map)</code>, the spread operator, <code class="md-code md-code-inline">Array.from</code>, etc</li> <li>Read <a href="https://ponyfoo.com/articles/es6-maps-in-depth" aria-label="ES6 Maps in Depth on Pony Foo">ES6 Maps in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="weakmaps">WeakMaps</h1> <ul> <li>Similar to <code class="md-code md-code-inline">Map</code>, but not quite the same</li> <li><code class="md-code md-code-inline">WeakMap</code> isn&#x2019;t iterable, so you don&#x2019;t get enumeration methods like <code class="md-code md-code-inline">.forEach</code>, <code class="md-code md-code-inline">.clear</code>, and others you had in <code class="md-code md-code-inline">Map</code></li> <li><code class="md-code md-code-inline">WeakMap</code> keys must be reference types. You can&#x2019;t use value types like symbols, numbers, or strings as keys</li> <li><code class="md-code md-code-inline">WeakMap</code> entries with a <code class="md-code md-code-inline">key</code> that&#x2019;s the only reference to the referenced variable are subject to garbage collection</li> <li>That last point means <code class="md-code md-code-inline">WeakMap</code> is great at keeping around metadata for objects, while those objects are still in use</li> <li>You avoid memory leaks, without manual reference counting &#x2013; think of <code class="md-code md-code-inline">WeakMap</code> as <a href="https://msdn.microsoft.com/en-us/library/system.idisposable%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396" target="_blank" aria-label="IDisposable on MSDN"><code class="md-code md-code-inline">IDisposable</code></a> in .NET</li> <li>Read <a href="https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth#es6-weakmaps" aria-label="ES6 WeakMaps, Sets, and WeakSets in Depth on Pony Foo">ES6 WeakMaps in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="sets">Sets</h1> <ul> <li>Similar to <code class="md-code md-code-inline">Map</code>, but not quite the same</li> <li><code class="md-code md-code-inline">Set</code> doesn&#x2019;t have keys, there&#x2019;s only values</li> <li><code class="md-code md-code-inline">set.set(value)</code> doesn&#x2019;t look right, so we have <code class="md-code md-code-inline">set.add(value)</code> instead</li> <li>Sets can&#x2019;t have duplicate values because the values are also used as keys</li> <li>Read <a href="https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth#es6-sets" aria-label="ES6 WeakMaps, Sets, and WeakSets in Depth on Pony Foo">ES6 Sets in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="weaksets">WeakSets</h1> <ul> <li><code class="md-code md-code-inline">WeakSet</code> is sort of a cross-breed between <code class="md-code md-code-inline">Set</code> and <code class="md-code md-code-inline">WeakMap</code></li> <li>A <code class="md-code md-code-inline">WeakSet</code> is a set that can&#x2019;t be iterated and doesn&#x2019;t have enumeration methods</li> <li><code class="md-code md-code-inline">WeakSet</code> values must be reference types</li> <li><code class="md-code md-code-inline">WeakSet</code> may be useful for a metadata table indicating whether a reference is actively in use or not</li> <li>Read <a href="https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth#es6-weaksets" aria-label="ES6 WeakMaps, Sets, and WeakSets in Depth on Pony Foo">ES6 WeakSets in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="proxies">Proxies</h1> <ul> <li>Proxies are created with <code class="md-code md-code-inline">new Proxy(target, handler)</code>, where <code class="md-code md-code-inline">target</code> is any object and <code class="md-code md-code-inline">handler</code> is configuration</li> <li>The default behavior of a <code class="md-code md-code-inline">proxy</code> acts as a passthrough to the underlying <code class="md-code md-code-inline">target</code> object</li> <li>Handlers determine how the underlying <code class="md-code md-code-inline">target</code> object is accessed on top of regular object property access semantics</li> <li>You pass off references to <code class="md-code md-code-inline">proxy</code> and retain strict control over how <code class="md-code md-code-inline">target</code> can be interacted with</li> <li>Handlers are also known as traps, these terms are used interchangeably</li> <li>You can create <strong>revocable</strong> proxies with <code class="md-code md-code-inline">Proxy.revocable(target, handler)</code> <ul> <li>That method returns an object with <code class="md-code md-code-inline">proxy</code> and <code class="md-code md-code-inline">revoke</code> properties</li> <li>You could <a href="https://ponyfoo.com/#destructuring">destructure</a> <code class="md-code md-code-inline">var <mark class="md-mark md-code-mark">{proxy, revoke}</mark> = Proxy.revocable(target, handler)</code> for convenience</li> <li>You can configure the <code class="md-code md-code-inline">proxy</code> all the same as with <code class="md-code md-code-inline">new Proxy(target, handler)</code></li> <li>After <code class="md-code md-code-inline">revoke()</code> is called, the <code class="md-code md-code-inline">proxy</code> will <strong>throw</strong> on <em>any operation</em>, making it convenient when you can&#x2019;t trust consumers</li> </ul> </li> <li><a href="https://ponyfoo.com/articles/es6-proxies-in-depth#get"><code class="md-code md-code-inline">get</code></a> &#x2013; traps <code class="md-code md-code-inline">proxy.prop</code> and <code class="md-code md-code-inline">proxy[&apos;prop&apos;]</code></li> <li><a href="https://ponyfoo.com/articles/es6-proxies-in-depth#set"><code class="md-code md-code-inline">set</code></a> &#x2013; traps <code class="md-code md-code-inline">proxy.prop = value</code> and <code class="md-code md-code-inline">proxy[&apos;prop&apos;] = value</code></li> <li><a href="https://ponyfoo.com/articles/es6-proxy-traps-in-depth#has"><code class="md-code md-code-inline">has</code></a> &#x2013; traps <code class="md-code md-code-inline">in</code> operator</li> <li><a href="https://ponyfoo.com/articles/es6-proxy-traps-in-depth#deleteproperty"><code class="md-code md-code-inline">deleteProperty</code></a> &#x2013; traps <code class="md-code md-code-inline">delete</code> operator</li> <li><a href="https://ponyfoo.com/articles/es6-proxy-traps-in-depth#defineproperty"><code class="md-code md-code-inline">defineProperty</code></a> &#x2013; traps <code class="md-code md-code-inline">Object.defineProperty</code> and declarative alternatives</li> <li><a href="https://ponyfoo.com/articles/es6-proxy-traps-in-depth#enumerate"><code class="md-code md-code-inline">enumerate</code></a> &#x2013; traps <code class="md-code md-code-inline">for..in</code> loops</li> <li><a href="https://ponyfoo.com/articles/es6-proxy-traps-in-depth#ownkeys"><code class="md-code md-code-inline">ownKeys</code></a> &#x2013; traps <code class="md-code md-code-inline">Object.keys</code> and related methods</li> <li><a href="https://ponyfoo.com/articles/es6-proxy-traps-in-depth#apply"><code class="md-code md-code-inline">apply</code></a> &#x2013; traps <em>function calls</em></li> <li><a href="https://ponyfoo.com/articles/morees6-proxy-traps-in-depth#construct"><code class="md-code md-code-inline">construct</code></a> &#x2013; traps usage of the <code class="md-code md-code-inline">new</code> operator</li> <li><a href="https://ponyfoo.com/articles/morees6-proxy-traps-in-depth#getprototypeof"><code class="md-code md-code-inline">getPrototypeOf</code></a> &#x2013; traps internal calls to <code class="md-code md-code-inline">[[GetPrototypeOf]]</code></li> <li><a href="https://ponyfoo.com/articles/morees6-proxy-traps-in-depth#setprototypeof"><code class="md-code md-code-inline">setPrototypeOf</code></a> &#x2013; traps calls to <code class="md-code md-code-inline">Object.setPrototypeOf</code></li> <li><a href="https://ponyfoo.com/articles/morees6-proxy-traps-in-depth#isextensible"><code class="md-code md-code-inline">isExtensible</code></a> &#x2013; traps calls to <code class="md-code md-code-inline">Object.isExtensible</code></li> <li><a href="https://ponyfoo.com/articles/morees6-proxy-traps-in-depth#preventextensions"><code class="md-code md-code-inline">preventExtensions</code></a> &#x2013; traps calls to <code class="md-code md-code-inline">Object.preventExtensions</code></li> <li><a href="https://ponyfoo.com/articles/morees6-proxy-traps-in-depth#getownpropertydescriptor"><code class="md-code md-code-inline">getOwnPropertyDescriptor</code></a> &#x2013; traps calls to <code class="md-code md-code-inline">Object.getOwnPropertyDescriptor</code></li> <li>Read <a href="https://ponyfoo.com/articles/es6-proxies-in-depth" aria-label="ES6 Proxies in Depth on Pony Foo">ES6 Proxies in Depth</a></li> <li>Read <a href="https://ponyfoo.com/articles/es6-proxy-traps-in-depth" aria-label="ES6 Proxy Traps in Depth on Pony Foo">ES6 Proxy Traps in Depth</a></li> <li>Read <a href="https://ponyfoo.com/articles/more-es6-proxy-traps-in-depth" aria-label="More ES6 Proxy Traps in Depth on Pony Foo">More ES6 Proxy Traps in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="reflection">Reflection</h1> <ul> <li><code class="md-code md-code-inline">Reflection</code> is a new static built-in (think of <code class="md-code md-code-inline">Math</code>) in ES6</li> <li><code class="md-code md-code-inline">Reflection</code> methods have sensible internals, e.g <code class="md-code md-code-inline">Reflect.defineProperty</code> returns a boolean instead of throwing</li> <li>There&#x2019;s a <code class="md-code md-code-inline">Reflection</code> method for each proxy trap handler, and they represent the default behavior of each trap</li> <li>Going forward, new reflection methods in the same vein as <code class="md-code md-code-inline">Object.keys</code> will be placed in the <code class="md-code md-code-inline">Reflection</code> namespace</li> <li>Read <a href="https://ponyfoo.com/articles/es6-reflection-in-depth" aria-label="ES6 Reflection in Depth on Pony Foo">ES6 Reflection in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="number"><code class="md-code md-code-inline">Number</code></h1> <ul> <li>Use <code class="md-code md-code-inline">0b</code> prefix for binary, and <code class="md-code md-code-inline">0o</code> prefix for octal integer literals</li> <li><code class="md-code md-code-inline">Number.isNaN</code> and <code class="md-code md-code-inline">Number.isFinite</code> are like their global namesakes, except that they <em>don&#x2019;t</em> coerce input to <code class="md-code md-code-inline">Number</code></li> <li><code class="md-code md-code-inline">Number.parseInt</code> and <code class="md-code md-code-inline">Number.parseFloat</code> are exactly the same as their global namesakes</li> <li><code class="md-code md-code-inline">Number.isInteger</code> checks if input is a <code class="md-code md-code-inline">Number</code> value that doesn&#x2019;t have a decimal part</li> <li><code class="md-code md-code-inline">Number.EPSILON</code> helps figure out negligible differences between two numbers &#x2013; e.g. <code class="md-code md-code-inline">0.1 + 0.2</code> and <code class="md-code md-code-inline">0.3</code></li> <li><code class="md-code md-code-inline">Number.MAX_SAFE_INTEGER</code> is the largest integer that can be safely and precisely represented in JavaScript</li> <li><code class="md-code md-code-inline">Number.MIN_SAFE_INTEGER</code> is the smallest integer that can be safely and precisely represented in JavaScript</li> <li><code class="md-code md-code-inline">Number.isSafeInteger</code> checks whether an integer is within those bounds, able to be represented safely and precisely</li> <li>Read <a href="https://ponyfoo.com/articles/es6-number-improvements-in-depth" aria-label="ES6 Number Improvements in Depth on Pony Foo">ES6 <code class="md-code md-code-inline">Number</code> Improvements in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="math"><code class="md-code md-code-inline">Math</code></h1> <ul> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathsign"><code class="md-code md-code-inline">Math.sign</code></a> &#x2013; sign function of a number</li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathtrunc"><code class="md-code md-code-inline">Math.trunc</code></a> &#x2013; integer part of a number</li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathcbrt"><code class="md-code md-code-inline">Math.cbrt</code></a> &#x2013; cubic root of value, or <code class="md-code md-code-inline">&#x221B;&#x203E;value</code></li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathexpm1"><code class="md-code md-code-inline">Math.expm1</code></a> &#x2013; <code class="md-code md-code-inline">e</code> to the <code class="md-code md-code-inline">value</code> minus <code class="md-code md-code-inline">1</code>, or <code class="md-code md-code-inline">e<sup>value</sup> - 1</code></li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathlog1p"><code class="md-code md-code-inline">Math.log1p</code></a> &#x2013; natural logarithm of <code class="md-code md-code-inline">value + 1</code>, or <code class="md-code md-code-inline"><em>ln</em>(value + 1)</code></li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathlog10"><code class="md-code md-code-inline">Math.log10</code></a> &#x2013; base 10 logarithm of <code class="md-code md-code-inline">value</code>, or <code class="md-code md-code-inline"><em>log</em><sub>10</sub>(value)</code></li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathlog2"><code class="md-code md-code-inline">Math.log2</code></a> &#x2013; base 2 logarithm of <code class="md-code md-code-inline">value</code>, or <code class="md-code md-code-inline"><em>log</em><sub>2</sub>(value)</code></li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathsinh"><code class="md-code md-code-inline">Math.sinh</code></a> &#x2013; hyperbolic sine of a number</li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathcosh"><code class="md-code md-code-inline">Math.cosh</code></a> &#x2013; hyperbolic cosine of a number</li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathtanh"><code class="md-code md-code-inline">Math.tanh</code></a> &#x2013; hyperbolic tangent of a number</li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathasinh"><code class="md-code md-code-inline">Math.asinh</code></a> &#x2013; hyperbolic arc-sine of a number</li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathacosh"><code class="md-code md-code-inline">Math.acosh</code></a> &#x2013; hyperbolic arc-cosine of a number</li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathatanh"><code class="md-code md-code-inline">Math.atanh</code></a> &#x2013; hyperbolic arc-tangent of a number</li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathhypot"><code class="md-code md-code-inline">Math.hypot</code></a> &#x2013; square root of the sum of squares</li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathclz32"><code class="md-code md-code-inline">Math.clz32</code></a> &#x2013; leading zero bits in the 32-bit representation of a number</li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathimul"><code class="md-code md-code-inline">Math.imul</code></a> &#x2013; <em>C-like</em> 32-bit multiplication</li> <li><a href="https://ponyfoo.com/articles/es6-math-additions-in-depth#mathfround"><code class="md-code md-code-inline">Math.fround</code></a> &#x2013; nearest single-precision float representation of a number</li> <li>Read <a href="https://ponyfoo.com/articles/es6-math-additions-in-depth" aria-label="ES6 Math Additions in Depth on Pony Foo">ES6 <code class="md-code md-code-inline">Math</code> Additions in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="array"><code class="md-code md-code-inline">Array</code></h1> <ul> <li><a href="https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayfrom"><code class="md-code md-code-inline">Array.from</code></a> &#x2013; create <code class="md-code md-code-inline">Array</code> instances from arraylike objects like <code class="md-code md-code-inline">arguments</code> or iterables</li> <li><a href="https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayof"><code class="md-code md-code-inline">Array.of</code></a> &#x2013; similar to <code class="md-code md-code-inline">new Array(...items)</code>, but without special cases</li> <li><a href="https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypecopywithin"><code class="md-code md-code-inline">Array.prototype.copyWithin</code></a> &#x2013; copies a sequence of array elements into somewhere else in the array</li> <li><a href="https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypefill"><code class="md-code md-code-inline">Array.prototype.fill</code></a> &#x2013; fills all elements of an existing array with the provided value</li> <li><a href="https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypefind"><code class="md-code md-code-inline">Array.prototype.find</code></a> &#x2013; returns the first item to satisfy a callback</li> <li><a href="https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypefindindex"><code class="md-code md-code-inline">Array.prototype.findIndex</code></a> &#x2013; returns the index of the first item to satisfy a callback</li> <li><a href="https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypekeys"><code class="md-code md-code-inline">Array.prototype.keys</code></a> &#x2013; returns an iterator that yields a sequence holding the keys for the array</li> <li><a href="https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypevalues"><code class="md-code md-code-inline">Array.prototype.values</code></a> &#x2013; returns an iterator that yields a sequence holding the values for the array</li> <li><a href="https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypeentries"><code class="md-code md-code-inline">Array.prototype.entries</code></a> &#x2013; returns an iterator that yields a sequence holding key value pairs for the array</li> <li><a href="https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototype-symboliterator"><code class="md-code md-code-inline">Array.prototype[Symbol.iterator]</code></a> &#x2013; exactly the same as the <a href="https://ponyfoo.com/articles/es6-array-extensions-in-depth#arrayprototypevalues"><code class="md-code md-code-inline">Array.prototype.values</code></a> method</li> <li>Read <a href="https://ponyfoo.com/articles/es6-array-extensions-in-depth" aria-label="ES6 Array Extensions in Depth on Pony Foo">ES6 <code class="md-code md-code-inline">Array</code> Extensions in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="object"><code class="md-code md-code-inline">Object</code></h1> <ul> <li><a href="https://ponyfoo.com/articles/es6-object-changes-in-depth#objectassign"><code class="md-code md-code-inline">Object.assign</code></a> &#x2013; recursive shallow overwrite for properties from <code class="md-code md-code-inline">target, ...objects</code></li> <li><a href="https://ponyfoo.com/articles/es6-object-changes-in-depth#objectis"><code class="md-code md-code-inline">Object.is</code></a> &#x2013; like using the <code class="md-code md-code-inline">===</code> operator programmatically, except it&#x2019;s <code class="md-code md-code-inline">true</code> for <code class="md-code md-code-inline">NaN</code> vs <code class="md-code md-code-inline">NaN</code> and <code class="md-code md-code-inline">false</code> for <code class="md-code md-code-inline">+0</code> vs <code class="md-code md-code-inline">-0</code></li> <li><a href="https://ponyfoo.com/articles/es6-object-changes-in-depth#objectgetownpropertysymbols"><code class="md-code md-code-inline">Object.getOwnPropertySymbols</code></a> &#x2013; returns all own property symbols found on an object</li> <li><a href="https://ponyfoo.com/articles/es6-object-changes-in-depth#objectsetprototypeof"><code class="md-code md-code-inline">Object.setPrototypeOf</code></a> &#x2013; changes prototype. Equivalent to <code class="md-code md-code-inline">Object.prototype.__proto__</code> setter</li> <li>See also <a href="https://ponyfoo.com/#object-literals">Object Literals</a> section</li> <li>Read <a href="https://ponyfoo.com/articles/es6-object-changes-in-depth" aria-label="ES6 Object Changes in Depth on Pony Foo">ES6 <code class="md-code md-code-inline">Object</code> Changes in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="strings-and-unicode">Strings and Unicode</h1> <ul> <li>String Manipulation <ul> <li><a href="https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringprototypestartswith"><code class="md-code md-code-inline">String.prototype.startsWith</code></a> &#x2013; whether the string starts with <code class="md-code md-code-inline">value</code></li> <li><a href="https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringprototypeendswith"><code class="md-code md-code-inline">String.prototype.endsWith</code></a> &#x2013; whether the string ends in <code class="md-code md-code-inline">value</code></li> <li><a href="https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringprototypeincludes"><code class="md-code md-code-inline">String.prototype.includes</code></a> &#x2013; whether the string contains <code class="md-code md-code-inline">value</code> anywhere</li> <li><a href="https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringprototyperepeat"><code class="md-code md-code-inline">String.prototype.repeat</code></a> &#x2013; returns the string repeated <code class="md-code md-code-inline">amount</code> times</li> <li><a href="https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringprototype-symboliterator"><code class="md-code md-code-inline">String.prototype[Symbol.iterator]</code></a> &#x2013; lets you iterate over a sequence of unicode code points <em>(not characters)</em></li> </ul> </li> <li><a href="https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#unicode">Unicode</a> <ul> <li><a href="https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringprototypecodepointat"><code class="md-code md-code-inline">String.prototype.codePointAt</code></a> &#x2013; base-10 numeric representation of a code point at a given position in string</li> <li><a href="https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringfromcodepoint%60"><code class="md-code md-code-inline">String.fromCodePoint</code></a> &#x2013; given <code class="md-code md-code-inline">...codepoints</code>, returns a string made of their unicode representations</li> <li><a href="https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth#stringprototypenormalize"><code class="md-code md-code-inline">String.prototype.normalize</code></a> &#x2013; returns a normalized version of the string&#x2019;s unicode representation</li> </ul> </li> <li>Read <a href="https://ponyfoo.com/articles/es6-strings-and-unicode-in-depth" aria-label="ES6 Strings (and Unicode, &#x2764;) in Depth">ES6 Strings and Unicode Additions in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <h1 id="modules">Modules</h1> <ul> <li><a href="https://ponyfoo.com/articles/es6-modules-in-depth#strict-mode">Strict Mode</a> is turned on by default in the ES6 module system</li> <li>ES6 modules are files that <a href="https://ponyfoo.com/articles/es6-modules-in-depth#export"><code class="md-code md-code-inline">export</code></a> an API</li> <li><a href="https://ponyfoo.com/articles/es6-modules-in-depth#exporting-a-default-binding"><code class="md-code md-code-inline">export default value</code></a> exports a default binding</li> <li><a href="https://ponyfoo.com/articles/es6-modules-in-depth#named-exports"><code class="md-code md-code-inline">export var foo = &apos;bar&apos;</code></a> exports a named binding</li> <li>Named exports are bindings that <a href="https://ponyfoo.com/articles/es6-modules-in-depth#bindings-not-values">can be changed</a> at any time from the module that&#x2019;s exporting them</li> <li><code class="md-code md-code-inline">export { foo, bar }</code> exports <a href="https://ponyfoo.com/articles/es6-modules-in-depth#exporting-lists">a list of named exports</a></li> <li><code class="md-code md-code-inline">export { foo <mark class="md-mark md-code-mark">as ponyfoo</mark> }</code> aliases the export to be referenced as <code class="md-code md-code-inline">ponyfoo</code> instead</li> <li><code class="md-code md-code-inline">export { foo <mark class="md-mark md-code-mark">as default</mark> }</code> marks the named export as the default export</li> <li>As <a href="https://ponyfoo.com/articles/es6-modules-in-depth#best-practices-and-export">a best practice</a>, <code class="md-code md-code-inline">export default api</code> at the end of all your modules, where <code class="md-code md-code-inline">api</code> is an object, avoids confusion</li> <li>Module loading is implementation-specific, allows interoperation with CommonJS</li> <li><a href="https://ponyfoo.com/articles/es6-modules-in-depth#import"><code class="md-code md-code-inline">import &apos;foo&apos;</code></a> loads the <code class="md-code md-code-inline">foo</code> module into the current module</li> <li><a href="https://ponyfoo.com/articles/es6-modules-in-depth#importing-default-exports"><code class="md-code md-code-inline">import <mark class="md-mark md-code-mark">foo from</mark> &apos;ponyfoo&apos;</code></a> assigns the default export of <code class="md-code md-code-inline">ponyfoo</code> to a local <code class="md-code md-code-inline">foo</code> variable</li> <li><a href="https://ponyfoo.com/articles/es6-modules-in-depth#importing-named-exports"><code class="md-code md-code-inline">import {foo, bar} from &apos;baz&apos;</code></a> imports named exports <code class="md-code md-code-inline">foo</code> and <code class="md-code md-code-inline">bar</code> from the <code class="md-code md-code-inline">baz</code> module</li> <li><code class="md-code md-code-inline">import {foo <mark class="md-mark md-code-mark">as bar</mark>} from &apos;baz&apos;</code> imports named export <code class="md-code md-code-inline">foo</code> but aliased as a <code class="md-code md-code-inline">bar</code> variable</li> <li><code class="md-code md-code-inline">import {default} from &apos;foo&apos;</code> also imports the default export</li> <li><code class="md-code md-code-inline">import {default <mark class="md-mark md-code-mark">as bar</mark>} from &apos;foo&apos;</code> imports the default export aliased as <code class="md-code md-code-inline">bar</code></li> <li><code class="md-code md-code-inline">import foo, {bar, baz} from &apos;foo&apos;</code> mixes default <code class="md-code md-code-inline">foo</code> with named exports <code class="md-code md-code-inline">bar</code> and <code class="md-code md-code-inline">baz</code> in one declaration</li> <li><a href="https://ponyfoo.com/articles/es6-modules-in-depth#import-all-the-things"><code class="md-code md-code-inline">import * as foo from &apos;foo&apos;</code></a> imports the namespace object <ul> <li>Contains all named exports in <code class="md-code md-code-inline">foo[name]</code></li> <li>Contains the default export in <code class="md-code md-code-inline">foo.default</code>, if a default export was declared in the module</li> </ul> </li> <li>Read <a href="https://ponyfoo.com/articles/es6-modules-in-depth" aria-label="ES6 Modules in Depth on Pony Foo">ES6 Modules Additions in Depth</a></li> </ul> <p><sup><a href="https://ponyfoo.com/#table-of-contents">(back to table of contents)</a></sup></p> <p>Time for a bullet point detox. Then again, I <em>did warn you</em> to read the <a href="https://ponyfoo.com/articles/tagged/es6-in-depth" aria-label="ES6 in Depth on Pony Foo">article series</a> instead. Don&#x2019;t forget to subscribe and maybe even <a href="http://patreon.com/bevacqua" target="_blank" aria-label="My Patreon Account">contribute to keep Pony Foo alive</a>. Also, did you try the <a href="https://en.wikipedia.org/wiki/Konami_Code" target="_blank">Konami code</a> just yet?</p></div>
