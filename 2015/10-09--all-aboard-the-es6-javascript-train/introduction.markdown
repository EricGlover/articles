Understanding the new language features, and how they can be used, will help you decide whether to adopt ES6 or stay in the ES5 camp. You may want to be on the bleeding edge and consider ES6 a critical addition to the productivity of your team, but it comes at the cost of you and your team learning ES6. To date, no browser has 100% coverage on ES6. The specification is still fresh, and implementations are under active development. Relying solely on JavaScript engines of today means that you'll find many ES6 features work improperly, are only partially implemented, or are completely missing. The solution is to use a transpiler.

Transpilation is just a fancy way of saying compilation between similar languages. By using a transpiler to transform ES6 code into ES5, browsers -- which have great ES5 support nowadays -- can interpret ES6 without complaining, since you feed them the compiled ES5 code. Transpilers provide a consistent baseline for your ES6 programs, but they aren't perfect. Proxies, for example, are very hard to represent in ES5 code, and are unavailable to transpilers.

You can use the online [Babel REPL](http://babeljs.io/repl/) to try out the examples in this article. You can write ES6 code on the left, and see the transpiled version change in real-time on the right. It's a treat when it comes to learning ES6! As for developing entire applications in ES6, your best bet is to pair the Babel transpiler with Webpack or Browserify to handle multiple interconnected small modules.
