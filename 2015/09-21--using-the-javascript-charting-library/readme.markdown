<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/using-the-javascript-charting-library">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/using-the-javascript-charting-library"><div><img src="https://i.imgur.com/1BI5T8V.jpg" alt="Using the JavaScript Charting Library"></div></a>

<h1>Using the JavaScript Charting Library</h1>

<p><kbd>jscharting</kbd> <kbd>visualizations</kbd> <kbd>product-review</kbd></p>

<blockquote><p>I&#x2019;ve been asked to review the <a href="http://jscharting.com/" target="_blank">JSCharting</a> enterprise charting library, and given that I&#x2019;ve <a href="http://bevacqua.github.io/promisees" target="_blank">recently dabbled in visualizations</a> I felt like this was a great &#x2026;</p></blockquote>

<div><p>I&#x2019;ve been asked to review the <a href="http://jscharting.com/" target="_blank">JSCharting</a> enterprise charting library, and given that I&#x2019;ve <a href="http://bevacqua.github.io/promisees" target="_blank">recently dabbled in visualizations</a> I felt like this was a great opportunity to further explore them in JavaScript. JSCharting enables you to make visualizations in JavaScript using a declarative interface that renders SVG graphics.</p></div>

<blockquote></blockquote>

<div><p>JSCharting specializes in rendering all kinds of charts &#x2013; including geographic representations of data like a <a href="http://jscharting.com/Editor/index.htm#name=MapThematicSales.htm" target="_blank"><em>&#x201C;sales by state&#x201D;</em></a> chart. Another cool example is this visualization of the average temperature in Chicago plotted over time.</p> <figure><a href="http://jscharting.com/Samples/Javascript_AreaRange_Chart.htm" target="_blank"><img src="https://i.imgur.com/oWjtKUu.png" alt="A visualization of the average temperature in Chicago"></a><figcaption>A visualization of the average temperature in Chicago</figcaption></figure> <p>For a full list of chart types and examples, you should <a href="http://jscharting.com/typeGallery.htm" target="_blank">visit their website</a> &#x2013; it has a comprehensive selection of charts demonstrating the different features in JSCharting. You might want to check out their <a href="http://jscharting.com/timeline.htm" target="_blank">release history visualization</a> for a better understanding of the kinds of features they have. In this article we&#x2019;ll explore the kinds of visualizations that you can perform using JSCharting.</p></div>

<div><p>Let&#x2019;s start by <em>installing</em> the library.</p> <h1 id="getting-started">Getting Started</h1> <p>To install JSCharting you&#x2019;ll need to register for a <a href="http://jscharting.com/download.aspx" target="_blank" aria-label="Download JSCharting">free trial</a> and then download the development bundle <code class="md-code md-code-inline">.zip</code>. After extracting it into a <code class="md-code md-code-inline">bundle</code> directory, you&#x2019;ll have everything you need to start using the library. As a first example, you could create an HTML page like the one below. Note that the library depends on jQuery. We&#x2019;ll also add a <code class="md-code md-code-inline">&lt;div&gt;</code> where we&#x2019;ll be rendering our first chart, and a <code class="md-code md-code-inline">&lt;script src=&apos;example.js</code>&gt;` where we&#x2019;ll add our charting code.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">div</span> <span class="md-code-attribute">id</span>=<span class="md-code-value">&apos;chart&apos;</span>&gt;</span><span class="md-code-tag">&lt;/<span class="md-code-title">div</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">script</span> <span class="md-code-attribute">src</span>=<span class="md-code-value">&apos;bundle/jsc/jquery-latest.min.js&apos;</span>&gt;</span><span></span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">script</span> <span class="md-code-attribute">src</span>=<span class="md-code-value">&apos;bundle/jsc/jscharting.js&apos;</span>&gt;</span><span></span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">script</span> <span class="md-code-attribute">src</span>=<span class="md-code-value">&apos;example.js&apos;</span>&gt;</span><span></span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>
</code></pre> <p>As for our first steps into the charting world, below you&#x2019;ll find the code necessary to render our first chart. The <code class="md-code md-code-inline">targetElement</code> option specifies the HTML <code class="md-code md-code-inline">id</code> attribute for our container &#x2013; where JSCharting will append an <code class="md-code md-code-inline">&lt;svg&gt;</code> element. The <code class="md-code md-code-inline">series</code> option can be used to indicate point series we want to render. We gave the series a <code class="md-code md-code-inline">name</code>, and it also takes a collection of points. In this case we have a single point consisting of a date for the horizontal <code class="md-code md-code-inline">x</code> axis and a floating point number for the <code class="md-code md-code-inline">y</code> axis. You can specify as many points as your point series needs. Once the options have been configured, you can create the chart by calling <code class="md-code md-code-inline">new JSC.Chart(options)</code>, as seen below.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> options = {
  <mark class="md-mark md-code-mark">targetElement</mark>: <span class="md-code-string">&apos;chart&apos;</span>,
  series: [{
    name: <span class="md-code-string">&apos;Purchases&apos;</span>,
    <mark class="md-mark md-code-mark">points</mark>: [
      [<span class="md-code-keyword">new</span> <span class="md-code-built_in">Date</span>(<span class="md-code-number">2010</span>, <span class="md-code-number">0</span>, <span class="md-code-number">1</span>), <span class="md-code-number">29.9</span>]
    ]
  }]
};
<span class="md-code-keyword">var</span> chart = <span class="md-code-keyword">new</span> JSC.Chart(options);
</code></pre> <p>Of course, doing that would just render a chart with a single point on it <em>&#x2013; not that exciting.</em> Let&#x2019;s add a few more points, and let&#x2019;s pull those points from my GitHub account&#x2019;s public contribution activity.</p> <h1 id="charting-github-commit-activity">Charting GitHub Commit Activity</h1> <p>We&#x2019;ll be using the brand new <code class="md-code md-code-inline">fetch</code> API for this one as well. The following piece of code pulls down <a href="https://github.com/bevacqua?tab=activity" target="_blank" aria-label="Account activity on GitHub for @bevacqua">public events</a> broadcasted by my GitHub account, filters out all non-push events <em>(such as commenting or other interactions with the GitHub UI)</em>, it then <em>reduces</em> those events into contribution counts by date, and finally they&#x2019;re printed to the <code class="md-code md-code-inline">console</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><mark class="md-mark md-code-mark">fetch</mark>(<span class="md-code-string">&apos;https://api.github.com/users/bevacqua/events/public&apos;</span>)
  .then(response =&gt; response.json())
  .then(events =&gt; events
    <mark class="md-mark md-code-mark">.filter</mark>(event =&gt; event.type === <span class="md-code-string">&apos;PushEvent&apos;</span>)
    .reduce(<mark class="md-mark md-code-mark">merge</mark>, {})
  )
  .catch(error =&gt; ({}))
  .then(<mark class="md-mark md-code-mark">data =&gt; <span class="md-code-built_in">console</span>.log(data)</mark>)
  <span class="md-code-comment">// { 2015-09-21: 7, 2015-09-19: 1, 2015-09-18: 3 }</span>

<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">merge</span> <span class="md-code-params">(counts, push)</span> </span>{
  <span class="md-code-keyword">var</span> date = push.created_at.slice(<span class="md-code-number">0</span>, <span class="md-code-number">10</span>)
  <span class="md-code-keyword">if</span> (date <span class="md-code-keyword">in</span> counts) {
    counts[date]++
  } <span class="md-code-keyword">else</span> {
    counts[date] = <span class="md-code-number">1</span>
  }
  <span class="md-code-keyword">return</span> counts
}
</code></pre> <p><em><sub>Check out the <a href="http://buff.ly/1QufaWu" target="_blank" aria-label="Promisees visualization for the GitHub activity fetch">promisees visualization</a> of that code. If you&#x2019;re confused about the <code class="md-code md-code-inline">=&gt;</code> notation in the code below, refer to my <a href="https://ponyfoo.com/articles/es6-arrow-functions-in-depth" aria-label="ES6 Arrow Functions in Depth on Pony Foo">arrow functions in ES6</a> article.</sub></em></p> <p>Now that we have the counts for each date, we should map them into something JSCharting understands &#x2013; a bi-dimensional <code class="md-code md-code-inline">[[date, count]]</code> array. We can use <code class="md-code md-code-inline">Object.keys</code> and <code class="md-code md-code-inline">.map</code> for that one.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">fetch(<span class="md-code-string">&apos;https://api.github.com/users/bevacqua/events/public&apos;</span>)
  .then(response =&gt; response.json())
  .then(events =&gt; events
    .filter(event =&gt; event.type === <span class="md-code-string">&apos;PushEvent&apos;</span>)
    .reduce(merge, {})
  )
  .catch(error =&gt; ({}))
  <mark class="md-mark md-code-mark">.then</mark>(counts =&gt; <span class="md-code-built_in">Object</span>
    .keys(counts)
    .map(date =&gt; <mark class="md-mark md-code-mark">[<span class="md-code-keyword">new</span> <span class="md-code-built_in">Date</span>(date), counts[date]]</mark>)
  )
  .then(data =&gt; <span class="md-code-built_in">console</span>.log(data))
  <span class="md-code-comment">// [[Date(2015-09-21), 7], [Date(2015-09-19), 1], [Date(2015-09-18), 3]]</span>

<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">merge</span> <span class="md-code-params">(counts, push)</span> </span>{
  <span class="md-code-keyword">var</span> date = push.created_at.slice(<span class="md-code-number">0</span>, <span class="md-code-number">10</span>)
  <span class="md-code-keyword">if</span> (date <span class="md-code-keyword">in</span> counts) {
    counts[date]++
  } <span class="md-code-keyword">else</span> {
    counts[date] = <span class="md-code-number">1</span>
  }
  <span class="md-code-keyword">return</span> counts
}
</code></pre> <p>Lastly, we actually render the chart. In the code below we&#x2019;ve barely changed the chart-rendering code we had earlier: instead of displaying a single hard-coded point, we&#x2019;re now using each data point pulled from GitHub&#x2019;s API.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">fetch(<span class="md-code-string">&apos;https://api.github.com/users/bevacqua/events/public&apos;</span>)
  .then(response =&gt; response.json())
  .then(events =&gt; events
    .filter(event =&gt; event.type === <span class="md-code-string">&apos;PushEvent&apos;</span>)
    .reduce(merge, {})
  )
  .catch(error =&gt; ({}))
  .then(counts =&gt; <span class="md-code-built_in">Object</span>
    .keys(counts)
    .map(date =&gt; [<span class="md-code-keyword">new</span> <span class="md-code-built_in">Date</span>(date), counts[date]])
  )
  .then(points =&gt; {
    <span class="md-code-keyword">var</span> options = {
      targetElement: <span class="md-code-string">&apos;chart&apos;</span>,
      series: [{
        name: <mark class="md-mark md-code-mark"><span class="md-code-string">&apos;GitHub Activity&apos;</span></mark>,
        points: <mark class="md-mark md-code-mark">points</mark>
      }]
    }
    <span class="md-code-keyword">var</span> chart = <span class="md-code-keyword">new</span> JSC.Chart(options)
  })

<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">merge</span> <span class="md-code-params">(counts, push)</span> </span>{
  <span class="md-code-keyword">var</span> date = push.created_at.slice(<span class="md-code-number">0</span>, <span class="md-code-number">10</span>)
  <span class="md-code-keyword">if</span> (date <span class="md-code-keyword">in</span> counts) {
    counts[date]++
  } <span class="md-code-keyword">else</span> {
    counts[date] = <span class="md-code-number">1</span>
  }
  <span class="md-code-keyword">return</span> counts
}
</code></pre> <p>Here&#x2019;s how our chart looks like so far. It represents all three dates with contributions, their dates, and the amounts. It&#x2019;s nice that we didn&#x2019;t have to do anything in terms of defining domains for our axes, choosing a color for the plotted line, or anything much other than providing the data points.</p> <figure><img alt="Plotted data points on public GitHub contributions over time" class="" src="https://i.imgur.com/rAgvdOV.png"><figcaption>Plotted data points on public GitHub contributions over time</figcaption></figure> <p>At this point I feel very lonely in the GitHub contribution planet, though.</p> <h1 id="adding-contributors-to-the-chart">Adding Contributors to the Chart</h1> <p>Let&#x2019;s add a few more contributors to the graph. In order to do that we have to move our <code class="md-code md-code-inline">fetch</code> call into a method where we pass in a username and get back a <code class="md-code md-code-inline">Promise</code>, as seen in the snippet below. I&#x2019;ve also added one more call to <code class="md-code md-code-inline">.then</code> where I return the data points along with the user name <em>(this replaces our old <code class="md-code md-code-inline">&apos;GitHub Activity&apos;</code> string)</em> Curious about the backticks? Those are ES6 <a href="https://ponyfoo.com/articles/es6-template-strings-in-depth" aria-label="ES6 Template Literals in Depth on Pony Foo">template literals</a>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><mark class="md-mark md-code-mark">function pull</mark> (username) {
  <span class="md-code-keyword">var</span> base = <span class="md-code-string">&apos;https://api.github.com&apos;</span>
  <mark class="md-mark md-code-mark">return</mark> fetch(`${base}/users/<mark class="md-mark md-code-mark">${username}</mark>/events/public`)
    .then(response =&gt; response.json())
    .then(events =&gt; events
      .filter(event =&gt; event.type === <span class="md-code-string">&apos;PushEvent&apos;</span>)
      .reduce(merge, {})
    )
    .catch(error =&gt; ({}))
    .then(counts =&gt; <span class="md-code-built_in">Object</span>
      .keys(counts)
      .map(date =&gt; [<span class="md-code-keyword">new</span> <span class="md-code-built_in">Date</span>(date), counts[date]])
    )
    .then(points =&gt; ({ name: <span class="md-code-string">&apos;@&apos;</span> + username, <mark class="md-mark md-code-mark">points</mark> }))
}
</code></pre> <p>We can now leverage <code class="md-code md-code-inline">Promise.all</code> to render a few different open-source contributors onto a chart. <code class="md-code md-code-inline">Promise.all</code> awaits an entire collection of promises and then returns all of their results in an <code class="md-code md-code-inline">Array</code> object.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">Promise
  .all([
    pull(<span class="md-code-string">&apos;bevacqua&apos;</span>),
    pull(<span class="md-code-string">&apos;substack&apos;</span>),
    pull(<span class="md-code-string">&apos;addyosmani&apos;</span>),
    pull(<span class="md-code-string">&apos;sindresorhus&apos;</span>)
  ])
  .then(<mark class="md-mark md-code-mark">lines</mark> =&gt; {
    <span class="md-code-keyword">var</span> options = {
      targetElement: <span class="md-code-string">&apos;chart&apos;</span>,
      series: lines
    }
    <span class="md-code-keyword">var</span> chart = <span class="md-code-keyword">new</span> JSC.Chart(options)
  })
</code></pre> <p>Surely, we could also use an array of names and map them into promises with <code class="md-code md-code-inline">pull</code>, for brevity.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">Promise
  .all([<span class="md-code-string">&apos;bevacqua&apos;</span>, <span class="md-code-string">&apos;substack&apos;</span>, <span class="md-code-string">&apos;addyosmani&apos;</span>, <span class="md-code-string">&apos;sindresorhus&apos;</span>]<mark class="md-mark md-code-mark">.map(pull)</mark>)
  .then(lines =&gt; {
    <span class="md-code-keyword">var</span> options = {
      targetElement: <span class="md-code-string">&apos;chart&apos;</span>,
      series: lines
    }
    <span class="md-code-keyword">var</span> chart = <span class="md-code-keyword">new</span> JSC.Chart(options)
  })
</code></pre> <p>That looks a bit better now, we were able to render a bunch of different contributors onto the same chart and we can now quickly compare their output in terms of public GitHub contributions. You have to keep in mind that these charts are based on the commits found in the last thirty public events published on each of these members accounts, and not necessarily all of their recent activity.</p> <figure><img alt="Last thirty contributions from each member" class="" src="https://i.imgur.com/ZjHBpMY.png"><figcaption>Last thirty contributions from each member</figcaption></figure> <p>Let&#x2019;s go back to the chart found at the beginning.</p> <h1 id="week-over-week-contribution-area-range">Week Over Week Contribution Area Range</h1> <p>Going back to that first area chart I&#x2019;ve shown, it definitely looks cool, so let&#x2019;s try and come up with an example that&#x2019;s similar to that chart. I think a cool visualization might be to plot the contributions on a single repository over time. We&#x2019;ll be plotting ranges comprised of the days with the least and the most contributions in each given week.</p> <p>In order to do that, we first need to come up with the ranges for each week. GitHub happens to have an API endpoint that gives us exactly what we need, the <a href="https://developer.github.com/v3/repos/statistics/#commit-activity" target="_blank" aria-label="GitHub API Commit Activity Endpoint"><code class="md-code md-code-inline">commit_activity</code></a> endpoint. It returns the last year of commit activity on any given public repository. You get back commit counts by day, as shown below.</p> <pre class="md-code-block"><code class="md-code md-lang-json">[
  {
    &quot;<span class="md-code-attribute">days</span>&quot;: <span class="md-code-value">[
      <span class="md-code-number">0</span>,
      <span class="md-code-number">3</span>,
      <span class="md-code-number">26</span>,
      <span class="md-code-number">20</span>,
      <span class="md-code-number">39</span>,
      <span class="md-code-number">1</span>,
      <span class="md-code-number">0</span>
    ]</span>,
    &quot;<span class="md-code-attribute">total</span>&quot;: <span class="md-code-value"><span class="md-code-number">89</span></span>,
    &quot;<span class="md-code-attribute">week</span>&quot;: <span class="md-code-value"><span class="md-code-number">1336280400</span>
  </span>},
  ...
]
</code></pre> <p>For this one I wanted to plot out the weekly highs and lows in the <a href="https://github.com/nodejs/node" target="_blank" aria-label="nodejs/node on GitHub"><code class="md-code md-code-inline">nodejs/node</code></a> repository in terms of contributions. First off we&#x2019;ll be pulling the data from GitHub&#x2019;s API, using <code class="md-code md-code-inline">fetch</code> once again.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">fetch(<span class="md-code-string">&apos;https://api.github.com/repos/nodejs/node/stats/commit_activity&apos;</span>)
  .then(response =&gt; response.json())
</code></pre> <p>Just like the last time around, a little data massaging is in order. After pulling the <code class="md-code md-code-inline">weeks</code> from the JSON response, we&#x2019;ll need to map them into a list of points containing a date on the <code class="md-code md-code-inline">x</code> axis and then the highest and lowest days on the <code class="md-code md-code-inline">y</code> axis.</p> <p>Below I&#x2019;ve used <a href="http://momentjs.com/" target="_blank" aria-label="Moment: Parse, validate, manipulate, and display dates in JavaScript."><code class="md-code md-code-inline">moment</code></a> to figure out the week from the position of each data point in the response. There&#x2019;s also the <code class="md-code md-code-inline">...</code> <a href="https://ponyfoo.com/articles/es6-spread-and-butter-in-depth" aria-label="ES6 Spread and Butter in Depth on Pony Foo">spread operator</a> being used for brevity &#x2013; it&#x2019;s as if I were doing <code class="md-code md-code-inline">Math.min.apply(null, week.days)</code>. It spreads the values in an array over the parameter list of the method call.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">fetch(<span class="md-code-string">&apos;https://api.github.com/repos/nodejs/node/stats/commit_activity&apos;</span>)
  .then(response =&gt; response.json())
  .then(weeks =&gt; weeks
    .map(<mark class="md-mark md-code-mark">(week, i)</mark> =&gt; ({
      x: moment().subtract(<mark class="md-mark md-code-mark">52 - i</mark>, <span class="md-code-string">&apos;weeks&apos;</span>).toDate(),
      y: [
        <span class="md-code-built_in">Math</span>.min(<mark class="md-mark md-code-mark">...</mark>week.days),
        <span class="md-code-built_in">Math</span>.max(...week.days)
      ]
    }))
  )
  .catch(error =&gt; [])
  .then(points =&gt; {
    <span class="md-code-comment">// render chart here</span>
  })
</code></pre> <p>You can install <code class="md-code md-code-inline">moment</code> via Bower &#x2013; that&#x2019;s what I did in my <a href="https://github.com/bevacqua/jscharting" target="_blank" aria-label="bevacqua/jscharting on GitHub">example code <em>&#x2013; available on GitHub</em></a>.</p> <p>At this point we have the points needed to render the area chart, and they&#x2019;re properly formatted into something JSCharting understands: <code class="md-code md-code-inline">x</code>/<code class="md-code md-code-inline">y</code> coordinates. This chart took many more configuration <code class="md-code md-code-inline">options</code> to get right, so we&#x2019;ll go over each of them before looking at the full picture.</p> <p>First off, there&#x2019;s the chart <code class="md-code md-code-inline">type</code>. There&#x2019;s an immense number of <a href="http://jscharting.com/documentation/index.htm#node=Home.API.json.Enums.chartType" target="_blank" aria-label="JSCharting Chart Types">JSCharting chart types</a> so we can&#x2019;t possibly cover all of them here, but we&#x2019;ll try to cover a few. The <code class="md-code md-code-inline">areaSpline</code> chart type produces charts like the one we saw in the first screenshot at the top of the article.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><mark class="md-mark md-code-mark">type</mark>: <span class="md-code-string">&apos;areaSpline&apos;</span>
</code></pre> <p>Remember the legends with the GitHub usernames in the last example? It was kind of awkward that they were completely outside the chart. The following setting moves the legend inside the chart with a padding of <code class="md-code md-code-inline">4px</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">legendPosition: <span class="md-code-string">&apos;CA:4,4&apos;</span>
</code></pre> <p>I thought it&#x2019;d be nice to give the chart a title using the JSCharting API itself, so I did that with the next couple of options. Note how JSCharting provides us with variables such as <code class="md-code md-code-inline">%min</code>, <code class="md-code md-code-inline">%max</code>, and <code class="md-code md-code-inline">%average</code> so that we can print data-based information right on the chart&#x2019;s title &#x2013; try <a href="http://jscharting.com/documentation/#node=Home.Tutorials.labels.tokenReference" target="_blank" aria-label="Label Tokens Reference Documentation">this link</a> for a full list of these variables.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">titlePosition: <span class="md-code-string">&apos;full&apos;</span>,
titleLabelText: `
  Weekly GitHub Contribution Activity on nodejs/node repo.
  Range: <mark class="md-mark md-code-mark">%min</mark> to <mark class="md-mark md-code-mark">%max</mark> commits, Average: <mark class="md-mark md-code-mark">%average</mark> commits`
</code></pre> <p>The <code class="md-code md-code-inline">x</code> axis needs to be scaled into weeks, as we have a data point for <em>each week</em>, and we could also format the label into something that&#x2019;s readable but not very verbose &#x2013; for example, something like <code class="md-code md-code-inline">Jan 23</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">xAxis: {
  <mark class="md-mark md-code-mark">formatString</mark>: <span class="md-code-string">&apos;MMM dd&apos;</span>,
  scaleIntervalUnit: <mark class="md-mark md-code-mark"><span class="md-code-string">&apos;week&apos;</span></mark>
}
</code></pre> <p>The <code class="md-code md-code-inline">y</code> axis represents commits. So we label it as such. I&#x2019;ve also set a lower bound of <code class="md-code md-code-inline">0</code> as negative amounts of commits don&#x2019;t make sense with our data.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">yAxis: {
  labelText: <span class="md-code-string">&apos;Commits&apos;</span>,
  scaleRangeMin: <mark class="md-mark md-code-mark">0</mark>
}
</code></pre> <p>I also wanted to display a threshold <em>&#x2013; just like in the screenshot we saw earlier &#x2013;</em> a subtle area in the chart that indicated periods where commit frequency dwindled into near inactivity. Of course, this just means <em>&#x201C;at least one day in the week commit frequency was low&#x201D;</em>, so take that data with a grain of salt. The <code class="md-code md-code-inline">value</code> option specifies the range where I want to add this <em>&#x201C;danger zone&#x201D;</em> area, and I&#x2019;ve also added a label describing the area and gave it a somewhat transparent yellowish color.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">yAxis: {
  markers: [{
    value: <mark class="md-mark md-code-mark">[<span class="md-code-number">0</span>, <span class="md-code-number">5</span>]</mark>,
    labelText: <span class="md-code-string">&apos;Infrequent Commits&apos;</span>,
    labelAlign: <span class="md-code-string">&apos;center&apos;</span>,
    color: [<span class="md-code-string">&apos;#fcc348&apos;</span>, <span class="md-code-number">0.6</span>]
  }]
}
</code></pre> <p>Then there&#x2019;s the tooltips. Tooltips are very important because they give you a ton of context into what the datapoint actually means. Here I went descriptive and explained that for a given week there was a high of <code class="md-code md-code-inline">y1</code> commits and a low of <code class="md-code md-code-inline">y2</code> commits. You can see how we have access to JSCharting variables here as well.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">defaultPointTooltip: `
  &lt;b&gt;Week of <mark class="md-mark md-code-mark">%xValue</mark>&lt;/b&gt;
  &lt;br/&gt;High: &lt;b&gt;<mark class="md-mark md-code-mark">%yValue</mark> Commits&lt;/b&gt;
  &lt;br/&gt;Low: &lt;b&gt;<mark class="md-mark md-code-mark">%yStart</mark> Commits&lt;/b&gt;`
</code></pre> <p>Lastly, there&#x2019;s the <code class="md-code md-code-inline">series</code>. We&#x2019;re already familiar with this, so you just need to know I gave it a name and passed in the <code class="md-code md-code-inline">points</code> we got back from the GitHub API after massaging their data.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">series: [{
  name: <span class="md-code-string">&apos;Daily Contributions&apos;</span>,
  points: <mark class="md-mark md-code-mark">points</mark>
}]
</code></pre> <p>The full code for our area range chart ends up looking as shown below.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">fetch(<span class="md-code-string">&apos;https://api.github.com/repos/nodejs/node/stats/commit_activity&apos;</span>)
  .then(response =&gt; response.json())
  .then(weeks =&gt; weeks
    .map((week, i) =&gt; ({
      x: moment().subtract(<span class="md-code-number">52</span> - i, <span class="md-code-string">&apos;weeks&apos;</span>).toDate(),
      y: [
        <span class="md-code-built_in">Math</span>.min(...week.days),
        <span class="md-code-built_in">Math</span>.max(...week.days)
      ]
    }))
  )
  .catch(error =&gt; [])
  .then(points =&gt; {
    <span class="md-code-keyword">var</span> options = {
      targetElement: <span class="md-code-string">&apos;chart&apos;</span>,
      type: <span class="md-code-string">&apos;areaSpline&apos;</span>,
      legendPosition: <span class="md-code-string">&apos;CA:4,4&apos;</span>,
      titleLabelText: `
        Weekly GitHub Contribution Activity on ${repo} repo.
        Range: %min to %max commits, Average: %average commits`,
      xAxis: {
        formatString: <span class="md-code-string">&apos;MMM dd&apos;</span>,
        scaleIntervalUnit: <span class="md-code-string">&apos;week&apos;</span>
      },
      yAxis: {
        labelText: <span class="md-code-string">&apos;Commits&apos;</span>,
        scaleRangeMin: <span class="md-code-number">0</span>,
        markers: [{
          value: [<span class="md-code-number">0</span>, <span class="md-code-number">5</span>],
          labelText: <span class="md-code-string">&apos;Infrequent Commits&apos;</span>,
          labelAlign: <span class="md-code-string">&apos;center&apos;</span>,
          color: [<span class="md-code-string">&apos;#fcc348&apos;</span>, <span class="md-code-number">0.6</span>]
        }]
      },
      defaultPointTooltip: [
        <span class="md-code-string">&apos;&lt;b&gt;Week of %xValue&lt;/b&gt;&apos;</span>,
        <span class="md-code-string">&apos;&lt;br/&gt;High: &lt;b&gt;%yValue Commits&lt;/b&gt;&apos;</span>,
        <span class="md-code-string">&apos;&lt;br/&gt;Low: &lt;b&gt;%yStart Commits&lt;/b&gt;&apos;</span>
      ].join(<span class="md-code-string">&apos;&apos;</span>),
      series: [{
        name: <span class="md-code-string">&apos;Daily Contributions&apos;</span>,
        points: points
      }]
    }
    <span class="md-code-keyword">var</span> chart = <span class="md-code-keyword">new</span> JSC.Chart(options)
  })
</code></pre> <p>And here&#x2019;s how it&#x2019;s rendered in the browser.</p> <figure><img alt="GitHub Contributions Week Over Week against nodejs/node Repository" class="" src="https://i.imgur.com/zXcb1QI.png"><figcaption>GitHub Contributions Week Over Week against nodejs/node Repository</figcaption></figure> <p>Let&#x2019;s repeat our brief exercise from earlier and add more area ranges to the chart, so that we can compare contributions made to different repositories and not just <code class="md-code md-code-inline">nodejs/node</code>.</p> <h1 id="adding-repositories-to-the-area-chart">Adding Repositories to the Area Chart</h1> <p>Unsurprisingly we&#x2019;ve already done the bulk of the load. We could start by moving the data-fetching <code class="md-code md-code-inline">Promise</code> into a <code class="md-code md-code-inline">pull</code> method. That method will be able to pull any data points we need for any repositories we want. It returns a promise that resolves to the repository name and its data points.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">pull</span> <span class="md-code-params">(repo)</span> </span>{
  <span class="md-code-keyword">var</span> base = <span class="md-code-string">&apos;https://api.github.com&apos;</span>
  <span class="md-code-keyword">return</span> fetch(`${base}/repos/${repo}/stats/commit_activity`)
    .then(response =&gt; response.json())
    .then(weeks =&gt; weeks
      .map((week, i) =&gt; ({
        x: moment().subtract(<span class="md-code-number">52</span> - i, <span class="md-code-string">&apos;weeks&apos;</span>).toDate(),
        y: [
          <span class="md-code-built_in">Math</span>.min(...week.days),
          <span class="md-code-built_in">Math</span>.max(...week.days)
        ]
      }))
    )
    .catch(error =&gt; [])
    .then(points =&gt; ({
      name: <mark class="md-mark md-code-mark">repo</mark>,
      points: <mark class="md-mark md-code-mark">points</mark>
    }))
}
</code></pre> <p>We could also extract the chart-rendering part into another method, named <code class="md-code md-code-inline">comparisonChart</code>. The big difference here is that instead of rendering a chart with data points for a single repository we&#x2019;ll take a <code class="md-code md-code-inline">repositories</code> list and map that into several area range series. As many as the consumer dictates!</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">comparisonChart</span> <span class="md-code-params">(<mark class="md-mark md-code-mark">repositories</mark>)</span> </span>{
  <span class="md-code-keyword">var</span> options = {
    targetElement: <span class="md-code-string">&apos;chart&apos;</span>,
    type: <span class="md-code-string">&apos;areaSpline&apos;</span>,
    legendPosition: <span class="md-code-string">&apos;CA:4,4&apos;</span>,
    titleLabelText: <span class="md-code-string">&apos;Weekly GitHub Contribution Activity Comparison&apos;</span>,
    titlePosition: <span class="md-code-string">&apos;full&apos;</span>,
    xAxis: {
      formatString: <span class="md-code-string">&apos;MMM dd&apos;</span>,
      scaleIntervalUnit: <span class="md-code-string">&apos;week&apos;</span>
    },
    yAxis: {
      labelText: <span class="md-code-string">&apos;Commits&apos;</span>,
      scaleRangeMin: <span class="md-code-number">0</span>,
      markers: [{
        value: [<span class="md-code-number">0</span>, <span class="md-code-number">5</span>],
        labelText: <span class="md-code-string">&apos;Infrequent Commits&apos;</span>,
        labelAlign: <span class="md-code-string">&apos;center&apos;</span>,
        color: [<span class="md-code-string">&apos;#fcc348&apos;</span>, <span class="md-code-number">0.6</span>]
      }]
    },
    defaultPointTooltip: [
      <span class="md-code-string">&apos;&lt;b&gt;Week of %xValue&lt;/b&gt;&apos;</span>,
      <span class="md-code-string">&apos;&lt;br/&gt;High: &lt;b&gt;%yValue Commits&lt;/b&gt;&apos;</span>,
      <span class="md-code-string">&apos;&lt;br/&gt;Low: &lt;b&gt;%yStart Commits&lt;/b&gt;&apos;</span>
    ].join(<span class="md-code-string">&apos;&apos;</span>),
    series: <mark class="md-mark md-code-mark">repositories.map</mark>(repo =&gt; ({
      name: `Contributions to ${repo.name}`,
      points: repo.points
    }))
  }
  <span class="md-code-keyword">var</span> chart = <span class="md-code-keyword">new</span> JSC.Chart(options)
}
</code></pre> <p>To use these two methods, we just have to map repositories into <code class="md-code md-code-inline">pull</code> promises and then render the <code class="md-code md-code-inline">comparisonChart</code> when all of those promises are settled.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">Promise
  <mark class="md-mark md-code-mark">.all</mark>([
    <span class="md-code-string">&apos;nodejs/node&apos;</span>,
    <span class="md-code-string">&apos;lodash/lodash&apos;</span>,
    <span class="md-code-string">&apos;facebook/react&apos;</span>,
    <span class="md-code-string">&apos;angular/angular&apos;</span>
  ]<mark class="md-mark md-code-mark">.map</mark>(pull))
  <mark class="md-mark md-code-mark">.then</mark>(comparisonChart)
</code></pre> <p>All of the above ends up producing a chart like the one in the screenshot below. If you ask me, that&#x2019;s a lot of data density right there! You can use it to quickly compare the contributions over time on each of those repos, and it&#x2019;s very easy to swap out repositories for your own or any other repositories you want.</p> <figure><img alt="Contributions to React, Angular, Lodash, and Node compared" class="" src="https://i.imgur.com/bgKioJ3.png"><figcaption>Contributions to React, Angular, Lodash, and Node compared</figcaption></figure> <p>Naturally, that&#x2019;s not all you can do with JSCharting. Another interesting feature example might be their <a href="http://jscharting.com/documentation/#node=Home.API.json.Types.axis.scale.breaks&amp;filter=breaks" target="_blank" aria-label="Scale Breaks Documentation"><em>automatic scale breaks</em></a>, where you can have the chart join together two distant parts of a scale when there are no data points in between.</p> <figure><a href="http://jscharting.com/documentation/#node=Home.API.json.Types.axis.scale.breaks&amp;filter=breaks" target="_blank" aria-label="Scale Breaks Documentation"><img alt="Automatic Scale Breaks" class="" src="https://i.imgur.com/ciJpRIU.png"></a><figcaption>Automatic Scale Breaks</figcaption></figure> <p>In terms of coming up with use cases for this review, though, it might be much more interesting to work with their recently released <strong>mapping</strong> features <em>&#x2013; as in, Geography</em>. I figured I&#x2019;m from Argentina just like the Pope, who is visiting the US this month, so what&#x2019;s a better excuse to render some data onto a map?</p> <h1 id="tweets-and-the-pope">Tweets and the Pope</h1> <p>I used a Node.js script to pull together a series of geo-located tweets about the Pope in <em>Washington, DC</em> and surrounding areas. Putting that script together was actually the hard part, it turns out.</p> <p>Before showing you the full code listing, &#x2013; detailing how to pull tweets about the Pope in a particular geocoded area from the <a href="https://dev.twitter.com/rest/public/search" target="_blank" aria-label="Twitter Search API Documentation">Twitter Search API</a> &#x2013; there&#x2019;s a few things worth mentioning about the code, so I&#x2019;ll go bit by bit before showing you the full thing.</p> <p>I decided to use the <code class="md-code md-code-inline">twit</code> module from npm as it solves authentication through OAuth on my behalf. We can install it via <code class="md-code md-code-inline">npm i twit</code> on the command line.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">import Twit from <span class="md-code-string">&apos;twit&apos;</span>
</code></pre> <p>I created an application <em>(create your own <a href="https://apps.twitter.com/" target="_blank" aria-label="Twitter Application Manager">in here</a>)</em> for my demo and pasted all keys and secrets here. Note that <strong>you should never ever do that</strong> in a real-world application. You should guard your secrets <em>passionately</em> and fiercely. Maybe in a non-versioned file, an encrypted file only you know how to crack open, or in a secure storage service like Amazon S3.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-comment">// note: <mark class="md-mark md-code-mark">never</mark> expose your authentication secrets like this.</span>
<span class="md-code-keyword">var</span> t = <span class="md-code-keyword">new</span> Twit({
  consumer_key:        <span class="md-code-string">&apos;5XXdudRSGuZWoy3i9fDwNB8OQ&apos;</span>,
  consumer_secret:     <span class="md-code-string">&apos;UF8oIi531IopXZnrfvEMh34ez6DxzIaOZI8hWhWa208j6tjQeM&apos;</span>,
  access_token:        <span class="md-code-string">&apos;329661096-zxVpzWt8fngW51j0VIgx3WBSWp4AUFrZu157Slzj&apos;</span>,
  access_token_secret: <span class="md-code-string">&apos;dpI3VJFUm3wGQNdmcuqnrdjjwfS188hcq1ppeRQtRApjO&apos;</span>
})
</code></pre> <p>I pulled the geolocation information from Google Maps just by typing in Washington DC and copying the coordinates from the URL bar.</p> <pre class="md-code-block"><code class="md-code">https://www.google.com/maps/place/Washington,+DC,+USA/@<mark class="md-mark md-code-mark">38.8993488</mark>,<mark class="md-mark md-code-mark">-77.0145665</mark>,12z
</code></pre> <p>To pull a page of tweets you can use the <code class="md-code md-code-inline">t</code> client we created earlier. The <code class="md-code md-code-inline">500km</code> indicate a proximity radius that we want to allow in our Twitter search query. We&#x2019;ll get to the <code class="md-code md-code-inline">pager</code> callback in a minute.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> query = <span class="md-code-string">&apos;pope francis washington&apos;</span>
<span class="md-code-keyword">var</span> geocode = <span class="md-code-string">&apos;38.8993488,-77.0145665,500km&apos;</span>
<span class="md-code-keyword">var</span> parameters = {
  geocode,
  q: query,
  count: <span class="md-code-number">100</span>
}
t.get(<span class="md-code-string">&apos;search/tweets&apos;</span>, parameters, <mark class="md-mark md-code-mark">pager</mark>)
</code></pre> <p>That would mostly work, except it&#x2019;s too few tweets. It turns out Twitter doesn&#x2019;t even reliably yield geolocated tweets when we ask for tweets in a certain geolocation, so we need to filter those out and into a list.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">pager</span> <span class="md-code-params">(err, payload)</span> </span>{
  <span class="md-code-keyword">if</span> (err) {
    done(err)
    <span class="md-code-keyword">return</span>
  }
  tweets.push(<mark class="md-mark md-code-mark">...</mark>payload.statuses.filter(status =&gt; <mark class="md-mark md-code-mark">status.geo</mark>))
}
</code></pre> <p>Since we can&#x2019;t even reliably get 100 points, we&#x2019;ll tell Twitter to give us a few pages worth of results, all of which we&#x2019;ll filter out. To do that we can pull the code from earlier that did <code class="md-code md-code-inline">t.get(&apos;search/tweets&apos;, ...)</code> into a <code class="md-code md-code-inline">more</code> method and call it a bunch of times in a row.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">if</span> (payload.search_metadata.next_results &amp;&amp; pages++ <span><span class="md-code-tag">&lt; <span class="md-code-attribute">10</span>) {
  <span class="md-code-attribute">more</span>(<span class="md-code-attribute">payload.search_metadata</span>) // <span class="md-code-attribute">get</span> <span class="md-code-attribute">the</span> <span class="md-code-attribute">next</span> <span class="md-code-attribute">page</span> <span class="md-code-attribute">of</span> <span class="md-code-attribute">results</span>
} <span class="md-code-attribute">else</span> {
  <span class="md-code-attribute">done</span>(<span class="md-code-attribute">null</span>, <span class="md-code-attribute">tweets</span>) // <span class="md-code-attribute">enough</span> <span class="md-code-attribute">tweets</span> <span class="md-code-attribute">for</span> <span class="md-code-attribute">us</span>!
}
</span></span></code></pre> <p>We&#x2019;ll use the <code class="md-code md-code-inline">search_metadata</code> to figure out the newest tweet our next query can produce, effectively paging. We can use <code class="md-code md-code-inline">omnibox</code> to transform <code class="md-code md-code-inline">search_metadata.next_results</code> into a query string hash object. Here&#x2019;s how the full code ended up looking.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">tweetsAboutPope</span> <span class="md-code-params">(done)</span> </span>{
  <span class="md-code-comment">// note: never expose your application secrets like this.</span>
  <span class="md-code-keyword">var</span> t = <span class="md-code-keyword">new</span> Twit({
    consumer_key:        <span class="md-code-string">&apos;5XXdudRSGuZWoy3i9fDwNB8OQ&apos;</span>,
    consumer_secret:     <span class="md-code-string">&apos;UF8oIi531IopXZnrfvEMh34ez6DxzIaOZI8hWhWa208j6tjQeM&apos;</span>,
    access_token:        <span class="md-code-string">&apos;329661096-zxVpzWt8fngW51j0VIgx3WBSWp4AUFrZu157Slzj&apos;</span>,
    access_token_secret: <span class="md-code-string">&apos;dpI3VJFUm3wGQNdmcuqnrdjjwfS188hcq1ppeRQtRApjO&apos;</span>
  })
  <span class="md-code-keyword">var</span> pages = <span class="md-code-number">0</span>
  <span class="md-code-keyword">var</span> query = <span class="md-code-string">&apos;pope francis washington&apos;</span>
  <span class="md-code-keyword">var</span> geocode = <span class="md-code-string">&apos;38.6743001,-76.2242026,500km&apos;</span> <span class="md-code-comment">// Washington, DC and surrounding areas</span>
  more()
  <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">more</span> <span class="md-code-params">(metadata)</span> </span>{
    <span class="md-code-keyword">var</span> parameters = {
      geocode,
      q: query,
      count: <span class="md-code-number">100</span>,

      <span class="md-code-comment">// pick up where the last page left off</span>
      max_id: metadata ? querystring(metadata.next_results.slice(<span class="md-code-number">1</span>)).max_id : <span class="md-code-string">&apos;&apos;</span>
    }
    t.get(<span class="md-code-string">&apos;search/tweets&apos;</span>, parameters, pager)
  }

  <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">pager</span> <span class="md-code-params">(err, payload)</span> </span>{
    <span class="md-code-keyword">if</span> (err) {
      done(err)
      <span class="md-code-keyword">return</span>
    }
    <span class="md-code-comment">// even when you asked for geolocated tweets, not every tweet has geolocation data</span>
    tweets.push(...payload.statuses.filter(status =&gt; status.geo))
    <span class="md-code-keyword">if</span> (payload.search_metadata.next_results &amp;&amp; pages++ <span><span class="md-code-tag">&lt; <span class="md-code-attribute">10</span>) {
      <span class="md-code-attribute">more</span>(<span class="md-code-attribute">payload.search_metadata</span>) // <span class="md-code-attribute">pull</span> <span class="md-code-attribute">a</span> <span class="md-code-attribute">few</span> <span class="md-code-attribute">pages</span> <span class="md-code-attribute">worth</span> <span class="md-code-attribute">of</span> <span class="md-code-attribute">tweets</span>
    } <span class="md-code-attribute">else</span> {
      <span class="md-code-attribute">done</span>(<span class="md-code-attribute">null</span>, <span class="md-code-attribute">tweets</span>)
    }
  }
}
</span></span></code></pre> <p>Once that was set up I used it to pull a few tweets from Twitter. You can find them in <a href="https://gist.github.com/bevacqua/2930a62e84081293ebb8" target="_blank" aria-label="Gist with tweets about the Pope">this Gist</a>. I then set up a server that serves tweets about the Pope from an <code class="md-code md-code-inline">/tweets-about-pope</code> endpoint, because browsers don&#x2019;t play all that well with the Twitter API. Rendering the chart wasn&#x2019;t anywhere near as dramatic. First off there&#x2019;s the request to pull the tweets from my server.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript">fetch(<span class="md-code-string">&apos;/tweets-about-pope&apos;</span>)
  .then(response =&gt; response.json())
  .then(tweets =&gt; {
    <span class="md-code-comment">// render chart here</span>
  })
</code></pre> <p>Now that I had I could render the map-flavored chart. We&#x2019;ve already covered pretty much every option the example below passes into <code class="md-code md-code-inline">new JSC.Chart(options)</code>, so I&#x2019;ll just place the <em>&#x201C;entire&#x201D;</em> map rendering code here. Two of the series are used to render parts of the map, the north-east region of the US, and the south region of the US. For each tweet I went with <code class="md-code md-code-inline">marker</code> points in a series that also displays the tweets themselves when hovering over the tweets with your mouse.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> options = {
  targetElement: <span class="md-code-string">&apos;chart&apos;</span>,
  type: <span class="md-code-string">&apos;map&apos;</span>,
  titleLabelText: <span class="md-code-string">&apos;Tweets About the Pope in Washington and Surrounding Areas&apos;</span>,
  legendPosition: <span class="md-code-string">&apos;CA:4,4&apos;</span>,
  series: [{
    map: <mark class="md-mark md-code-mark"><span class="md-code-string">&apos;us.region:Northeast&apos;</span></mark>, name: <span class="md-code-string">&apos;US north-east&apos;</span>
  }, {
    map: <span class="md-code-string">&apos;us.region:South&apos;</span>, name: <span class="md-code-string">&apos;US south&apos;</span>
  }, {
    type: <span class="md-code-string">&apos;marker&apos;</span>,
    name: <span class="md-code-string">&apos;Tweet&apos;</span>,
    defaultPointTooltip: <span class="md-code-string">&apos;%text &lt;br/&gt;&#x2014; &lt;em&gt;%when&lt;/em&gt; by &lt;strong&gt;@%username&lt;/strong&gt;&apos;</span>,
    points: tweets.map(tweet =&gt; ({
      x: tweet.geo.coordinates[<span class="md-code-number">1</span>],
      y: tweet.geo.coordinates[<span class="md-code-number">0</span>],
      attributes: {
        when: moment(<span class="md-code-keyword">new</span> <span class="md-code-built_in">Date</span>(tweet.created_at)).fromNow(),
        text: tweet.text,
        username: tweet.user.screen_name
      }
    }))
  }]
}
<span class="md-code-keyword">var</span> chart = <span class="md-code-keyword">new</span> JSC.Chart(options)
</code></pre> <p>The final result is a map of the south-eastern continental US and locations where tweets about the Pope had originated.</p> <figure><img alt="Tweets about the Pope charted on a map" class="" src="https://i.imgur.com/VgsoF9q.png"><figcaption>Tweets about the Pope charted on a map</figcaption></figure> <blockquote> <p>You can find the full code for these examples and everything you&#x2019;ll need to run them yourself over at <a href="https://github.com/bevacqua/jscharting" target="_blank" aria-label="bevacqua/jscharting on GitHub">bevacqua/jscharting</a> on GitHub.</p> </blockquote> <h1 id="conclusions">Conclusions</h1> <p>JSCharting is a great product if you want to add visualizations to your enterprise solutions but you don&#x2019;t want spend a lot of time wrestling with SVG. While other tools like <code class="md-code md-code-inline">d3</code> are more comprehensive and let you do all the things, they may be too complicated if all you want is to render some data points on a chart or a map. The declarative approach used by the JSCharting library empowers you do do just that, without necessarily having to worry about how SVG works under the hood.</p> <p>In this sense, JSCharting is to SVG as Grunt is to build automation scripts. Drawing charts is really easy and mostly a matter of picking the right properties &#x2013; you don&#x2019;t need a deep understanding of the kind of chart you want to draw in order to draw it, and I think that&#x2019;s huge.</p> <p>Lastly, if you&#x2019;re in doubt about the kinds of things you can do with it, you should take a look at <a href="http://jscharting.com/documentation" target="_blank" aria-label="JSCharting Documentation">their documentation</a>. It&#x2019;s pretty extensive and it has a ton of examples with all the different kinds of charts and maps that you can render with JSCharting just by declaring some data points and a few other configuration options as we explored in this article.</p></div>
