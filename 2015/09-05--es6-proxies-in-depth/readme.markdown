<div></div>

<h1>ES6 Proxies in Depth</h1>

<p><kbd>es6</kbd> <kbd>proxies</kbd> <kbd>es6-in-depth</kbd></p>

<blockquote><p>Cheers, <strong>please come in</strong>. This is <a href="https://ponyfoo.com/articles/tagged/es6-in-depth">ES6 &#x2013; <em>&#x201C;Elaine, you gotta have a baby!&#x201D;</em> &#x2013; in Depth</a>. What? Never heard of it? Check out <a href="https://ponyfoo.com/articles/a-brief-history-of-es6-tooling">A Brief History of ES6 &#x2026;</a></p></blockquote>

<div><p>Cheers, <strong>please come in</strong>. This is <a href="https://ponyfoo.com/articles/tagged/es6-in-depth">ES6 &#x2013; <em>&#x201C;Elaine, you gotta have a baby!&#x201D;</em> &#x2013; in Depth</a>. What? Never heard of it? Check out <a href="https://ponyfoo.com/articles/a-brief-history-of-es6-tooling">A Brief History of ES6 Tooling</a>. Then, make your way through <a href="https://ponyfoo.com/articles/es6-destructuring-in-depth">destructuring</a>, <a href="https://ponyfoo.com/articles/es6-template-strings-in-depth">template literals</a>, <a href="https://ponyfoo.com/articles/es6-arrow-functions-in-depth">arrow functions</a>, the <a href="https://ponyfoo.com/articles/es6-spread-and-butter-in-depth">spread operator and rest parameters</a>, improvements coming to <a href="https://ponyfoo.com/articles/es6-object-literal-features-in-depth">object literals</a>, the new <a href="https://ponyfoo.com/articles/es6-classes-in-depth"><em>classes</em></a> sugar on top of prototypes, <a href="https://ponyfoo.com/articles/es6-let-const-and-temporal-dead-zone-in-depth"><code class="md-code md-code-inline">let</code>, <code class="md-code md-code-inline">const</code>, and the <em>&#x201C;Temporal Dead Zone&#x201D;</em></a>, <a href="https://ponyfoo.com/articles/es6-iterators-in-depth">iterators</a>, <a href="https://ponyfoo.com/articles/es6-generators-in-depth">generators</a>, <a href="https://ponyfoo.com/articles/es6-symbols-in-depth">Symbols</a>, <a href="https://ponyfoo.com/articles/es6-maps-in-depth">Maps</a>, <a href="https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth">WeakMaps, Sets, and WeakSets</a>. We&#x2019;ll be discussing <em>ES6 proxies</em> today.</p></div>

<div></div>

<div><blockquote> <p>Like I did in previous articles on the series, I would love to point out that you should probably <a href="https://ponyfoo.com/articles/universal-react-babel#setting-up-babel">set up Babel</a> and follow along the examples with either a REPL or the <code class="md-code md-code-inline">babel-node</code> CLI and a file. That&#x2019;ll make it so much easier for you to <strong>internalize the concepts</strong> discussed in the series. If you aren&#x2019;t the <em>&#x201C;install things on my computer&#x201D;</em> kind of human, you might prefer to hop on <a href="http://codepen.io/" target="_blank">CodePen</a> and then click on the gear icon for JavaScript &#x2013; <em>they have a Babel preprocessor which makes trying out ES6 a breeze.</em> Another alternative that&#x2019;s also quite useful is to use Babel&#x2019;s <a href="http://babeljs.io/repl/" target="_blank">online REPL</a> <em>&#x2013; it&#x2019;ll show you compiled ES5 code to the right of your ES6 code for quick comparison.</em></p> <p>Note that <code class="md-code md-code-inline">Proxy</code> is harder to play around with as Babel doesn&#x2019;t support it unless the underlying browser has support for it. You can check out the <a href="http://kangax.github.io/compat-table/es6/" target="_blank">ES6 compatibility table</a> for supporting browsers. At the time of this writing, you can use <em>Microsoft Edge</em> or <em>Mozilla Firefox</em> to try out <code class="md-code md-code-inline">Proxy</code>. Personally, I&#x2019;ll be verifying my examples using <em>Firefox</em>.</p> </blockquote> <p>Before getting into it, let me <a href="https://www.patreon.com/bevacqua" target="_blank"><em>shamelessly ask for your support</em></a> if you&#x2019;re enjoying my <a href="https://ponyfoo.com/articles/tagged/es6-in-depth">ES6 in Depth</a> series. Your contributions will go towards helping me keep up with the schedule, server bills, keeping me fed, and maintaining <strong>Pony Foo</strong> as a veritable source of JavaScript goodies.</p> <p>Thanks for reading that, and let&#x2019;s go into Proxies now!</p></div>

<div><h1 id="es6-proxies">ES6 Proxies</h1> <p>Proxies are a quite interesting feature coming in ES6. In a nutshell, you can use a <code class="md-code md-code-inline">Proxy</code> to determine behavior whenever the properties of a <code class="md-code md-code-inline">target</code> object are accessed. A <code class="md-code md-code-inline">handler</code> object can be used to configure <em>traps</em> for your <code class="md-code md-code-inline">Proxy</code>, as we&#x2019;ll see in a bit.</p> <p>By default, proxies don&#x2019;t do much &#x2013; in fact they don&#x2019;t do anything. If you don&#x2019;t set any <em>&#x201C;options&#x201D;</em>, your <code class="md-code md-code-inline">proxy</code> will just work as a <em>pass-through</em> to the <code class="md-code md-code-inline">target</code> object &#x2013; MDN calls this a <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Proxy#No-op_forwarding_proxy" target="_blank" aria-label="No-op forwarding proxy on MDN">&quot;no-op forwarding <code class="md-code md-code-inline">Proxy</code>&quot;</a>, which makes sense.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> target = {}
<span class="md-code-keyword">var</span> handler = {}
<span class="md-code-keyword">var</span> proxy = <span class="md-code-keyword">new</span> Proxy(target, handler)
proxy.a = <span class="md-code-string">&apos;b&apos;</span>
<span class="md-code-built_in">console</span>.log(target.a)
<span class="md-code-comment">// &lt;- &apos;b&apos;</span>
<span class="md-code-built_in">console</span>.log(proxy.c === <span class="md-code-literal">undefined</span>)
<span class="md-code-comment">// &lt;- true</span>
</code></pre> <p>We can make our proxy a bit more interesting by adding traps. Traps allow you to intercept interactions with <code class="md-code md-code-inline">target</code> in different ways, as long as those interactions happen through <code class="md-code md-code-inline">proxy</code>. We could use a <code class="md-code md-code-inline">get</code> <em>trap</em> to log every attempt to pull a value out of a property in <code class="md-code md-code-inline">target</code>. Let&#x2019;s try that next.</p> <h2 id="get"><code class="md-code md-code-inline">get</code></h2> <p>The proxy below is able to track any and every <strong>property access</strong> event because it has a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/get" target="_blank" aria-label="handler.get() on MDN"><code class="md-code md-code-inline">handler.get</code></a> trap. It can also be used to <em>transform</em> the value we get out of accessing any given property. We can already imagine <code class="md-code md-code-inline">Proxy</code> becoming a staple when it comes to developer tooling.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> handler = {
  get (target, key) {
    <span class="md-code-built_in">console</span>.info(`Get on property <span class="md-code-string">&quot;${key}&quot;</span>`)
    <span class="md-code-keyword">return</span> target[key]
  }
}
<span class="md-code-keyword">var</span> target = {}
<span class="md-code-keyword">var</span> proxy = <span class="md-code-keyword">new</span> Proxy(target, handler)
proxy.a = <span class="md-code-string">&apos;b&apos;</span>
proxy.a
<span class="md-code-comment">// &lt;- &apos;Get on property &quot;a&quot;&apos;</span>
proxy.b
<span class="md-code-comment">// &lt;- &apos;Get on property &quot;b&quot;&apos;</span>
</code></pre> <p>Of course, your getter doesn&#x2019;t necessarily have to return the original <code class="md-code md-code-inline">target[key]</code> value. How about finally making those <code class="md-code md-code-inline">_prop</code> properties actually private?</p> <h2 id="set"><code class="md-code md-code-inline">set</code></h2> <p>Know how we usually define conventions such as Angular&#x2019;s <em>dollar signs</em> where properties prefixed by a single dollar sign should hardly be accessed from an application and properties prefixed by two dollar signs should <strong>not be accessed at all</strong>? We usually do something like that ourselves in our applications, typically in the form of underscore-prefixed variables.</p> <p>The <code class="md-code md-code-inline">Proxy</code> in the example below prevents property access for both <code class="md-code md-code-inline">get</code> and <code class="md-code md-code-inline">set</code> <em>(via a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/set" target="_blank" aria-label="handler.set() on MDN"><code class="md-code md-code-inline">handler.set</code></a> trap)</em> while accessing <code class="md-code md-code-inline">target</code> through <code class="md-code md-code-inline">proxy</code>. Note how <code class="md-code md-code-inline">set</code> always returns <code class="md-code md-code-inline">true</code> here? &#x2013; this means that setting the property <code class="md-code md-code-inline">key</code> to a given <code class="md-code md-code-inline">value</code> should <em>succeed</em>. If the return value for the <code class="md-code md-code-inline">set</code> trap is <code class="md-code md-code-inline">false</code>, setting the property value will throw a <code class="md-code md-code-inline">TypeError</code> under strict mode, and otherwise fail silently.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> handler = {
  get (target, key) {
    invariant(key, <span class="md-code-string">&apos;get&apos;</span>)
    <span class="md-code-keyword">return</span> target[key]
  },
  set (target, key, value) {
    invariant(key, <span class="md-code-string">&apos;set&apos;</span>)
    <mark class="md-mark md-code-mark">return true</mark>
  }
}
<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">invariant</span> <span class="md-code-params">(key, action)</span> </span>{
  <span class="md-code-keyword">if</span> (key[<span class="md-code-number">0</span>] === <span class="md-code-string">&apos;_&apos;</span>) {
    <span class="md-code-keyword">throw</span> <span class="md-code-keyword">new</span> <span class="md-code-built_in">Error</span>(<mark class="md-mark md-code-mark">`Invalid attempt to ${action} private <span class="md-code-string">&quot;${key}&quot;</span> property`</mark>)
  }
}
<span class="md-code-keyword">var</span> target = {}
<span class="md-code-keyword">var</span> proxy = <span class="md-code-keyword">new</span> Proxy(target, handler)
proxy.a = <span class="md-code-string">&apos;b&apos;</span>
<span class="md-code-built_in">console</span>.log(proxy.a)
<span class="md-code-comment">// &lt;- &apos;b&apos;</span>
proxy._prop
<span class="md-code-comment">// &lt;- Error: Invalid attempt to get private &quot;_prop&quot; property</span>
proxy._prop = <span class="md-code-string">&apos;c&apos;</span>
<span class="md-code-comment">// &lt;- Error: Invalid attempt to set private &quot;_prop&quot; property</span>
</code></pre> <p><sub><em>You do remember string interpolation with <a href="https://ponyfoo.com/articles/es6-template-strings-in-depth" aria-label="ES6 Template Literals in Depth on Pony Foo">template literals</a>, right?</em></sub></p> <p>It might be worth mentioning that the <code class="md-code md-code-inline">target</code> object <em>(the object being proxied)</em> should often be completely hidden from accessors in proxying scenarios. Effectively <strong>preventing direct access</strong> to the <code class="md-code md-code-inline">target</code> and instead forcing access to <code class="md-code md-code-inline">target</code> exclusively through <code class="md-code md-code-inline">proxy</code>. Consumers of <code class="md-code md-code-inline">proxy</code> will get to access <code class="md-code md-code-inline">target</code> through the <code class="md-code md-code-inline">Proxy</code> object, but will have to <strong>obey your access rules</strong> &#x2013; such as <em>&#x201C;properties prefixed with <code class="md-code md-code-inline">_</code> are off-limits&#x201D;</em>.</p> <p>To that end, you could simply wrap your proxied object in a method, and then return the <code class="md-code md-code-inline">proxy</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">proxied</span> <span class="md-code-params">()</span> </span>{
  <span class="md-code-keyword">var</span> target = {}
  <span class="md-code-keyword">var</span> handler = {
    get (target, key) {
      invariant(key, <span class="md-code-string">&apos;get&apos;</span>)
      <span class="md-code-keyword">return</span> target[key]
    },
    set (target, key, value) {
      invariant(key, <span class="md-code-string">&apos;set&apos;</span>)
      <span class="md-code-keyword">return</span> <span class="md-code-literal">true</span>
    }
  }
  <span class="md-code-keyword">return</span> <mark class="md-mark md-code-mark">new Proxy(target, handler)</mark>
}
<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">invariant</span> <span class="md-code-params">(key, action)</span> </span>{
  <span class="md-code-keyword">if</span> (key[<span class="md-code-number">0</span>] === <span class="md-code-string">&apos;_&apos;</span>) {
    <span class="md-code-keyword">throw</span> <span class="md-code-keyword">new</span> <span class="md-code-built_in">Error</span>(`Invalid attempt to ${action} private <span class="md-code-string">&quot;${key}&quot;</span> property`)
  }
}
</code></pre> <p>Usage stays the same, except now access to <code class="md-code md-code-inline">target</code> is completely governed by <code class="md-code md-code-inline">proxy</code> and its mischievous traps. At this point, any <code class="md-code md-code-inline">_prop</code> properties in <code class="md-code md-code-inline">target</code> are completely inaccessible through the proxy, and since <code class="md-code md-code-inline">target</code> can&#x2019;t be accessed directly from outside the <code class="md-code md-code-inline">proxied</code> method, they&#x2019;re sealed off from consumers for good.</p> <p>You might be tempted to argue that you could achieve the same behavior in ES5 simply by using variables privately scoped to the <code class="md-code md-code-inline">proxied</code> method, without the need for the <code class="md-code md-code-inline">Proxy</code> itself. The big difference is that proxies allow you to &#x201C;privatize&#x201D; property access <strong>on different layers</strong>. Imagine an underlying <code class="md-code md-code-inline">underling</code> object that already has several <em>&#x201C;private&#x201D;</em> properties, which you still access in some other <code class="md-code md-code-inline">middletier</code> module that has intimate knowledge of the internals of <code class="md-code md-code-inline">underling</code>. The <code class="md-code md-code-inline">middletier</code> module could return a <code class="md-code md-code-inline">proxied</code> version of <code class="md-code md-code-inline">underling</code> without having to map the API onto an entirely new object in order to protect those internal variables. Just locking access to any of the &#x201C;private&#x201D; properties would suffice!</p> <p>Here&#x2019;s a use case on schema validation using proxies.</p> <h2 id="schema-validation-with-proxies">Schema Validation with Proxies</h2> <p>While, yes, <em>you could</em> set up schema validation on the <code class="md-code md-code-inline">target</code> object itself, doing it on a <code class="md-code md-code-inline">Proxy</code> means that you separate the validation concerns from the <code class="md-code md-code-inline">target</code> object, which will go on to live as a <strong>POJO</strong> <em>(Plain Old JavaScript Object)</em> happily ever after. Similarly, you can use the proxy as an intermediary for access to many different objects that conform to a schema, without having to rely on prototypal inheritance or <a href="https://ponyfoo.com/articles/es6-classes-in-depth" aria-label="ES6 Classes in Depth on Pony Foo">ES6 <code class="md-code md-code-inline">class</code> classes</a>.</p> <p>In the example below, <code class="md-code md-code-inline">person</code> is a plain model object, and we&#x2019;ve also defined a <code class="md-code md-code-inline">validator</code> object with a <code class="md-code md-code-inline">set</code> trap that will be used as the <code class="md-code md-code-inline">handler</code> for a <code class="md-code md-code-inline">proxy</code> validator of people models. As long as the <code class="md-code md-code-inline">person</code> properties are set through <code class="md-code md-code-inline">proxy</code>, the model invariants will be satisfied according to our validation rules.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> validator = {
  set (target, key, value) {
    <span class="md-code-keyword">if</span> (key === <span class="md-code-string">&apos;age&apos;</span>) {
      <span class="md-code-keyword">if</span> (<span class="md-code-keyword">typeof</span> value !== <span class="md-code-string">&apos;number&apos;</span> || <span class="md-code-built_in">Number</span>.isNaN(value)) {
        <span class="md-code-keyword">throw</span> <span class="md-code-keyword">new</span> <span class="md-code-built_in">TypeError</span>(<span class="md-code-string">&apos;Age must be a number&apos;</span>)
      }
      <span class="md-code-keyword">if</span> (value &lt;= <span class="md-code-number">0</span>) {
        <span class="md-code-keyword">throw</span> <span class="md-code-keyword">new</span> <span class="md-code-built_in">TypeError</span>(<span class="md-code-string">&apos;Age must be a positive number&apos;</span>)
      }
    }
    <span class="md-code-keyword">return</span> <span class="md-code-literal">true</span>
  }
}
<span class="md-code-keyword">var</span> person = { age: <span class="md-code-number">27</span> }
<span class="md-code-keyword">var</span> proxy = <span class="md-code-keyword">new</span> Proxy(person, validator)
proxy.age = <span class="md-code-string">&apos;foo&apos;</span>
<span class="md-code-comment">// &lt;- TypeError: Age must be a number</span>
proxy.age = <span class="md-code-literal">NaN</span>
<span class="md-code-comment">// &lt;- TypeError: Age must be a number</span>
proxy.age = <span class="md-code-number">0</span>
<span class="md-code-comment">// &lt;- TypeError: Age must be a positive number</span>
proxy.age = <span class="md-code-number">28</span>
<span class="md-code-built_in">console</span>.log(person.age)
<span class="md-code-comment">// &lt;- 28</span>
</code></pre> <p>There&#x2019;s also a particularly &#x201C;severe&#x201D; type of proxies that allows us to completely shut off access to <code class="md-code md-code-inline">target</code> whenever we deem it necessary.</p> <h2 id="revocable-proxies">Revocable Proxies</h2> <p>We can use <code class="md-code md-code-inline">Proxy.revocable</code> in a similar way to <code class="md-code md-code-inline">Proxy</code>. The main differences are that the return value will be <code class="md-code md-code-inline">{ proxy, revoke }</code>, and that once <code class="md-code md-code-inline">revoke</code> is called the <code class="md-code md-code-inline">proxy</code> <strong>will throw</strong> on <em>any operation</em>. Let&#x2019;s go back to our pass-through <code class="md-code md-code-inline">Proxy</code> example and make it <code class="md-code md-code-inline">revocable</code>. Note that we&#x2019;re <em>not using</em> the <code class="md-code md-code-inline">new</code> operator here. Calling <code class="md-code md-code-inline">revoke()</code> over and over has no effect.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">var</span> target = {}
<span class="md-code-keyword">var</span> handler = {}
<span class="md-code-keyword">var</span> <mark class="md-mark md-code-mark">{proxy, revoke} = Proxy.revocable(target, handler)</mark>
proxy.a = <span class="md-code-string">&apos;b&apos;</span>
<span class="md-code-built_in">console</span>.log(proxy.a)
<span class="md-code-comment">// &lt;- &apos;b&apos;</span>
<mark class="md-mark md-code-mark">revoke()</mark>
revoke()
revoke()
<span class="md-code-built_in">console</span>.log(proxy.a)
<span class="md-code-comment">// &lt;- TypeError: illegal operation attempted on a revoked proxy</span>
</code></pre> <p>This type of <code class="md-code md-code-inline">Proxy</code> is particularly useful because you can now completely cut off access to the <code class="md-code md-code-inline">proxy</code> granted to a consumer. You start by passing of a revocable <code class="md-code md-code-inline">Proxy</code> and keeping around the <code class="md-code md-code-inline">revoke</code> method <em>(hey, maybe you can <a href="https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth" aria-label="ES6 WeakMaps, Sets, and WeakSets in Depth on Pony Foo">use a <code class="md-code md-code-inline">WeakMap</code></a> for that)</em>, and when its clear that the consumer shouldn&#x2019;t have access to <code class="md-code md-code-inline">target</code> anymore, &#x2013; not even through <code class="md-code md-code-inline">proxy</code> &#x2013; you <code class="md-code md-code-inline">.revoke()</code> the hell out of their access. <em>Goodbye consumer!</em></p> <p>Furthermore, since <code class="md-code md-code-inline">revoke</code> is available on the same scope where your <code class="md-code md-code-inline">handler</code> traps live, you could set up <strong>extremely paranoid rules</strong> such as <em>&#x201C;if a consumer attempts to access a private property more than once, revoke their <code class="md-code md-code-inline">proxy</code> entirely&#x201D;</em>.</p> <blockquote> <p>Check back tomorrow for the second part of the article about proxies, which discusses <code class="md-code md-code-inline">Proxy</code> <em>traps</em> beyond <code class="md-code md-code-inline">get</code> and <code class="md-code md-code-inline">set</code>.</p> </blockquote></div>
