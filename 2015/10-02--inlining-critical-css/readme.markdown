<div></div>

<h1>Inlining Critical CSS for Dynamic Web Apps</h1>

<p><kbd>performance</kbd> <kbd>penthouse</kbd> <kbd>critical-css</kbd> <kbd>bash</kbd></p>

<blockquote><p>During the <a href="https://ponyfoo.com/articles/redesign" aria-label="Pony Foo Gets a Face Lift">redesign</a> I was faced with a problem and I had to rethink the way I inline CSS in my blog, so I figured it&#x2019;d be a good time to write about it in more &#x2026;</p></blockquote>

<div><p>During the <a href="https://ponyfoo.com/articles/redesign" aria-label="Pony Foo Gets a Face Lift">redesign</a> I was faced with a problem and I had to rethink the way I inline CSS in my blog, so I figured it&#x2019;d be a good time to write about it in more detail. Critical CSS inlining is a technique you can use to speed up the performance of your web apps by, <em>well</em>, inlining the &#x201C;critical&#x201D; CSS in a <code class="md-code md-code-inline">&lt;style&gt;</code> tag, and deferring the rest of your CSS. How does that work?</p></div>

<div></div>

<div><p>First off, we have to identify the critical content of a page. In my case, what&#x2019;s visible below constitutes the critical content, also known as the content that&#x2019;s <em>&#x201C;above the fold&#x201D;</em>.</p> <p><a href="https://ponyfoo.com/articles/redesign" aria-label="Pony Foo Gets a Face Lift"><img src="https://i.imgur.com/qVWJl7L.png" alt="Redesign article above the fold"></a></p> <p>This is the piece of the site we want to get in the face of humans immediately. That&#x2019;s not just limited to blogs or other content distribution sites, web apps should also strive to serve the content above the fold as fast as possible to their users, and inlining critical CSS is an excellent way of shaving milliseconds from your load time.</p></div>

<div><p>Now that we&#x2019;ve identified the critical content of a page we can move onto the next step: identifying the bare minimum set of CSS rules that allow visible content to be rendered exactly as seen on the screenshot. There&#x2019;s tools that can help automate that away <em>(as we&#x2019;ll see in a minute)</em>, so let&#x2019;s move on. What&#x2019;s next?</p> <p>Well, once the critical CSS has been identified, it should be placed inline inside a <code class="md-code md-code-inline">&lt;style&gt;</code> tag, as shown below <em>(see also the source code for this web page)</em>.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-doctype">&lt;!doctype html&gt;</span>
<span class="md-code-tag">&lt;<span class="md-code-title">html</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">head</span>&gt;</span>
    <mark class="md-mark md-code-mark"><span class="md-code-tag">&lt;<span class="md-code-title">style</span>&gt;</span><span><span class="md-code-comment">/* critical css is inlined here */</span></span><span class="md-code-tag">&lt;/<span class="md-code-title">style</span>&gt;</span></mark>
  <span class="md-code-tag">&lt;/<span class="md-code-title">head</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">body</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">body</span>&gt;</span>
<span class="md-code-tag">&lt;/<span class="md-code-title">html</span>&gt;</span>
</code></pre> <p>What we just did means that the top of the muffin would be immediately readable to the user, without any extra request being made for a CSS file. That means that, unlike in the traditional approach on blocking on that extra CSS request before rendering any content, the content is displayed immediately. Problem is, if you haven&#x2019;t removed the <code class="md-code md-code-inline">&lt;link&gt;</code> tag pointing to the rest of your CSS, it&#x2019;s still as slow as ever. If you did remove it, the rest of the page would be unstyled. To fix this, we simply defer loading of the <code class="md-code md-code-inline">&lt;link&gt;</code> tag for later.</p> <p>That&#x2019;s it! Let&#x2019;s recap the steps we should be taking.</p> <ol> <li>Identify <em>critical</em> content</li> <li>Identify the CSS rules that display critical content as-is in a fully loaded page</li> <li>Take those rules and inline them in a <code class="md-code md-code-inline">&lt;style&gt;</code> tag in your page</li> <li>Load the rest of your CSS asynchronously so that it <strong>doesn&#x2019;t block rendering</strong></li> </ol> <p>There&#x2019;s a few ingredients we&#x2019;ll need to make that recipe work.</p> <ul> <li><code class="md-code md-code-inline">phantomjs</code> &#x2013; a headless browser we can run directly in the command-line</li> <li><a href="https://github.com/pocketjoso/penthouse" target="_blank" aria-label="pocketjoso/penthouse on GitHub"><code class="md-code md-code-inline">penthouse</code></a> &#x2013; a tool that identifies critical content and yields inline-ready CSS rules</li> <li><code class="md-code md-code-inline">clean-css</code> &#x2013; so that you can minify the results from <code class="md-code md-code-inline">penthouse</code></li> <li>An endpoint such as <code class="md-code md-code-inline">http://localhost:3000/</code> &#x2013; where your site is hosted, it can be development as long as layout matches roughly</li> <li>A viewport size <em>(which defaults to <code class="md-code md-code-inline">1300x900</code>)</em> &#x2013; everything within the viewport is considered critical content</li> </ul> <p>With Node.js installed and a <code class="md-code md-code-inline">package.json</code> ready, head over to the command-line, jump into your project directory, and enter the following command to install <code class="md-code md-code-inline">phantomjs</code> and <code class="md-code md-code-inline">penthouse</code>. The <code class="md-code md-code-inline">-D</code> flag is an alias for <code class="md-code md-code-inline">--save-dev</code>, <code class="md-code md-code-inline">i</code> is short for <code class="md-code md-code-inline">install</code>.</p> <pre class="md-code-block"><code class="md-code md-lang-bash">npm i phantomjs penthouse clean-css -D
</code></pre> <p>With both those dependencies in your project, we can now get started. Let&#x2019;s also add a script entry to our <code class="md-code md-code-inline">package.json</code>. I typically place my build scripts inside a <code class="md-code md-code-inline">build</code> directory, and name them by environment. I usually also have smaller scripts that I reuse across environments.</p> <pre class="md-code-block"><code class="md-code md-lang-json">{
  &quot;<span class="md-code-attribute">scripts</span>&quot;: <span class="md-code-value">{
    &quot;<span class="md-code-attribute">build-production</span>&quot;: <span class="md-code-value"><span class="md-code-string">&quot;build/build-production&quot;</span>
  </span>}
</span>}
</code></pre> <p>With that out of the way, we can now create our script. Remember to make it executable so your OS won&#x2019;t complain!</p> <pre class="md-code-block"><code class="md-code md-lang-bash">touch build/build-production
<mark class="md-mark md-code-mark">chmod +x build/build-production</mark>
</code></pre> <p>Okay, okay. Finally we get to business, let&#x2019;s look at the snippet below. Note how I&#x2019;m calling <code class="md-code md-code-inline">phantomjs</code> with the custom <code class="md-code md-code-inline">penthouse</code> script and passing in the parameters that <code class="md-code md-code-inline">penthouse</code> requires, namely an endpoint where they can visit your app, and a CSS file to analyze. Your app has to be running, naturally. Once that&#x2019;s done we save the critical CSS into a file. I usually place files generated during builds into a <code class="md-code md-code-inline">.bin</code> directory, but you can place them where you want.</p> <pre class="md-code-block"><code class="md-code md-lang-bash">ALL_CSS=<span class="md-code-string">&quot;/path/to/physical/css/file&quot;</span> <span class="md-code-comment"># e.g &quot;public/all.css&quot;</span>
CRITICAL=<span class="md-code-string">&quot;<span class="md-code-variable">$(phantomjs node_modules/penthouse/penthouse.js http://localhost:$PORT $ALL_CSS)</span>&quot;</span>
<span class="md-code-built_in">echo</span> <span class="md-code-variable">$CRITICAL</span> | cleancss -o .bin/inlined/<span class="md-code-variable">$2</span>.css
</code></pre> <p>Note that you probably want to automate the server starting and stopping. To do that, you could start the server as a background job before using <code class="md-code md-code-inline">phantomjs</code>, and kill it afterwards using some insults with <code class="md-code md-code-inline">kill $!</code> &#x2013; which kills the last backgrounded job.</p> <pre class="md-code-block"><code class="md-code md-lang-bash"><mark class="md-mark md-code-mark">node app &amp;</mark> <span class="md-code-comment"># doesn&apos;t have to be a node app, though</span>
sleep <span class="md-code-number">5</span> <span class="md-code-comment"># give it some time to start listening</span>
<mark class="md-mark md-code-mark"><span class="md-code-comment"># gather critical css in phantomjs</span></mark>
<span class="md-code-built_in">kill</span> $! <span class="md-code-comment"># kills `node app`</span>
</code></pre> <p>If you think <code class="md-code md-code-inline">sleep 5</code> is a lousy way of waiting for the app to begin listening, you could use the following loop to replace it <em>&#x2013; in unix systems.</em> It checks whether an app is listening on the provided TCP <code class="md-code md-code-inline">$PORT</code> every <code class="md-code md-code-inline">100ms</code>, and continues when it finds a listening process. If you wanted to do the same in Windows systems, check out the code for <a href="https://github.com/bevacqua/process-finder/blob/c7770376006e289c361ca8100c0595c5656b5d03/lib/find.js#L20" target="_blank" aria-label="bevacqua/process-finder on GitHub"><code class="md-code md-code-inline">process-finder</code></a>.</p> <pre class="md-code-block"><code class="md-code md-lang-bash"><span class="md-code-comment"># wait for app to listen on $PORT</span>
<span class="md-code-keyword">while</span> [ <span class="md-code-string">&quot;<span class="md-code-variable">$(lsof -i tcp:$PORT | grep -i listen)</span>&quot;</span> == <span class="md-code-string">&quot;&quot;</span> ]
<span class="md-code-keyword">do</span>
  sleep <span class="md-code-number">0.1</span>
<span class="md-code-keyword">done</span>
</code></pre> <p>Now that you have the minified critical CSS for your homepage safely stored in a file, you could add it to your layout. Let&#x2019;s assume you have Mustache templates for your views.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">style</span>&gt;</span><span><span class="md-code-rules">{<span>{{<span class="md-code-attribute">inlineCriticalCssFromFile}}}</span></span></span></span><span class="md-code-tag">&lt;/<span class="md-code-title">style</span>&gt;</span>
</code></pre> <p>What about the rest of the styles? You can defer them with a snippet like the one below. The <code class="md-code md-code-inline">media</code> hack forces the styles to be loaded asynchronously and prevents render-blocking.</p> <pre class="md-code-block"><code class="md-code md-lang-xml"><span class="md-code-tag">&lt;<span class="md-code-title">script</span>&gt;</span><span>
~<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(document)</span> </span>{
  <span class="md-code-keyword">var</span> elem = <span class="md-code-built_in">document</span>.createElement(<span class="md-code-string">&apos;link&apos;</span>);
  <span class="md-code-keyword">var</span> head = <span class="md-code-built_in">document</span>.getElementsByTagName(<span class="md-code-string">&apos;head&apos;</span>)[<span class="md-code-number">0</span>];
  elem.rel = <span class="md-code-string">&apos;stylesheet&apos;</span>;
  elem.href = <mark class="md-mark md-code-mark"><span class="md-code-string">&apos;/css/all.css&apos;</span></mark>;
  elem.media = <mark class="md-mark md-code-mark"><span class="md-code-string">&apos;only x&apos;</span></mark>;
  head.appendChild(elem);
  setTimeout(<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
    elem.media = <span class="md-code-string">&apos;all&apos;</span>;
  });
}(<span class="md-code-built_in">document</span>);
</span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>
</code></pre> <h1 id="inlining-css-across-multiple-components">Inlining CSS Across Multiple Components</h1> <p>By critical content we&#x2019;re talking about the content that&#x2019;s immediately visible when your page loads. The content usually depends on which page you&#x2019;re looking at, but the CSS and layout isn&#x2019;t that different across pages if <a href="https://github.com/pocketjoso/penthouse" target="_blank" aria-label="pocketjoso/penthouse on GitHub">we&#x2019;ve architected it properly</a>, in such a way that it&#x2019;s made out of small reusable components that make up the CSS for the entire site.</p> <p>Nevertheless, we have to draw the line somewhere. Critical CSS rules seldom vary across <strong>different endpoints for the same route</strong> in a web app, <em>&#x2013; all of my articles share the vast majority of their CSS rules</em>. For example, <code class="md-code md-code-inline">/articles/redesign</code> and <code class="md-code md-code-inline">/articles/inlining-critical-css</code> both have the navigation bar, the article&#x2019;s title, an introduction, an ad, and then the article. However, compare that to my home page.</p> <p><img alt="Critical content in the home page of Pony Foo" class="" src="https://i.imgur.com/XrMT5Eg.png"></p> <p>The home page is radically different, featuring a column layout and whatnot, and attempting to identify critical CSS for both of these pages at the same time would be kind of a moot point. If you went that road you&#x2019;d eventually end up inlining the CSS for your entire site! In order to address that, I&#x2019;ve found routes to be a good parameter. I&#x2019;ve identified a few key areas in my site, and adjusted my script to build multiple critical CSS files, one for each key component in the site. The Bash function below gathers critical CSS from a given endpoint in my app and saves it into a file named by the component that endpoint represents.</p> <pre class="md-code-block"><code class="md-code md-lang-bash"><span class="md-code-function"><span class="md-code-title">gather</span></span>() { <span class="md-code-comment"># endpoint, component_name</span>
  CRITICAL=<span class="md-code-string">&quot;<span class="md-code-variable">$(phantomjs node_modules/penthouse/penthouse.js http://localhost:$PORT$1 $ALL_CSS)</span>&quot;</span>
  <span class="md-code-built_in">echo</span> <span class="md-code-variable">$CRITICAL</span> | cleancss -<span class="md-code-operator">-s</span>0 -o .bin/inlined/<span class="md-code-variable">$2</span>.css
  <span class="md-code-built_in">echo</span> <span class="md-code-string">&quot;penthouse: gathered css for <span class="md-code-variable">$2</span>&quot;</span>
}
</code></pre> <p>Next, I picked a few components in my site: the landing page, the login page, any article, the history, search, and the 404 page. I gather critical CSS for each of those and <code class="md-code md-code-inline">gather</code> places that in different files.</p> <pre class="md-code-block"><code class="md-code md-lang-bash">gather <span class="md-code-string">&quot;/&quot;</span> <span class="md-code-string">&quot;summaries&quot;</span>
gather <span class="md-code-string">&quot;/account/login&quot;</span> <span class="md-code-string">&quot;login&quot;</span>
gather <span class="md-code-string">&quot;/articles/last&quot;</span> <span class="md-code-string">&quot;article&quot;</span>
gather <span class="md-code-string">&quot;/articles/history&quot;</span> <span class="md-code-string">&quot;history&quot;</span>
gather <span class="md-code-string">&quot;/articles/tagged/ponyfoo&quot;</span> <span class="md-code-string">&quot;search&quot;</span>
gather <span class="md-code-string">&quot;/not-found&quot;</span> <span class="md-code-string">&quot;not-found&quot;</span>
</code></pre> <p>My server then decides what component it&#x2019;s rendering, and inlines the CSS for that component. If the component doesn&#x2019;t exist, then CSS blocks rendering. This is useful for those cases where you don&#x2019;t want to go through the trouble of inlining CSS since it&#x2019;s not worth it for you, like when a page is behind authentication and you think most users will have cached your CSS by then. The code below inlines critical CSS, defers the rest, and provides a fallback through a <code class="md-code md-code-inline">&lt;noscript&gt;</code> tag.</p> <p>If no critical CSS is available for our component, then we fall back to the blocking <code class="md-code md-code-inline">&lt;link&gt;</code> tag.</p> <pre class="md-code-block"><code class="md-code md-lang-xml">{{#inlineStyles}}
  <span class="md-code-tag">&lt;<span class="md-code-title">style</span>&gt;</span><span><span class="md-code-rules">{<span>{{<span class="md-code-attribute">inlineStyles}}}</span></span></span></span><span class="md-code-tag">&lt;/<span class="md-code-title">style</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">script</span>&gt;</span><span>
  ~<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">(document)</span> </span>{
    <span class="md-code-keyword">var</span> elem = <span class="md-code-built_in">document</span>.createElement(<span class="md-code-string">&apos;link&apos;</span>);
    <span class="md-code-keyword">var</span> head = <span class="md-code-built_in">document</span>.getElementsByTagName(<span class="md-code-string">&apos;head&apos;</span>)[<span class="md-code-number">0</span>];
    elem.rel = <span class="md-code-string">&apos;stylesheet&apos;</span>;
    elem.href = <mark class="md-mark md-code-mark"><span class="md-code-string">&apos;/css/all.css&apos;</span></mark>;
    elem.media = <mark class="md-mark md-code-mark"><span class="md-code-string">&apos;only x&apos;</span></mark>;
    head.appendChild(elem);
    setTimeout(<span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
      elem.media = <span class="md-code-string">&apos;all&apos;</span>;
    });
  }(<span class="md-code-built_in">document</span>);
  </span><span class="md-code-tag">&lt;/<span class="md-code-title">script</span>&gt;</span>
  <span class="md-code-tag">&lt;<span class="md-code-title">noscript</span>&gt;</span>
    <span class="md-code-tag">&lt;<span class="md-code-title">link</span> <span class="md-code-attribute">rel</span>=<span class="md-code-value">&apos;stylesheet&apos;</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;text/css&apos;</span> <span class="md-code-attribute">href</span>=<span class="md-code-value">&apos;/css/all.css&apos;</span>&gt;</span>
  <span class="md-code-tag">&lt;/<span class="md-code-title">noscript</span>&gt;</span>
{{/inlineStyles}}
{{^inlineStyles}}
  <span class="md-code-tag">&lt;<span class="md-code-title">link</span> <span class="md-code-attribute">rel</span>=<span class="md-code-value">&apos;stylesheet&apos;</span> <span class="md-code-attribute">type</span>=<span class="md-code-value">&apos;text/css&apos;</span> <span class="md-code-attribute">href</span>=<span class="md-code-value">&apos;/css/all.css&apos;</span>&gt;</span>
{{/inlineStyles}}
</code></pre> <blockquote> <p>Of course, you could set up an authentication bypass in your local development servers if inlining CSS for authenticated components is important as well.</p> </blockquote> <p>We just saved humans visiting our site from having to download <em>all</em> of our CSS before being able to see some content.</p></div>
