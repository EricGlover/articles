<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/noindex/contributing.markdown"><code>contributing.markdown</code></a> for details. See also: <a href="https://ponyfoo.com/articles/polyfills-or-ponyfills">web version</a>.</sub>

<a href="https://ponyfoo.com/articles/polyfills-or-ponyfills"><div><img src="https://i.imgur.com/IEBEN86.jpg" alt="Polyfills or Ponyfills?"></div></a>

<h1><p>Polyfills or Ponyfills?</p></h1>

<p><kbd>food-for-thought</kbd> <kbd>polyfill</kbd> <kbd>ponyfill</kbd></p>

<blockquote><p>These are short-form <mark class="md-mark">&#x201C;thoughts&#x201D;</mark>, in addition to the usual longer-form articles in the blog. The <a href="https://ponyfoo.com/articles/food-for-thought-begins">goal</a> is to publish <a href="https://ponyfoo.com/articles/tagged/food-for-thought">one of these</a> every weekday. I&#x2019;d &#x2026;</p></blockquote>

<div><p>These are short-form <mark class="md-mark">&#x201C;thoughts&#x201D;</mark>, in addition to the usual longer-form articles in the blog. The <a href="https://ponyfoo.com/articles/food-for-thought-begins">goal</a> is to publish <a href="https://ponyfoo.com/articles/tagged/food-for-thought">one of these</a> every weekday. I&#x2019;d love to know what you think. You may send your questions to <a href="mailto:thoughts@ponyfoo.com">thoughts@ponyfoo.com</a>. I&#x2019;ll try to answer them over email and I <em>may publish them here, with your approval</em>. I also write <em>thoughts</em> about the <mark class="md-mark">current state of front-end development</mark>, and opinions on other people&#x2019;s articles. You can use the form to the right <em>(near the bottom in mobile)</em> to <mark class="md-mark">subscribe via email</mark>.</p></div>

<div></div>

<div><p>These days we all know what polyfills are. It&#x2019;s been over five years since Remy Sharp <a href="https://plus.google.com/+PaulIrish/posts/4okUyAE1qQH" target="_blank">coined the term</a>. A polyfill is usually a snippet of code that patches a piece of functionality that&#x2019;s missing in some browsers. With ES5, polyfills became all the rage because you could instantly get access to functional <code class="md-code md-code-inline">Array.prototype</code> methods like <code class="md-code md-code-inline">.map</code> and <code class="md-code md-code-inline">.reduce</code> just by dropping in a file. There&#x2019;s also entire bundles that patch most of ES5 for you to use in older browsers, such as <a href="https://github.com/es-shims/es5-shim" target="_blank"><code class="md-code md-code-inline">es5-shim</code></a>. However, not all is peaches and cream.</p> <p>When it comes to ES6, a flurry of problems turn polyfills into ineffective vaccines. For one, you simply <strong>can&#x2019;t polyfill language features</strong>, such as arrow functions, generators, <code class="md-code md-code-inline">async</code>/<code class="md-code md-code-inline">await</code> <em>(ES7)</em>, rest and spread parameters, classes, modules, etc. There are other features you <em>*could*</em> actually polyfill, such as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of" target="_blank"><code class="md-code md-code-inline">Array.of</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN" target="_blank"><code class="md-code md-code-inline">Number.isNaN</code></a> or <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank"><code class="md-code md-code-inline">Object.assign</code></a>, because those don&#x2019;t introduce syntax changes to the language &#x2013; except that <strong>you shouldn&#x2019;t</strong>.</p></div>

<div><p>Christian Heilmann argues that, sometimes, developers probe feature support by <a href="http://christianheilmann.com/2015/08/17/how-about-we-make-es6-the-new-baseline/" target="_blank" aria-label="&apos;How About We Make ES6 the New Baseline?&apos; asks @codepo8">testing for some other feature</a> that&#x2019;s implemented most of the time alongside the feature we actually want to use. Under those circumstances, and considering you already have tools like <a href="https://github.com/babel/babel" target="_blank" aria-label="babel/babel on GitHub">Babel</a> if you&#x2019;d like to play around with ES6, I suggest you strongly avoid polyfills for any ES6 features, out of the ones that could be polyfilled.</p> <p>As an alternative, you could use <em>ponyfills</em> instead.</p> <h2 id="ponyfills">Ponyfills</h2> <p>A <em>ponyfill</em> is almost the same as a polyfill, but not quite. Instead of patching functionality for older browsers, a ponyfill provides that functionality as a standalone module you can use. Let&#x2019;s go to an example.</p> <p>Here&#x2019;s how your typical polyfill looks like &#x2013; it was taken from <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim" target="_blank" aria-label="String.prototype.trim() &#x2013; MDN">MDN</a>.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-keyword">if</span> (!<span class="md-code-built_in">String</span>.prototype.trim) {
  <span class="md-code-built_in">String</span>.prototype.trim = <span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-params">()</span> </span>{
    <span class="md-code-keyword">return</span> <span class="md-code-keyword">this</span>.replace(<span class="md-code-regexp">/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g</span>, <span class="md-code-string">&apos;&apos;</span>);
  };
}
</code></pre> <p>The equivalent ponyfill would be a module that exports the method below.</p> <pre class="md-code-block"><code class="md-code md-lang-javascript"><span class="md-code-function"><span class="md-code-keyword">function</span> <span class="md-code-title">trim</span> <span class="md-code-params">(text)</span> </span>{
  <span class="md-code-keyword">return</span> text.replace(<span class="md-code-regexp">/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g</span>, <span class="md-code-string">&apos;&apos;</span>);
}
</code></pre> <p>They&#x2019;re very similar, except a ponyfill doesn&#x2019;t patch missing functionality others may be relying on for <em>feature detection</em>.</p> <h2 id="polyfills-or-ponyfills">Polyfills or Ponyfills?</h2> <p>I think both have their merits. Polyfills are great for methods like <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim" target="_blank" aria-label="String.prototype.trim() &#x2013; MDN"><code class="md-code md-code-inline">String.prototype.trim</code></a> because they allow you to use the methods on <code class="md-code md-code-inline">String</code> instances. That gets even better with methods like <code class="md-code md-code-inline">.map</code>, and <code class="md-code md-code-inline">.reduce</code> which return <code class="md-code md-code-inline">this</code>, so chaining is great. Sure, you could always do <code class="md-code md-code-inline">reduce(map([1, 2, 3], twice), sum, 0)</code> instead of <code class="md-code md-code-inline">[1, 2, 3].map(twice).reduce(sum, 0)</code>, but there&#x2019;s also the fact that many of your dependencies probably are assuming ES5 is on the table, so it&#x2019;s useful to polyfill for the stuff that&#x2019;s missing in older browsers.</p> <p>When it comes to ES6 (or more complicated ES5 polyfills) however, the situation changes a little bit. Sometimes we can&#x2019;t implement a solution that&#x2019;s <strong>fully spec-compliant</strong>, and in those cases using a polyfill might be the wrong answer. A polyfill would translate into telling the rest of the codebase that it&#x2019;s okay to use the feature, that it&#x2019;ll work just like in modern browsers, but it might not in edge cases.</p> <p>In that situation it&#x2019;s better to use a ponyfill, because that way you won&#x2019;t be polluting expectations about what. Only you will be leveraging the new functionality, and you are well aware of the limitations of that solution, so <em>all is good</em> with the world. Meanwhile, other pieces of code that are <em>feature-detecting</em> on the piece of functionality you&#x2019;ve half-patched will continue to work by ignoring it as usual. Here, we can fall back to a great thing I&#x2019;ve heard that I don&#x2019;t hear often enough: &#x201C;users browsing the web with shitty browsers <mark class="md-mark">are used to shitty experiences</mark>&#x201D;.</p> <blockquote> <p>In so many words, strive <strong>not to break expectations</strong>.</p> </blockquote> <p><mark class="md-mark">Have any questions or thoughts you&#x2019;d like me to write about?</mark> <em>Send an email to <a href="mailto:thoughts@ponyfoo.com" aria-label="Send me your questions and feedback!">thoughts@ponyfoo.com</a>.</em> Remember to <strong>subscribe</strong> if you got this far!</p></div>
