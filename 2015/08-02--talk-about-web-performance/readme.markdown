<sub>&#x1F6A8; <strong>Autogenerated!</strong> See <a href="https://github.com/ponyfoo/articles/tree/master/contributing.markdown"><code>contributing.markdown</code></a> for details.</sub>

<a href="https://ponyfoo.com/articles/talk-about-web-performance"><div></div></a>

<h1>Let&#x2019;s talk about Web Performance</h1>

<p><kbd>performance</kbd> <kbd>talks</kbd> <kbd>automation</kbd> <kbd>tips</kbd> <kbd>budgets</kbd></p>

<blockquote><p>For the <a href="http://lanyrd.com/profile/bevacqua/past/speaking/" target="_blank">past few months</a> I&#x2019;ve been speaking at conferences about web performance. Unfortunately, none of those awesome conferences have published their talk videos </p></blockquote>

<div><p>For the <a href="http://lanyrd.com/profile/bevacqua/past/speaking/" target="_blank">past few months</a> I&#x2019;ve been speaking at conferences about web performance. Unfortunately, none of those awesome conferences have published their talk videos <em>just yet</em>. I figured I&#x2019;d publish a write up about the talk, the things I&#x2019;ve learned since I started speaking about these things, and the key take-aways from my talk. The presentation <a href="https://speakerdeck.com/bevacqua/high-performance-in-the-critical-path" target="_blank"><em>(you can find the slides online here)</em></a> is split into three parts. The <strong>first part</strong> covers <mark class="md-mark">measuring performance</mark>, or <strong>understanding what is going on</strong> with your site; the <strong>second part</strong> goes over the <mark class="md-mark">improvements you can make</mark> to your site, such as shrinking images or <em>inlining critical CSS</em>; and the <strong>last part</strong> is <mark class="md-mark">dedicated to the implementation</mark> explaining how you can actually <strong>implement those improvements</strong>, for example using <a href="https://github.com/imagemin/imagemin" target="_blank"><code class="md-code md-code-inline">imagemin</code></a> or <a href="https://github.com/pocketjoso/penthouse" target="_blank"><code class="md-code md-code-inline">penthouse</code></a>. The presentation also introduces you to <a href="https://github.com/bevacqua/perfschool" target="_blank"><code class="md-code md-code-inline">perfschool</code></a>, a NodeSchool workshopper that walks you through <strong>detailed web performance optimization scenarios</strong>, and also shows you cat pictures while you&#x2019;re at it.</p></div>

<div></div>

<div><p>There&#x2019;s only so much information you can cram into a half an hour long presentation. The <a href="https://github.com/bevacqua/perfschool" target="_blank"><code class="md-code md-code-inline">perfschool</code></a> workshopper takes a while to complete, but it gives you a much better perspective into the kind of optimizations you could be doing. The <a href="https://speakerdeck.com/bevacqua/high-performance-in-the-critical-path" target="_blank">presentation slides</a> should give you insight into all of the different tools that you could be using, as well as an overview around performance measurement, automation, budgeting, and optimization techniques.</p> <p>It&#x2019;s usually really hard to put together a slide deck that&#x2019;s understandable outside of the context of the presentation. That&#x2019;s why I&#x2019;m putting together this blog post to help you gain insight into the <mark class="md-mark">things I wanted to highlight</mark> in my talk.</p> <blockquote> <p>Brace yourself &#x2013; this is a <em>long</em> article. I&#x2019;ve split it into two parts so that it&#x2019;s easier to follow &#x2013; because common sense.</p> </blockquote> <p>This is the <strong>first part, and it&#x2019;s dedicated to gauging performance</strong>, automating those measurements, defining a performance budget, and enforcing it. The second part of the article is dedicated to <a href="https://ponyfoo.com/articles/fixing-web-performance">fixing performance issues across the web stack</a>. I had quite a bit of fun writing this piece, I hope you have <em>at least half as much fun</em> reading it!</p> <h1 id="update-presentation-video-now-available">Update: <em>Presentation Video</em> Now Available!</h1> <p>One of the conferences where I gave this presentation has uploaded the talk video, feel free to check it out on Vimeo. I encourage you to give me your feedback as well :)</p> <blockquote class="twitter-tweet"><p>My &quot;High Performance in the Critical Rendering Path&quot; video is up!<a href="http://t.co/RVslh1BLtf">http://t.co/RVslh1BLtf</a><br><br>Thanks <a href="https://twitter.com/NDC_Conferences">@NDC_Conferences</a> :) <a href="http://t.co/9Y1l45gbLy">pic.twitter.com/9Y1l45gbLy</a></p>&#x2014; Nicol&#xE1;s Bevacqua (@nzgb) <a href="https://twitter.com/nzgb/status/639885677723799552">September 4, 2015</a></blockquote></div>

<div><h1 id="measuring-performance">Measuring Performance</h1> <p>There are plenty of ways in which we can measure performance. Measuring performance is important when we&#x2019;re <strong>trying to improve performance</strong> on our sites. You need to know where you are before you know where you can go next. Let&#x2019;s go over a few ways in which we can measure performance.</p> <h2 id="chrome-devtools-audits">Chrome DevTools Audits</h2> <p>In Chrome, open up your DevTools <em>(</em><kbd>&#x2325;</kbd>+<kbd>&#x2318;</kbd>+<kbd>i</kbd><em>)</em>, and you&#x2019;ll notice that there&#x2019;s an <em>Audits</em> tab that you&#x2019;ve probably never used until today. You can use that to run a quick performance audit on the website you&#x2019;re currently visit. Feel free to try it on Pony Foo!</p> <p><img alt="DevTools Audit in action" class="" src="https://i.imgur.com/aQeEys0.png"></p> <p>We are then met with a series of <em>&#x201C;tests&#x201D;</em> that the site has failed to pass. These tests <em>&#x2013; or rules &#x2013;</em> are <strong>one of the easiest ways</strong> in which you can figure out that something is amiss in your current setup. In the <em>screenshot</em> displayed above, we can find the following <strong>actionable</strong> items:</p> <ul> <li>There&#x2019;s <mark class="md-mark">243</mark> unused CSS rules we could safely remove</li> <li>Images are sometimes larger than they need to be</li> <li>Cookie size is too large <em>(probably due to <a href="http://blog.lmorchard.com/2015/07/22/the-verge-web-sucks/" target="_blank" aria-label="The Verge&apos;s Web Sucks">analytics trackers</a>, though)</em></li> </ul> <p>Audits is a great web to get almost instant feedback about a site, but it might not be the deepest dive into how your app is performing, there&#x2019;s a limited number of rules that they use to check how your site is doing, and there&#x2019;s no insight into the <strong>effectiveness of caches</strong> we&#x2019;ve set up on repeated views <em>(cache priming)</em>.</p> <p>Let&#x2019;s try another tool, this time it&#x2019;s a web service.</p> <h2 id="pagespeed-insights">PageSpeed Insights</h2> <p>Despite a recent announcement that confused everyone into thinking PageSpeed is going to <a href="https://developers.google.com/speed/pagespeed/service/Deprecation" target="_blank" aria-label="Turndown information for PageSpeed Service">be shut down</a> &#x2013; <em>it <a href="https://news.ycombinator.com/item?id=9500195" target="_blank" aria-label="We&apos;re only deprecating PageSpeed Service">is not</a></em> &#x2013; PageSpeed is an awesome tool in the web performance caretaker&#x2019;s arsenal. PageSpeed is a web service <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" aria-label="PageSpeed Insights">that you can access online</a> and once you&#x2019;ve entered the URL to your site, you&#x2019;ll get back a bunch of metrics and action items <em>(things you should do to improve the performance of an app)</em>.</p> <p>If your site isn&#x2019;t publicly accessible yet, because it&#x2019;s a stealth startup of some sort, or otherwise hosted only in your local environment, you can still use PageSpeed. Just start a web server that listens on port <code class="md-code md-code-inline">$PORT</code> and then execute the next couple of lines in Bash.</p> <pre class="md-code-block"><code class="md-code md-lang-bash">npm install localtunnel -g
lt --port <span class="md-code-variable">$PORT</span>
</code></pre> <p>The <a href="https://github.com/defunctzombie/localtunnel" target="_blank" aria-label="defunctzombie/localtunnel on GitHub"><code class="md-code md-code-inline">localtunnel</code></a> package will create a secure tunnel between your application and the open Internet, and it&#x2019;ll give you back a URL that&#x2019;s proxied back to your local port. You can then just paste that into PageSpeed, and you&#x2019;ll be able to analyze the site without any hosting platforms getting involved. Of course, when performance fine-tuning is of the essence, you should <strong><em>&#x2013; at least &#x2013;</em></strong> be relying on staging environments, in order to get better estimates and insights into your metrics.</p> <p><a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" aria-label="PageSpeed Insights"><img alt="PageSpeed Insights into ponyfoo.com" class="" src="https://i.imgur.com/w0hO5MP.png"></a></p> <p>PageSpeed approaches performance measurement in a few different ways for your site. First off, you&#x2019;ll notice that PageSpeed provides you with measurements categorized as &#x201C;mobile&#x201D; and &#x201C;desktop&#x201D; right off the bat. This comes in handy because they even provide you with some very basic UX advice <em>(e.g &#x201C;use larger tap targets&#x201D;)</em>.</p> <p>They approach the analysis with a few more advanced techniques too. For example, the desktop version of their test indicates that you should be <a href="https://ponyfoo.com/articles/critical-path-performance-optimization" aria-label="Critical Path Performance Optimization at Pony Foo">inlining critical CSS</a>. This is something we seldom hear about nowadays, and tooling development around the technique has mostly stalled, but it&#x2019;s something that greatly improves the performance of your site <em>&#x2013; if you can realistically get away with it!</em></p> <p>Next up is yet another performance analysis as a service.</p> <h2 id="webpagetest">WebPageTest</h2> <p><a href="http://www.webpagetest.org/" target="_blank" aria-label="WebPageTest">WebPageTest</a> <em>(or, WPT for short)</em> is unquestionably the most detailed piece of web performance analysis out there, and it&#x2019;s also gracefully sponsored by Google. They&#x2019;ll give you insight into every request &#x2013; down to the TCP level of the connection. They have several different views into the same data, which makes it all the more useful.</p> <p>Before I go into each view in detail, I&#x2019;ll drop in something Christian Heilmann mentioned to me the other day, which I don&#x2019;t see highlighted often enough. If you want to get accurate results from WPT, <strong>don&#x2019;t just run one test</strong> from one location, one browser, and one connection type. Try multiple configurations, figure out what the experience feels like for a mobile user on <mark class="md-mark">a spotty 3G connection using the Android Browser</mark>, and not just Chrome on broadband.</p> <h3 id="report-overview">Report Overview</h3> <p>First off, WPT presents us with an overview of the report. Here we get a glimpse into the most important performance indicators for our site. For instance, we learn that <strong>we have a SpeedIndex of 1203 on first load</strong>, but that <em>it goes down to <strong>799</strong></em> after the cache is primed. The <mark class="md-mark">SpeedIndex is an overall numeric score that tells us how quickly the visible page content is getting painted</mark> <em>&#x2013; and the lower it is, the better</em>.</p> <p><img alt="Report overview sample screenshot in a test of Pony Foo over WebPageTest" class="" src="https://i.imgur.com/mjik5WK.png"></p> <p>Learning how the site behaves in first load and for a second time is usually revealing. If the difference isn&#x2019;t something like 60%+ faster load, chances are we&#x2019;re missing out on caching opportunities.</p> <h3 id="waterfall-view">Waterfall View</h3> <p>Here, you get to see how requests block each other and what things you should be loading asynchronously to get the best performance gains. The waterfall view is way easier to explain visually, as most reports are, than trying to put them into words. Here&#x2019;s how it looks like for Pony Foo on first view.</p> <p><img alt="First view waterfall view" class="" src="https://i.imgur.com/LgFMmRj.png"></p> <p>As you can see from the data explosion in this graph, it takes <em>153ms</em> for the HTML to finish downloading, after which we download styles, images, and fonts. Rendering starts around the <em>1s</em> mark, and most of the JavaScript only starts downloading after the <em>2s</em> mark. At that point however, the site was already visible. Of course, we&#x2019;re speaking about Chrome on broadband, so anything less than blazing fast should be unsettling.</p> <p>The general approach should be that once actual content finishes loading, then we can add improvements via JavaScript, more images, and whatnot. <strong>Ordering resource loading properly will yield some of the better gains in first page load</strong>, not to mention cutting down on the images that are loaded early in the waterfall graph.</p> <p>How does Pony Foo do in repeat views, after the cache is primed with some resources?</p> <p><img alt="Repeat view waterfall view" class="" src="https://i.imgur.com/C1avf9e.png"></p> <p>Ah, that&#x2019;s <em>much better</em>. As you can see we still have some <mark class="md-mark">requests for analytics and advertisement resources</mark>, but for the most part the CPU is smoking at <strong>100% utilization</strong> and trying to keep up with rendering. The <strong>total load time is halved</strong> from around <em>3s</em> to around <em>1.6s</em>, which is kind of what we should expect when aggressively caching images, fonts, JavaScript and other static assets. The request count, <em>one of the easier-to-track metrics</em>, has gone from 29 to a measly 6, too.</p> <h3 id="analyzing-request-details">Analyzing Request Details</h3> <p>Another view into the same data is the <em>request details</em>, where we&#x2019;re presented with the same list of requests, but this time we&#x2019;re getting individual stats for each of them. While not as useful as the rich waterfall view, you can still get something out of this one. Particularly, it&#x2019;ll become evident where you should be cutting down if there&#x2019;s too many images or requests being made against third-party domains through one of your analytics providers, advertisements, or third-party libraries that end up generating tons of traffic.</p> <p><img alt="Request details in WebPageTest report" class="" src="https://i.imgur.com/s8Ey7Ly.png"></p> <p>It also becomes easy to tell if we are prioritizing content in the correct order, downloading assets as they need to be presented to the user, leaving large images that are out of the viewport in a low priority and getting text in front of &#x201C;eyeballs&#x201D;, as <a href="http://techcrunch.com/2015/02/05/twitter-confirms-new-google-firehose-deal-to-distribute-traffic-to-logged-out-users/" target="_blank" aria-label="Twitter Confirms Google Firehose Deal To Target Logged Out Users">Twitter would call human beings</a>.</p> <h3 id="optimization-checklist">Optimization Checklist</h3> <p>Just like we&#x2019;ve seen in the PageSpeed section, where you get <em>a score from 0 to 100</em> in mobile and another one for desktop, WPT also <strong>provides you with grades</strong>. Instead of discriminating between arbitrary screen sizes, WPT grades your performance in a few different areas. <em>Here&#x2019;s how Pony Foo scored.</em></p> <p><img alt="Pony Foo grades at WebPageTest" class="" src="https://i.imgur.com/GvXqSfB.png"></p> <p>Not that bad. Pony Foo doesn&#x2019;t really need a CDN as that&#x2019;d be overkill for a homebrew blog that doesn&#x2019;t even pay for itself, so that one&#x2019;s out of the picture! When it comes to caching static content, I was surprised the first time I saw one of these reports cards. Over time I learned that pretty much whenever third party services are involved, you&#x2019;re going to get low scores when it comes to caching.</p> <p>To shed some more light on the issue, WPT also provides us with a detailed view where you can see how each request impacts any particular grade. As you can see in the screenshot below, most of the content that isn&#x2019;t being cached <em>(or is being cached for a short period of time)</em> comes from third-party sites.</p> <p><img alt="Optimization grades down to the request level" class="" src="https://i.imgur.com/RyCBNgH.png"></p> <p>In case you didn&#x2019;t have enough reports for the first section of this article, there&#x2019;s one more valuable piece of WebPageTest reporting that you should know about.</p> <h3 id="filmstrip-view">Filmstrip View</h3> <p>To get a visual analysis of your site, simply choose the <em>&#x201C;Visual Comparison&#x201D;</em> tab in the landing page of WPT, and then enter the page you want to run your tests on.</p> <p><img alt="The WebPageTest dashboard" class="" src="https://i.imgur.com/a7ORyGa.png"></p> <p>The filmstrip view is exactly what it sounds like. WPT records a video of your website as it&#x2019;s loading, and then you get to see how the page load progresses, visually. This turns out to be very useful in detecting, and <strong>eventually preventing</strong> flashes of invisible text <em>(FOIT)</em>. These can happen when we load a custom web font synchronously, essentially blocking everything else on expensive font downloads. A common <strong>work-around is to use <em>a web-safe font</em> while the page loads</strong>, and then asynchronously load the custom font. When the custom font loads, we just apply a class name to the document, and overwrite the <code class="md-code md-code-inline">font-family</code>. This way we translate the FOIT into a FOUT <em>(flash of unstyled text)</em>. It might not be as <em>&#x201C;correct&#x201D;</em>, but is definitely <mark class="md-mark">better for humans</mark> visiting your site!</p> <p><img alt="Filmstrip view of Pony Foo" class="" src="https://i.imgur.com/TGz0yfr.png"></p> <p>As you can see, WPT is about as detailed as it gets. The benefits don&#x2019;t come without drawbacks, though. WPT is quite slow, sometimes taking <em>as long as <strong>20s</strong></em> to run a test. Then there&#x2019;s the waiting time. WPT initially places your request to analyze a site on a queue, and you have to wait for a spot to become available before your test runs. To get around that, you might pick a different WPT instance that&#x2019;s not as busy, and you might be able to run your test sooner.</p> <h1 id="automating-measurements-and-budgeting">Automating Measurements <em>(and Budgeting)</em></h1> <p>At this point in my presentation I usually make a pause, and point out how everything we&#x2019;ve been discussing so far is of <strong>a <em>&#x201C;one-of&#x201D;</em> nature</strong>. I don&#x2019;t want attendees going home, auditing their site with DevTools once, or checking out the WPT service and tabbing around the different reports, and then closing the tab, maybe even implementing a fix or two, never again to see how their application is doing in terms of performance.</p> <p>Performance measurement takes dedication. This isn&#x2019;t something you do once and don&#x2019;t need to worry about anymore. Performance should be built into everything you think about and do, even the application&#x2019;s interface should be <a href="http://shop.oreilly.com/product/0636920033578.do" target="_blank" aria-label="Designing for Performance by Lara Hogan"><em>designed</em> with performance in mind</a>.</p> <p>In order for performance measurements to be effective, we must integrate them into our build and deployment processes. There&#x2019;s plenty of tools that we can use to automate the process of measuring performance. Before we go over them, let&#x2019;s turn our attention to budgets. When it comes to keeping track of performance in build processes, we also need to determine a performance budget. Think of budgets as a virtual <mark class="md-mark"><em>&#x201C;you must be this performant to ride the production servers&#x201D;</em></mark> tolls.</p> <p>Combining measurements on every build with strict performance budgets means that not only you get to identify how every build affects application performance, but you also get to impede deployments should they not meet the minimum performance requirements demanded by the build.</p> <p>Let&#x2019;s go over a few tools we can use to automate the measurements, first.</p> <h2 id="automating-pagespeed-with-psi">Automating PageSpeed with <code class="md-code md-code-inline">psi</code></h2> <p>As you can infer from their name, <a href="https://github.com/addyosmani/psi" target="_blank" aria-label="addyosmani/psi on GitHub"><code class="md-code md-code-inline">psi</code></a> is an automated gateway into PageSpeed Insights. It can be used in a variety of ways. There&#x2019;s the <a href="https://github.com/jrcryer/grunt-pagespeed" target="_blank" aria-label="jrcryer/grunt-pagespeed on GitHub">Grunt plugin</a>, an example on <a href="https://github.com/addyosmani/psi-gulp-sample" target="_blank" aria-label="addyosmani/psi-gulp-sample on GitHub">how to use it with Gulp</a>, a <a href="https://github.com/addyosmani/psi#cli" target="_blank" aria-label="CLI to PageSpeed Insights API">command-line</a> interface, and a <a href="https://github.com/addyosmani/psi#api" target="_blank" aria-label="API for PageSpeed Insights">programmatic API</a>. Effectively, that means you can use <code class="md-code md-code-inline">psi</code> with virtually <a href="https://ponyfoo.com/articles/gulp-grunt-whatever" aria-label="Gulp, Grunt, Whatever on Pony Foo">any build system you&#x2019;re comfortable with</a>.</p> <p><a href="https://github.com/addyosmani/psi" target="_blank" aria-label="addyosmani/psi on GitHub"><img alt="Running psi through various build systems" class="" src="https://i.imgur.com/Bth1KNp.png"></a></p> <p>As you can see, <a href="https://github.com/addyosmani/psi" target="_blank" aria-label="addyosmani/psi on GitHub"><code class="md-code md-code-inline">psi</code></a> allows you to run any site through their system, and you&#x2019;ll get a nice report in your terminal, <em>or a JSON response if you&#x2019;re using the programmatic API</em>. You can provide <code class="md-code md-code-inline">psi</code> with a <code class="md-code md-code-inline">threshold</code> option, determining the lowest possible score that would pass the test. If the <code class="md-code md-code-inline">threshold</code> isn&#x2019;t met, then the build will fail, and your application wouldn&#x2019;t be deployed if you were using some sort of continuous deployment mechanism.</p> <blockquote> <p>That&#x2019;s a great way of enforcing performance!</p> </blockquote> <h2 id="webpagetest-automation">WebPageTest Automation</h2> <p>WPT can also be automated through an npm package, <a href="https://github.com/marcelduran/webpagetest-api" target="_blank" aria-label="marcelduran/webpagetest-api on GitHub"><code class="md-code md-code-inline">webpagetest-api</code></a>. The process here is a bit more involved, because you still need to wait in a queue before you can get any results back. You could write a wrapper around <a href="https://github.com/marcelduran/webpagetest-api" target="_blank" aria-label="marcelduran/webpagetest-api on GitHub"><code class="md-code md-code-inline">webpagetest-api</code></a> that did the waiting on your behalf, but the package itself isn&#x2019;t very well prepared to do the waiting on its own. Once you get the results back, you&#x2019;ll <strong>notice the insane level of detail that WPT churns out</strong>, making it an invaluable tool regardless of it being a bit clunky to execute the tests.</p> <p><a href="https://github.com/marcelduran/webpagetest-api" target="_blank" aria-label="marcelduran/webpagetest-api on GitHub"><img alt="Dealing with the WPT API programmatically" class="" src="https://i.imgur.com/zejyYBV.png"></a></p> <p>Just remember that you should be running multiple tests through WPT in order to ensure correctness in the results it produces. Especially, try and test your application from different locations and connection types!</p> <h2 id="as-an-alternative-use-yslow">As an alternative, use YSlow</h2> <p>If you don&#x2019;t have enough with the other two services, you could use <a href="https://github.com/andyshora/grunt-yslow" target="_blank" aria-label="andyshora/grunt-yslow on GitHub"><code class="md-code md-code-inline">grunt-yslow</code></a> as well. This is one of the oldest performance reporting tools in existance, and it came from Yahoo. The problem with it being old is that it doesn&#x2019;t have some of the latest recommendations that we can observe in Google tooling. That being said it&#x2019;s one of the few tools that you can run both as a browser extension and directly in your command-line <em>(or using Grunt)</em>, so there&#x2019;s some value to it as well.</p> <p><a href="https://github.com/andyshora/grunt-yslow" target="_blank" aria-label="andyshora/grunt-yslow on GitHub"><img alt="Using YSlow in the browser or a terminal window is all the same" class="" src="https://i.imgur.com/s182eSA.png"></a></p> <p>Note how YSlow also gives you a grade, an overall performance score, and quite a few rules for you to go over and see whether your application is going to perform well in the real world.</p> <h2 id="budgeting-and-grunt-perfbudget">Budgeting and <code class="md-code md-code-inline">grunt-perfbudget</code></h2> <p>We&#x2019;ve talked about performance budgets, but what exactly is that you should be measuring, tracking, and enforcing? There&#x2019;s a few different kinds of metrics that you could leverage.</p> <ul> <li><em>Milestones</em>, such as &#x201C;time to first tweet&#x201D;, load time, or <em>&#x2013; in broad terms &#x2013;</em> <strong>how long content takes to load</strong></li> <li><em>SpeedIndex</em>, the indicator generated by WPT that tells you <strong>how quickly the visual load of the page is completed</strong></li> <li><em>Quantity-based metrics</em>, like <strong>request count, image weight, and similarly <em>easy-to-track</em> data points</strong></li> <li><em>Rule based metrics</em>, one of the simplest ways to measure performance, by <strong>keeping track of the scores produced by YSlow, WPT, or PageSpeed</strong></li> </ul> <p>Using the packages we&#x2019;ve mentioned so far you can do all of these and more, but if you&#x2019;re looking for a simpler implementation you should look no further than <a href="https://github.com/tkadlec/grunt-perfbudget" target="_blank" aria-label="tkadlec/grunt-perfbudget on GitHub"><code class="md-code md-code-inline">grunt-perfbudget</code></a>. This Grunt task has tons of options allowing you to tweak exactly what metrics are important to your application. It leverages WPT to tell wether the performance budget requirements are met or not.</p> <p><a href="https://github.com/tkadlec/grunt-perfbudget" target="_blank" aria-label="tkadlec/grunt-perfbudget on GitHub"><img alt="Using and configuring grunt-perfbudget" class="" src="https://i.imgur.com/TssYhZ7.png"></a></p> <p>Note that the task might take a while, due to the queuing in WPT. You can however select the kind of connections and locations you want to be testing from, so that also comes in very handy when using <a href="https://github.com/tkadlec/grunt-perfbudget" target="_blank" aria-label="tkadlec/grunt-perfbudget on GitHub"><code class="md-code md-code-inline">grunt-perfbudget</code></a>!</p> <p><img alt="How to implement any of this?" class="" src="https://i.imgur.com/l65vPpr.png"></p> <p>The <a href="https://ponyfoo.com/articles/fixing-web-performance" aria-label="Fixing Performance in the Web Stack">second part of this article</a> is devoted to finding fixes for the performance issues you&#x2019;ll uncover when measuring performance. You may also refer to <a href="https://github.com/bevacqua/perfschool" target="_blank" aria-label="bevacqua/perfschool on GitHub"><code class="md-code md-code-inline">perfschool</code></a> and <a href="http://bevacqua.io/bf/book" target="_blank" aria-label="JavaScript Application Design: A Build First Approach, on Manning Publishing">JavaScript Application Design</a> if you&#x2019;re interested in getting some hands of experience with measurements, budgets, and performance optimizations.</p> <h2 id="diy-workshop-perfschool">DIY Workshop: <code class="md-code md-code-inline">perfschool</code></h2> <p>The workshopper runs entirely in the command-line, guiding you through a bunch of different situations where you&#x2019;ll need to create secure encrypted tunnels to expose sites in your local environment to services like PageSpeed, you&#x2019;ll learn how to optimize and shrink images, and how to enforce performance budgets. Meanwhile, I try to amuse you with cat pictures rendered directly to your terminal and things like that.</p> <p><a href="https://github.com/bevacqua/perfschool" target="_blank" aria-label="bevacqua/perfschool on GitHub"><img alt="perfschool workshopper&#x2019;s terminal" class="" src="https://raw.githubusercontent.com/bevacqua/perfschool/master/resources/menu.png"></a></p> <h2 id="javascript-application-design-a-build-first-approach">JavaScript Application Design: A Build First Approach</h2> <p>This book is split into two parts. In the first one you&#x2019;ll find everything about build tasks and automation. You&#x2019;ll learn how to optimize your application for development flows and for releases, <a href="https://github.com/buildfirst/buildfirst/tree/master/ch04/01b_critical-inlining" target="_blank" aria-label="Inlining Critical CSS code sample">optimizing performance in the application</a> as we&#x2019;ve been discussing in the article so far. You&#x2019;ll also learn about picking the right build tool, development flows, environment configuration, continuos integration, continuous deployments, and hosting your apps on Heroku or Amazon Web Services.</p> <p>The second part of the book is dedicated to application design, covering everything from developing code in small modules and the different alternatives to accomplish that, staying away from callback hell and understanding <code class="md-code md-code-inline">this</code>, scoping, and similar quirks of the language. It also has chapters dedicated to the MVC pattern, one for all kinds of testing techniques for both server-side and client-side JavaScript, and another one devoted to thoughtful REST API design.</p> <p>When you&#x2019;re done with the chapters, there&#x2019;s also a series of appendices on Node.js, an introduction to Grunt, how tho choose the right build tool, and on JavaScript code quality.</p> <blockquote> <p><a href="http://www.amazon.com/gp/product/1617291951" target="_blank" aria-label="JavaScript Application Design: A Build First Approach, on Amazon"><img alt="Book cover illustration" class="" src="https://www.gravatar.com/avatar/cee019b251cf09f440b4427541e46cb8.png?s=400"></a></p> <p><em>&#x201C;Enjoy the ride through the process of improving your development workflow&#x201D; &#x2013; Addy Osmani, Google Developer Advocate</em></p> </blockquote> <p>You can get the book from <a href="http://www.amazon.com/gp/product/1617291951" target="_blank" aria-label="JavaScript Application Design: A Build First Approach, on Amazon">Amazon</a>, the <a href="http://bevacqua.io/bf/book" target="_blank" aria-label="JavaScript Application Design: A Build First Approach, on Manning Publishing">publisher&#x2019;s website</a>, or in choice physical bookstores. There&#x2019;s also <a href="https://github.com/buildfirst/buildfirst" target="_blank" aria-label="JavaScript Application Design code samples on GitHub">free code samples on GitHub</a> and a couple of chapters are publicly available on the publisher&#x2019;s site too.</p> <h2 id="further-reading">Further Reading</h2> <ul> <li><a href="https://ponyfoo.com/articles/fixing-web-performance" aria-label="Fixing Performance in the Web Stack">Fixing Performance in the Web Stack</a></li> <li><a href="https://ponyfoo.com/articles/critical-path-performance-optimization" aria-label="Critical Path Performance Optimization at Pony Foo">Critical Path Performance Optimization at Pony Foo</a></li> <li><a href="https://ponyfoo.com/articles/stop-breaking-the-web" aria-label="Stop Breaking the Web on Pony Foo">Stop Breaking the Web</a></li> <li><a href="https://adactio.com/journal/9312" target="_blank" aria-label="On The Verge, article by Jeremy Keith">On The Verge</a></li> <li><a href="http://timkadlec.com/2015/02/client-side-templatings-major-bug/" target="_blank" aria-label="Client-side templating&apos;s major bug, by Tim Kadlec">Client-side MVC&#x2019;s Major Bug</a></li> <li><a href="http://timkadlec.com/2015/05/choosing-performance/" target="_blank" aria-label="Choosing Performance, by Tim Kadlec">Choosing Performance</a></li> </ul></div>
